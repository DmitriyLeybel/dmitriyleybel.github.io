<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Technical Blog</title>
<link>https://www.dmlbl.com/technical_blog.html</link>
<atom:link href="https://www.dmlbl.com/technical_blog.xml" rel="self" type="application/rss+xml"/>
<description>Dmitriy Leybel&#39;s personal website and technical blog</description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Tue, 11 Jun 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>LLMs, Brains, Physical Reality. Can Large Language Models really lead to superintelligence?</title>
  <dc:creator>Dmitriy Leybel</dc:creator>
  <link>https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/</link>
  <description><![CDATA[ 





<p>Despite much anticipation and even more fear, it pains me to say that LLMs will not be summoning the <em>Machine God</em> anytime soon.</p>
<section id="origins" class="level5">
<h5 class="anchored" data-anchor-id="origins">Origins</h5>
<p>Language is a human creation. Whether it’s English, Latin, Aramaic, or even C++, language is created by humans – either artificially through intentionality, as in case of the programming language you know and love, or through the waterfall of time and our basic need to communicate with one another, we created the words, structures, and abstractions we utter daily. In any case, they are very sapiens constructs, necessarily bound to our capacity to understand and manipulate the world around us.</p>
<p>We are agentic beings tugged by evolution to survive and multiply. An agent that is reacting to its environment and acting upon it must have a model of the reality it inhabits. It doesn’t have to be a great model, hell, it doesn’t even have to be a good model. It has to be a satisfactory model that weighs an extraordinary number of trade offs. There is no free lunch, especially in an antagonistic universe that is doing everything in its power to feed its entropic addiction and tear you apart, atom by atom. We cannot afford to model the entire universe in our <strong>expensive</strong> brains, which at only 2% of our body mass consume 20% of our energy. Let’s take a step back for a second, or roughly half a billion years – brains made it to the scene via centralization and cephalization. Organisms initially had distributed nervous systems called nerve nets, which we see in hydras and jellyfish today. Neurons were simplistic logical gates where an activation would lead to a clear reaction of the organism - reflexive. As chance had it, as the nervous system migrated to the center of the organism over hundreds of millions of years, it became more effective at helping them respond to stimuli and thereby increased their fitness. Eventually, a very large cluster of neurons not only centralized but cephalized, it gathered at the anterior end of the body(think flatworms).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/hydra-nematode.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/hydra-nematode.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
<p>Neurons in proximity have a world of opportunity to connect to one another in myriads of ways at an extremely low cost. <em>Look, ma, a biological processor.</em> Evolution accelerated in ways that many people don’t appreciate thanks to this one little trick – the sensation to action pipeline became the perfect experimentation bedrock now that the neurons could assemble in a nearly infinite amount of ways. The integration of signals from the sensory systems of the organism allowed it to model the world around it in a manner that was previously impossible. Much like our nematode friends, we integrate information from numerous modalities and model the world around us for the purpose of acting on it.</p>
</section>
<section id="language" class="level5">
<h5 class="anchored" data-anchor-id="language">Language</h5>
<p>Nematodes don’t really have a way of expressing their internal model of the world, but we do. Even if they could, it’d be pretty damn boring. “Bright light, bad smell, pressure on tail, move right, profit” Although I’m fairly certain you’d rather be interacting with it than a few people you can think of. Language allows us to express our model of the world to other people for the purposes of cooperation, conflict avoidance, and informational exchange. Through the experimentation with phonation(making sounds) and the growth of our brains necessary to optimize our behavior in an uncertain environment, selective pressures precipitated the development of language. If Grog says “urrghhhhu” and Brog says “grruuuugh”, and they both now have a higher likelihood of finding a juicy antelope meal, the incentive to experiment with language grows in their own lifetimes. If Grog and Brog now have more children because of their linguistic prowess, this also contributes to an evolutionary process which supports linguistic development. Their progeny do not start off with a blank slate of knowledge; they learn from their parents, and improve upon it. This is known as Natural Language. The kids of Grog and Brog can now take the phonemes they learned from their parents and improve upon them for more complex needs – maybe they learn to represent the weather, or perhaps they learn how to represent the difference between hunting and foraging. In any case, this naturally creates a complex structure out of necessity.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/fmri-language.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/fmri-language.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="234"></a></p>
</figure>
</div>
<p>If you look at fMRIs taken of people performing language-related tasks, the screen tends to light up like a Christmas tree. The brain is a very specialized organ with hyperspecialized regions within it, yet the task of language interpretation and generation is highly distributed, and quite calorie-consuming. Language is able to access the complex model we’ve created of our world. It is language that has allowed us to launch spaceships and to pontificate on the existence of dark matter. We are still the descendants of Grog and Brog, who used a form of language to thrive, and our brains aren’t morphologically different; we also still have the same incentives give or take an unremarkable error margin. Keep this in mind.</p>
<p>The progression of our linguistic prowess involves offloading it from our memory and onto some physical medium. In turn, this influenced its future development.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/savanna-brain-writing.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/savanna-brain-writing.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</section>
<section id="llms" class="level5">
<h5 class="anchored" data-anchor-id="llms">LLMs</h5>
<p>Large Language Models(LLMs) have shocked the very core of humanity. Diffusion models which are responsible for image and video generation have had a similar effect. As it turns out, when we create a clever neural architecture in silico(on computer), throw all of the data we have generated as a human species at it, and the compute/energy equivalent of running a nuclear reactor(1GWh) for 50 hours with the sole purpose of training the model, we create something so novel and uncanny that we begin singing songs of apocalypse and salvation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/machine-god-llm.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/machine-god-llm.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="636"></a></p>
</figure>
</div>
<p>For comparison, a human brain only requires ~0.0088 Gigwatt hours to run for a lifetime.</p>
<p>LLMs are trained with a highly curated set of nearly all(contentiously) of the data digitally available: approximately 10 trillion words. Like humans, they develop a model of the world, but through a process that helps them predict the next token. A token is typically a group of letters that cooccur - e.g.&nbsp;<code>moth</code> + <code>er</code>, but it can also be something functional like <code>&lt;|endoftext|&gt;</code> which signifies the end of a response. In addition, they are also trained to answer questions in a manner that is favorable to the corporation building the model and to avoid outputting what they believe are naughty words and ideas – this concept is often viewed as alignment.</p>
<p>At its core, a model is a compressed and accessible form of the data it is trained on, otherwise, it wouldn’t be a very useful model. An input passes through the model to produce an output. We model the vast amounts of inputs we receive from our sensory organs and observations of cause and effect; this model is stored in our big beautiful brains. This creates a compressed latent space of information aligned in way that we can access to act upon the world we inhabit. Another compressive and decompressive process involves our decoding of this information and encoding it into words for the purposes of communicating.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/dogpression.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/dogpression.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
<p>An LLM is trained on this information that we’ve produced communicating with one another in casual and technical conversations in forums, through books, blogs, and so forth. While this is extremely lossy information of a human’s model of the world and thereby an even more lossy model of reality, it is composed of immensely wide and diverse sets of words used to express ideas throughout written history.</p>
<p>Not surprisingly, it is a transcendental experience to speak to an LLM that contains an acceptable model of our world tuned to respond conversationally. It is a superb summarizer of text, and it holds a magnificent amount of information that it can access given the right prompt. It is a majestic wordsmith, as it operates across syntax and semantics incredibly well. Ask it to write you a song about a specific topic, and it’ll create something unique.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/pink-elephant.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/pink-elephant.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="547"></a></p>
</figure>
</div>
<p>What it lacks is pragmatics. Pragmatics involves attaching the relevance of situational context to human speech. An LLM does not act upon its theory of mind, which it does have access to – just ask it what a person may be motivated by when their dog just ate a box of chocolate, all while they’re struggling to pay rent. The information it has consumed over the huge corpus of data does contain descriptions of how we feel, how we act in relation to those feelings, and what situations create those motivations within us. I have not seen a single successful evaluation of it using this knowledge in any meaningful manner. LLMs excel at written exams, they even excel at programming, but they appear to have no capacity for metacognition. This is ultimately a key reason behind LLMs being referred to as <em>stochastic parrots</em>.</p>
<p>Stochastic parrots are incredible algorithms. They allow us to navigate and extract information in many forms from the entirety of written human knowledge. They do hallucinate, but that is but a technical challenge which is solved by grounding them in a system that can enforce factual consistency. A stochastic parrot serves you, as you imbue it with the pragmatics and purpose it needs. We are the ones who seed them with our own agency. We then refer to them as agents, which may arguably be a misnomer since the agency does not originate from these algorithms. A swarm of these agents directed to any given task is inevitably a multiplier of our productivity.</p>
</section>
<section id="stagnation" class="level5">
<h5 class="anchored" data-anchor-id="stagnation">Stagnation?</h5>
<p>Human achievement looks and feels asymptotic when you observe the amount of discoveries and innovations throughout the centuries. Even our capability to extend our own lifespan seems to be leveling out and in many cases, decreasing. I’m an optimist and I yearn for a gold rush of exponentiality, however I am also a realist. We have to acknowledge reality if we want to find a single nugget. I am not particularly fond of pessimists, nor do I respect them, as self-fulling prophecy sticks to them like shit to a pig.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/asymptotes.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/asymptotes.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="309"></a></p>
</figure>
</div>
<p>LLMs are inextricably tied to our own intelligence and our model of reality even if they know more facts than any single human alive. Language is already a product of our collective intelligence, and in many cases acts as a positive feedback loop where we use it enhance our own capacity through a series of stacking abstractions. These are the very abstractions that led us to build and exploit the elegance of LLMs in creative ways. However, the acquisition and use of language has always been heavily constrained and driven by the key aspects that pragmatics is concerned with – the need to solve problems, the need to communicate effectively towards a goal, the need to navigate the complexity of the world.</p>
</section>
<section id="hype" class="level5">
<h5 class="anchored" data-anchor-id="hype">Hype</h5>
<p>Despite the incredible capabilities of LLMs, the hype surrounding artificial intelligence has led to a premature leap from the reality of these models. In a comedic sequence of events, the marketers of LLMs and the doomsayers have jumped over Artificial General Intelligence(AGI) straight to Artificial Superintelligence(ASI). ASI used to stand for Artificial Specialized Intelligence, but collective amnesia is one heck of a drug.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/agi2b2b.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/agi2b2b.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="296"></a></p>
</figure>
</div>
<p>Companies like OpenAI and Anthropic throw a bit of preferential ‘function calling’ on their LLMs and like to underscore their agentic ability. In essence, they increase the likelihood of a model responding with a name of a function. It’s equivalent to <code>you have access to func1: given x does y and func2: given y does b, now answer this question, choose one of these functions if necessary to get more information: ...</code> Would you look at that, their valuation just went up by a few billion dollars. The near future likely belongs to Artificial Specialized Intelligence. I’m not necessarily referring to something like AlphaGo, which is able to beat the best human players at Go, although the same concept applies. We can and do create specialized tools with LLMs – humans have to imbue the system with intentionality, agency, and everything that the model inherently lacks due to its nature as a next-word-predictor.</p>
<p>As more compute and data are thrown at the models, they become more proficient when it comes scoring highly on evaluations. The evaluations themselves are created by humans to perform human-centric tasks such as passing various board exams and being able to program software. We shouldn’t expect out-of-distribution performance from the available model, but we can massage the latent space with our input in a way that leads to 99th percentile in-distribution performance.</p>
</section>
<section id="anti-hype" class="level5">
<h5 class="anchored" data-anchor-id="anti-hype">Anti-Hype</h5>
<p>To recap the salient points:</p>
<ol type="1">
<li><p>Humans, like all other organisms ingest and compress information about the world into a model for the sake of survival. This is an energetically expensive process and is focused on the elements that help the organism survive and reproduce.</p></li>
<li><p>Language is another compressive and expensive process that we use to increase our biological fitness. We compress the model of the world we created for the purposes of communicating certain intents and ideas with others.</p></li>
<li><p>LLMs are trained to predict the next token over trillions of tokens(and words). Through this, they gain their own compressed model of the world based on the aforementioned compressed models.</p></li>
<li><p>Language is only a subset of human intelligence and excludes the pragmatics of human communication.</p></li>
</ol>
<p>(With LLMs) There will not be a singularity. There will be no Skynet. There will only be hype. Can a swarm of AI agents take your job? Probably. Give them a robot to control and they’ll take many, however, they’ll create even more. These AI ‘agents’ are not agentic in their own right - their agency is wound by humans. On their own, they are little more than Game of Life automata.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/GOL.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/GOL.gif" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>


</section>

 ]]></description>
  <category>LLMs</category>
  <category>Brain</category>
  <category>AGI</category>
  <guid>https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/</guid>
  <pubDate>Tue, 11 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="https://www.dmlbl.com/technical_blog/thinking-out-loud/llms-brains-reality/images/machinegodcard.png" medium="image" type="image/png" height="30" width="144"/>
</item>
<item>
  <title>Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four</title>
  <dc:creator>Dmitriy Leybel</dc:creator>
  <link>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/</link>
  <description><![CDATA[ 





<p><strong>On the last episode of</strong>: <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html">Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three</a>:</p>
<ul>
<li><p>Out of the many available options for vector DBs, we’re using <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html##vector-database-simple-as">Chroma</a> due to its simplicity and ease of use – a very powerful plug ’n play option.</p></li>
<li><p>The nodes in our knowledge graph are linked to <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html##vector-database-simple-as#connecting-vector-db-to-knowledge-graph">generated embeddings</a>.</p></li>
<li><p>When we ask a question, we can find the semantically related nodes by generating an embedding for the question and the running a similarity search using a metric like cosine distance.</p></li>
</ul>
<hr>
<section id="overview" class="level1 page-columns page-full" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Overview</h1>
<p>Below is a flow-charted summary of what this post will be focusing on. The <a href="../knowledge-graph-rag-benchmark-3/">vector database</a> and <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html">knowledge graph</a> are generated in previous posts.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="images/question-answering-flow_tnspt.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-1" title="Illustrated flow from question to structured answer."><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/images/question-answering-flow_tnspt.png" class="column-page img-fluid figure-img" alt="Illustrated flow from question to structured answer."></a></p>
<figcaption>Illustrated flow from question to structured answer.</figcaption>
</figure>
</div>
</section>
<section id="question" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Question</h1>
<p><em>To be or not to be?</em> 🫣</p>
<p>Our purpose here is to answer a question provided a set of paragraphs, and provide the supporting evidence for it.</p>
<p>As a brief reminder, lets peek into a single entry of the MuSiQue dataset used in our previous exploration:</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-81">
<div id="cell-81" class="cell" data-tags="[&quot;main_line&quot;]" data-execution_count="403">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">lines[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="403">
<pre><code>{'id': '2hop__604134_131944',
 'paragraphs': [{'idx': 0,
   'title': 'Commonwealth of the Philippines',
   'paragraph_text': "The Commonwealth of the Philippines (; ) was the administrative body that governed the Philippines from 1935 to 1946, aside from a period of exile in the Second World War from 1942 to 1945 when Japan occupied the country. It replaced the Insular Government, a United States territorial government, and was established by the Tydings–McDuffie Act. The Commonwealth was designed as a transitional administration in preparation for the country's full achievement of independence.",
   'is_supporting': False},
  {'idx': 1,
   'title': 'Lake Oesa',
   'paragraph_text': 'Lake Oesa is a body of water located at an elevation of 2,267m (7438 ft) in the mountains of Yoho National Park, near Field, British Columbia, Canada.',
   'is_supporting': False},
  {'idx': 2,
   'title': 'Arafura Swamp',
   'paragraph_text': 'The Arafura Swamp is a large inland freshwater wetland in Arnhem Land, in the Top End of the Northern Territory of Australia. It is a near pristine floodplain with an area of that may expand to by the end of the wet season, making it the largest wooded swamp in the Northern Territory and, possibly, in Australia. It has a strong seasonal variation in depth of water. The area is of great cultural significance to the Yolngu people, in particular the Ramingining community. It was the filming location for the film "Ten Canoes".',
   'is_supporting': False},
  {'idx': 3,
   'title': 'Wapizagonke Lake',
   'paragraph_text': 'The Wapizagonke Lake is one of the bodies of water located the sector "Lac-Wapizagonke", in the city of Shawinigan, in the La Mauricie National Park, in the region of Mauricie, in Quebec, in Canada.',
   'is_supporting': False},
  {'idx': 4,
   'title': 'Khabarovsky District',
   'paragraph_text': 'Khabarovsky District () is an administrative and municipal district (raion), one of the seventeen in Khabarovsk Krai, Russia. It consists of two unconnected segments separated by the territory of Amursky District, which are located in the southwest of the krai. The area of the district is . Its administrative center is the city of Khabarovsk (which is not administratively a part of the district). Population:',
   'is_supporting': False},
  {'idx': 5,
   'title': 'Silver Lake (Harrisville, New Hampshire)',
   'paragraph_text': 'Silver Lake is a water body located in Cheshire County in southwestern New Hampshire, United States, in the towns of Harrisville and Nelson. Water from Silver Lake flows via Minnewawa Brook and The Branch to the Ashuelot River, a tributary of the Connecticut River.',
   'is_supporting': False},
  {'idx': 6,
   'title': 'Hyderabad',
   'paragraph_text': 'The jurisdictions of the city\'s administrative agencies are, in ascending order of size: the Hyderabad Police area, Hyderabad district, the GHMC area ("Hyderabad city") and the area under the Hyderabad Metropolitan Development Authority (HMDA). The HMDA is an apolitical urban planning agency that covers the GHMC and its suburbs, extending to 54 mandals in five districts encircling the city. It coordinates the development activities of GHMC and suburban municipalities and manages the administration of bodies such as the Hyderabad Metropolitan Water Supply and Sewerage Board (HMWSSB).',
   'is_supporting': False},
  {'idx': 7,
   'title': 'San Juan, Puerto Rico',
   'paragraph_text': "San Juan is located along the north - eastern coast of Puerto Rico. It lies south of the Atlantic Ocean; north of Caguas and Trujillo Alto; east of and Guaynabo; and west of Carolina. The city occupies an area of 76.93 square miles (199.2 km), of which, 29.11 square miles (75.4 km) (37.83%) is water. San Juan's main water bodies are San Juan Bay and two natural lagoons, the Condado and San José.",
   'is_supporting': False},
  {'idx': 8,
   'title': 'States of Germany',
   'paragraph_text': 'Local associations of a special kind are an amalgamation of one or more Landkreise with one or more Kreisfreie Städte to form a replacement of the aforementioned administrative entities at the district level. They are intended to implement simplification of administration at that level. Typically, a district-free city or town and its urban hinterland are grouped into such an association, or Kommunalverband besonderer Art. Such an organization requires the issuing of special laws by the governing state, since they are not covered by the normal administrative structure of the respective states.',
   'is_supporting': False},
  {'idx': 9,
   'title': 'Norfolk Island',
   'paragraph_text': "Norfolk Island is located in the South Pacific Ocean, east of the Australian mainland. Norfolk Island is the main island of the island group the territory encompasses and is located at 29°02′S 167°57′E\ufeff / \ufeff29.033°S 167.950°E\ufeff / -29.033; 167.950. It has an area of 34.6 square kilometres (13.4 sq mi), with no large-scale internal bodies of water and 32 km (20 mi) of coastline. The island's highest point is Mount Bates (319 metres (1,047 feet) above sea level), located in the northwest quadrant of the island. The majority of the terrain is suitable for farming and other agricultural uses. Phillip Island, the second largest island of the territory, is located at 29°07′S 167°57′E\ufeff / \ufeff29.117°S 167.950°E\ufeff / -29.117; 167.950, seven kilometres (4.3 miles) south of the main island.",
   'is_supporting': False},
  {'idx': 10,
   'title': 'Perm',
   'paragraph_text': 'Perm (;) is a city and the administrative centre of Perm Krai, Russia, located on the banks of the Kama River in the European part of Russia near the Ural Mountains.',
   'is_supporting': True},
  {'idx': 11,
   'title': 'Zvezda Stadium',
   'paragraph_text': 'Star (Zvezda) Stadium (), until 1991 Lenin Komsomol Stadium (), is a multi-use stadium in Perm, Russia. It is currently used mostly for football matches and is the home ground of FC Amkar Perm. The stadium holds 17,000 people and was opened on June 5, 1969.',
   'is_supporting': True},
  {'idx': 12,
   'title': 'Paea',
   'paragraph_text': 'Paea is a commune in the suburbs of Papeete in French Polynesia, an overseas territory of France in the southern Pacific Ocean. Paea is located on the island of Tahiti, in the administrative subdivision of the Windward Islands, themselves part of the Society Islands. At the 2017 census it had a population of 13,021.',
   'is_supporting': False},
  {'idx': 13,
   'title': 'Potamogeton amplifolius',
   'paragraph_text': 'Potamogeton amplifolius, commonly known as largeleaf pondweed or broad-leaved pondweed, is an aquatic plant of North America. It grows in water bodies such as lakes, ponds, and rivers, often in deep water.',
   'is_supporting': False},
  {'idx': 14,
   'title': 'Biysky District',
   'paragraph_text': "Biysky District () is an administrative and municipal district (raion), one of the fifty-nine in Altai Krai, Russia. It is located in the east of the krai and borders with Zonalny, Tselinny, Soltonsky, Krasnogorsky, Sovetsky, and Smolensky Districts, as well as with the territory of the City of Biysk. The area of the district is . Its administrative center is the city of Biysk (which is not administratively a part of the district). District's population:",
   'is_supporting': False},
  {'idx': 15,
   'title': 'Contoocook Lake',
   'paragraph_text': 'Contoocook Lake () is a water body located in Cheshire County in southwestern New Hampshire, United States, in the towns of Jaffrey and Rindge. The lake, along with Pool Pond, forms the headwaters of the Contoocook River, which flows north to the Merrimack River in Penacook, New Hampshire.',
   'is_supporting': False},
  {'idx': 16,
   'title': 'Bogotá',
   'paragraph_text': 'Bogotá (/ ˈboʊɡətɑː /, / ˌbɒɡəˈtɑː /, / ˌboʊ - /; Spanish pronunciation: (boɣoˈta) (listen)), officially Bogotá, Distrito Capital, abbreviated Bogotá, D.C., and formerly known as Santafé de Bogotá between 1991 and 2000, is the capital and largest city of Colombia, administered as the Capital District, although often thought of as part of Cundinamarca. Bogotá is a territorial entity of the first order, with the same administrative status as the departments of Colombia. It is the political, economic, administrative, industrial, artistic, cultural, and sports center of the country.',
   'is_supporting': False},
  {'idx': 17,
   'title': 'Body water',
   'paragraph_text': "Intracellular fluid (2 / 3 of body water) is fluid contained within cells. In a 72 - kg body containing 40 litres of fluid, about 25 litres is intracellular, which amounts to 62.5%. Jackson's texts states 70% of body fluid is intracellular.",
   'is_supporting': False},
  {'idx': 18,
   'title': 'Territorial waters',
   'paragraph_text': 'Territorial waters or a territorial sea, as defined by the 1982 United Nations Convention on the Law of the Sea, is a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low - water mark) of a coastal state. The territorial sea is regarded as the sovereign territory of the state, although foreign ships (civilian) are allowed innocent passage through it, or transit passage for straits; this sovereignty also extends to the airspace over and seabed below. Adjustment of these boundaries is called, in international law, maritime delimitation.',
   'is_supporting': False},
  {'idx': 19,
   'title': 'Cyprus Popular Bank',
   'paragraph_text': "Cyprus Popular Bank (from 2006 to 2011 known as Marfin Popular Bank) was the second largest banking group in Cyprus behind the Bank of Cyprus until it was 'shuttered' in March 2013 and split into two parts. The 'good' Cypriot part was merged into the Bank of Cyprus (including insured deposits under 100,000 Euro) and the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds. The uninsured depositors were subject to a bail-in and became the new shareholders of the legacy entity. As at May 2017, the legacy entity is one of the largest shareholders of Bank of Cyprus with 4.8% but does not hold a board seat. All the overseas operations, of the now defunct Cyprus Popular Bank, are also held by the legacy entity, until they are sold by the Special Administrator, at first Ms Andri Antoniadou, who ran the legacy entity for two years, from March 2013 until 3 March 2015. She tendered her resignation due to disagreements, with the Governor of the Central Bank of Cyprus and the Central Bank Board members, who amended the lawyers of the legacy entity, without consulting her. Veteran banker Chris Pavlou who is an expert in Treasury and risk management took over as Special Administrator of the legacy entity in April 2015 until December 2016. The legacy entity is pursuing legal action against former major shareholder Marfin Investment Group.",
   'is_supporting': False}],
 'question': 'What is the body of water by the city where Zvezda stadium is located?',
 'question_decomposition': [{'id': 604134,
   'question': 'Zvezda &gt;&gt; located in the administrative territorial entity',
   'answer': 'Perm',
   'paragraph_support_idx': 11},
  {'id': 131944,
   'question': 'Which is the body of water by #1 ?',
   'answer': 'Kama River',
   'paragraph_support_idx': 10}],
 'answer': 'Kama River',
 'answer_aliases': ['Kama'],
 'answerable': True}</code></pre>
</div>
</div>
</div>
</div>
<p>The question being:</p>
<p><code>What is the body of water by the city where Zvezda stadium is located?</code>.</p>
<p>Simple enough.</p>
<p>The format of the answer is also relevant to us:</p>
<pre><code>{'id': '2hop__252311_366220',
 'predicted_answer': 'Steven Spielberg',
 'predicted_answerable': True,
 'predicted_support_idxs': [10, 18]}</code></pre>
<p>This is taken straight from one of the prediction sets available in <a href="https://github.com/StonyBrookNLP/musique">MuSiQue’s repo</a>. Steven Spielberg is in fact not a body of water, but a movie director.</p>
<p>Our pipeline’s output needs to include: 1) The answer 2) Whether the question is answerable given the supporting paragraphs. 3) The paragraphs which contain the supporting information to answer the question.</p>
</section>
<section id="prompting" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Prompting</h1>
<p>That’s right, we’re back to prompting, our bread n buttah.</p>
<p>This time, we’ll be feeding the question, instructions, and supporting evidence to the LLM. This will be very similar to us coaxing the LLM to create the knowledge graph in one of the <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#prompting">previous posts</a>.</p>
<section id="prompt-template" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="prompt-template"><span class="header-section-number">3.1</span> Prompt Template</h2>
<p>First, we need a system message that helps guide our model along, delivers and understanding of the input, and gently coerces it to output an aptly formatted answer.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-85">
<div id="cell-85" class="cell" data-tags="[&quot;pred_prompts&quot;]" data-execution_count="24">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SystemMessage</span>
<span id="cb4-2"></span>
<span id="cb4-3">guidance_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are the best taker of tests, particularly excelling at </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">answering questions based on information provided to you. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will be given nodes and edges from a knowledge graph in </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a JSON format and you are expected to answer a question based </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">on them. The 'from_node' and 'to_node' fields in the edges correspond </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">to the 'connecting_id' fields in the nodes. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Your output will only be JSON, and nothing more. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">No yapping.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Answer(BaseModel):</span>
<span id="cb4-14">    answerable: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true or false value. Whether or not the answer is answerable based on the provided nodes and edges"</span>)</span>
<span id="cb4-15">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The answer to the question. Terse and concise."</span>)</span>
<span id="cb4-16">    support_idxs: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The indices of the nodes that support the answer. From 'paragraph_idx' field"</span>)</span>
<span id="cb4-17"></span>
<span id="cb4-18">format_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This JSON Schema is the format you will be using: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>json<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dumps(Answer.model_json_schema())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-19"></span>
<span id="cb4-20">system_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SystemMessage(guidance_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> format_str)</span></code></pre></div>
</div>
</div>
<p>The <code>guidance_str</code> lays out what I described above. We also provide the ‘format_str’, which includes a JSON dump of the <code>Answer</code> class schema, brought to you by Pydantic, although this time it’s a bit less convoluted than the one used to create the nodes and edges of our knowledge graph.</p>
<p>In addition to the System message, we also need to add the Human message template to our pipeline which will allow us to pass in the question and evidence.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-89">
<div id="cell-89" class="cell" data-tags="[&quot;human_message_pred&quot;]" data-execution_count="26">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">human_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Supporting Evidence:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{evidence}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-2">human_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HumanMessagePromptTemplate.from_template(human_str)</span></code></pre></div>
</div>
</div>
</section>
</section>
<section id="gathering-evidence" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Gathering Evidence</h1>
<p>Next up, we need to gather the supporting evidence for our model from our knowledge base(the combination of our knowledge graph and vector store which we created in previous posts).</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-102">
<div id="cell-102" class="cell" data-tags="[&quot;top_results_pred&quot;]" data-execution_count="87">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">top_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collection.query(</span>
<span id="cb6-2">    query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lines[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>]]</span>
<span id="cb6-3">    )</span>
<span id="cb6-4">top_results</span>
<span id="cb6-5"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>{'ids': [['6e5f08dc-fe95-4b74-884d-dcce8470290a',
   '7b534168-d2e7-498e-9115-5e21d6c638f3',
   '9a4b69f8-749a-4b7c-a3e3-e2db4f3823d1',
   '7c83cf46-05fc-491d-9667-20acf68fe70f',
   '7956f84b-20a8-4836-ae7a-c7311d716cd1',
   '56ae1a37-74f4-486b-b517-34b99027ba36',
   '631d3937-3f47-4598-8f45-bdb90d5eb91f',
   'c7120f30-4152-4e88-bec1-698bfdd2d5e1',
   'd97d057d-2564-427d-9703-e77a61ff58c7',
   'd86a7f75-df06-47f1-a30d-67a921d822bf']],
 'distances': [[1.3786437511444092,
   1.4539598226547241,
   1.4855282306671143,
   1.501915693283081,
   1.5252399444580078,
   1.5319929122924805,
   1.552965760231018,
   1.5618354082107544,
   1.5635420083999634,
   1.5718779563903809]],
 'metadatas': [[None, None, None, None, None, None, None, None, None, None]],
 'embeddings': None,
 'documents': [["{'semantic_id': 'territorial_waters', 'category': 'geographic_area', 'attributes': {'name': 'territorial waters', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state', 'source': '1982 United Nations Convention on the Law of the Sea'}, 'paragraph_idx': 18}",
   "{'semantic_id': 'territorial_sea', 'category': 'geographic_area', 'attributes': {'name': 'territorial sea', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state', 'sovereign_territory': True, 'foreign_ship_passage': 'innocent passage through it or transit passage for straits', 'jurisdiction': 'extends to airspace over and seabed below'}, 'paragraph_idx': 18}",
   "{'semantic_id': 'hmwssb', 'category': 'administrative_body', 'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage Board', 'type': 'water_management'}}",
   "{'semantic_id': 'arafura_swamp', 'category': 'natural_feature', 'attributes': {'name': 'Arafura Swamp', 'type': 'inland freshwater wetland', 'location': {'region': 'Arnhem Land', 'territory': 'Northern Territory', 'country': 'Australia'}, 'size': {'area': {'value': None, 'unit': 'km2'}, 'expansion_during_wet_season': True}, 'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia', 'cultural_significance': 'of great cultural significance to the Yolngu people, in particular the Ramingining community', 'filming_location': 'Ten Canoes'}, 'paragraph_idx': 2}",
   "{'semantic_id': 'san_juan', 'category': 'city', 'attributes': {'name': 'San Juan', 'location': {'country': 'Puerto Rico', 'region': 'north-eastern coast'}, 'borders': {'north': 'Atlantic Ocean', 'south': ['Caguas', 'Trujillo Alto'], 'east': ['Carolina'], 'west': ['Guaynabo']}, 'area': {'value': 76.93, 'unit': 'square miles'}, 'water_bodies': ['San Juan Bay', 'Condado Lagoon', 'San José Lagoon'], 'water_area': {'value': 29.11, 'unit': 'square miles', 'percentage': 37.83}}, 'paragraph_idx': 7}",
   "{'semantic_id': 'contoocook_river', 'category': 'river', 'attributes': {'name': 'Contoocook River', 'flow_direction': 'north', 'outflow_destination': 'merrimack_river'}, 'paragraph_idx': 15}",
   "{'semantic_id': 'ghmc_area', 'category': 'administrative_district', 'attributes': {'name': 'GHMC area', 'jurisdiction_size': 'second_largest', 'alternate_name': 'Hyderabad city'}}",
   "{'semantic_id': 'lake_oesa', 'category': 'natural_feature', 'attributes': {'name': 'Lake Oesa', 'elevation': 2267, 'elevation_unit': 'm', 'location': {'park': 'Yoho National Park', 'city': 'Field', 'province': 'British Columbia', 'country': 'Canada'}}, 'paragraph_idx': 1}",
   "{'semantic_id': 'intracellular_fluid', 'category': 'fluid', 'attributes': {'name': 'intracellular fluid', 'volume': '2/3 of body water', 'amount_in_72_kg_body': '25 litres', 'percentage_of_total_body_fluid': 62.5}, 'paragraph_idx': 17}",
   "{'semantic_id': 'strait', 'category': 'geographic_feature', 'attributes': {'name': 'strait', 'sovereign_territory': True, 'jurisdiction': {'airspace': True, 'seabed': True}}, 'paragraph_idx': 18}"]],
 'uris': None,
 'data': None}</code></pre>
</div>
</div>
</div>
</div>
<p>We’re interested in the top 3 results. Why? Why not?</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-106">
<div id="cell-106" class="cell" data-tags="[&quot;top_nodes_preview&quot;]" data-execution_count="90">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">uuid_strs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ids'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb8-2">top_uuids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [uuid.UUID(uuid_str, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> uuid_str <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> uuid_strs]</span></code></pre></div>
</div>
</div>
<p>We get the top UUIDs to then use in conjuction with our <code>UUID: graph index</code> mapping we constructed during the creation of the knowledge graph.</p>
<p>Lets take a gander into the connecting nodes from our top 3 results. Our network graph is <strong>directed</strong>, meaning that the direction is important(and creates a much easier semantic designation for the edge). A predecessor node is a node from which the linkage stems, and a successor node is the node towards which the linkage is directed. Taking their union, we have an exhaustive list of connecting nodes to the ones we retrieved from our vector store.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-108">
<div id="cell-108" class="cell" data-tags="[&quot;suc_pred_nodes&quot;]" data-execution_count="91">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> top_uuid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top_uuids:</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(digraph.successor_indices(node_indices[top_uuid])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(digraph.predecessor_indices(node_indices[top_uuid])):</span>
<span id="cb9-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(digraph[idx])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'semantic_id': 'coastal_state', 'category': 'legal_entity', 'attributes': {'name': 'coastal state'}}
{'semantic_id': 'baseline', 'category': 'geographic_feature', 'attributes': {'name': 'baseline', 'definition': 'usually the mean low-water mark of a coastal state'}}
{'semantic_id': 'baseline', 'category': 'geographic_feature', 'attributes': {'name': 'baseline', 'definition': 'usually the mean low-water mark of a coastal state'}}
{'semantic_id': 'coastal_state', 'category': 'legal_entity', 'attributes': {'name': 'coastal state'}}
{'semantic_id': 'hmda_area', 'category': 'administrative_district', 'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area', 'jurisdiction_size': 'largest', 'type': 'urban_planning_agency', 'apolitical': True, 'covers': ['ghmc_area', 'suburbs_of_ghmc_area']}, 'paragraph_idx': 6}</code></pre>
</div>
</div>
</div>
<section id="transforming-the-evidence" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="transforming-the-evidence"><span class="header-section-number">4.1</span> Transforming the Evidence</h2>
<p>Now that we have the nodes, we need to grab their edges, and then transform both into a format that will be easily digestible for the LLM. We will still feed the nodes and edges as JSON strings, but we’ll need to augment it to replace UUIDs with something less complex like a monotonically increasing integer. This way, the LLM can use integers like <code>0</code> and <code>1</code> instead of <code>5f092031-cf0d-408c-a4f1-896e7c8607be</code> and <code>bc1c5af9-c311-4e9f-975d-349d33d41a15</code> when interpreting the <code>from_node</code> and <code>to_node</code> fields of the edges.</p>
<div style="max-height: 530px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-109">
<div id="cell-109" class="cell" data-tags="[&quot;evidence_processing&quot;]" data-execution_count="92">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb11-2"></span>
<span id="cb11-3">node_hist_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx: obj mapping</span></span>
<span id="cb11-4">edge_hist_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (from_idx, to_idx): obj mapping</span></span>
<span id="cb11-5">uuid_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># used for dup checking</span></span>
<span id="cb11-6">id_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># used for creating new easily-parseable ids</span></span>
<span id="cb11-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> top_uuid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top_uuids:</span>
<span id="cb11-8">    top_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_indices[top_uuid]</span>
<span id="cb11-9">    uuid_list.append(top_uuid)</span>
<span id="cb11-10">    successor_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>, successor) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> successor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> digraph.successor_indices(top_idx)]</span>
<span id="cb11-11">    predecessor_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>, predecessor) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> predecessor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> digraph.predecessor_indices(top_idx)]</span>
<span id="cb11-12">    neighbor_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> successor_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> predecessor_idxs</span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> top_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> node_hist_dict: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the top node if it's not already in the node_hist_dict</span></span>
<span id="cb11-14">        main_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy(digraph[top_idx])</span>
<span id="cb11-15">        main_node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'connecting_id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id_counter</span>
<span id="cb11-16">        node_hist_dict[top_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> main_node</span>
<span id="cb11-17">        id_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-19">        main_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_hist_dict[top_idx]</span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(neighbor_idxs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> connection_type, idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> neighbor_idxs: </span>
<span id="cb11-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> node_hist_dict:</span>
<span id="cb11-23">                secondary_connecting_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_hist_dict[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'connecting_id'</span>]</span>
<span id="cb11-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-25">                secondary_connecting_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id_counter</span>
<span id="cb11-26">                node_hist_dict[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy(digraph[idx])</span>
<span id="cb11-27">                node_hist_dict[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'connecting_id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secondary_connecting_id</span>
<span id="cb11-28">                id_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the connections are already in the edge_hist_dict, skip</span></span>
<span id="cb11-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((connection_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (top_idx, idx) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edge_hist_dict) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> </span>
<span id="cb11-31">                (connection_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (idx, top_idx) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edge_hist_dict)):</span>
<span id="cb11-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb11-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> connection_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>:</span>
<span id="cb11-34">                edge_hist_dict[(top_idx, idx)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy(digraph.get_edge_data(top_idx, idx))</span>
<span id="cb11-35">                edge_hist_dict[(top_idx, idx)][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> main_node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'connecting_id'</span>]</span>
<span id="cb11-36">                edge_hist_dict[(top_idx, idx)][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secondary_connecting_id</span>
<span id="cb11-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> connection_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>:</span>
<span id="cb11-38">                edge_hist_dict[(idx, top_idx)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy(digraph.get_edge_data(idx, top_idx))</span>
<span id="cb11-39">                edge_hist_dict[(idx, top_idx)][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secondary_connecting_id</span>
<span id="cb11-40">                edge_hist_dict[(idx, top_idx)][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> main_node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'connecting_id'</span>]</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
For the astute reader, you may have noticed that we could’ve just used the integer values that are the indices of the nodes in the network graph. Intuitively, it makes more sense to me to use smaller integers by creating a new counter for each presentation of evidence. In practice, this may not be the case.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>Lets take a look at what the evidence will look like:</p>
<div style="max-height: 530px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-112">
<div id="cell-112" class="cell" data-tags="[&quot;edges_nodes_hist&quot;]" data-execution_count="94">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">pprint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>({<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>node_hist_dict, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>edge_hist_dict}.values()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'attributes': {'definition': 'a belt of coastal waters extending at most 12 '
                               'nautical miles (22.2 km; 13.8 mi) from the '
                               'baseline (usually the mean low-water mark) of '
                               'a coastal state',
                 'name': 'territorial waters',
                 'source': '1982 United Nations Convention on the Law of the '
                           'Sea'},
  'category': 'geographic_area',
  'connecting_id': 0,
  'paragraph_idx': 18,
  'semantic_id': 'territorial_waters'},
 {'attributes': {'name': 'coastal state'},
  'category': 'legal_entity',
  'connecting_id': 1,
  'semantic_id': 'coastal_state'},
 {'attributes': {'definition': 'usually the mean low-water mark of a coastal '
                               'state',
                 'name': 'baseline'},
  'category': 'geographic_feature',
  'connecting_id': 2,
  'semantic_id': 'baseline'},
 {'attributes': {'definition': 'a belt of coastal waters extending at most 12 '
                               'nautical miles (22.2 km; 13.8 mi) from the '
                               'baseline (usually the mean low-water mark) of '
                               'a coastal state',
                 'foreign_ship_passage': 'innocent passage through it or '
                                         'transit passage for straits',
                 'jurisdiction': 'extends to airspace over and seabed below',
                 'name': 'territorial sea',
                 'sovereign_territory': True},
  'category': 'geographic_area',
  'connecting_id': 3,
  'paragraph_idx': 18,
  'semantic_id': 'territorial_sea'},
 {'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage '
                         'Board',
                 'type': 'water_management'},
  'category': 'administrative_body',
  'connecting_id': 4,
  'semantic_id': 'hmwssb'},
 {'attributes': {'apolitical': True,
                 'covers': ['ghmc_area', 'suburbs_of_ghmc_area'],
                 'jurisdiction_size': 'largest',
                 'name': 'Hyderabad Metropolitan Development Authority (HMDA) '
                         'area',
                 'type': 'urban_planning_agency'},
  'category': 'administrative_district',
  'connecting_id': 5,
  'paragraph_idx': 6,
  'semantic_id': 'hmda_area'},
 {'category': 'belongs_to', 'from_node': 0, 'to_node': 1},
 {'category': 'extends_from', 'from_node': 0, 'to_node': 2},
 {'category': 'extends_from', 'from_node': 3, 'to_node': 2},
 {'category': 'belongs_to', 'from_node': 3, 'to_node': 1},
 {'category': 'manages', 'from_node': 5, 'to_node': 4}]</code></pre>
</div>
</div>
</div>
</div>
<p>You can now see the nodes have <code>connecting_ids</code> 0-4 which are then used in the <code>from_node</code> and <code>to_node</code> fields of the edges.</p>
</section>
</section>
<section id="putting-it-all-together" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Putting It All Together</h1>
<p>We’ve got the evidence, now we need to finalize our pipeline check the response from the LLM.</p>
<p>First, lets combine our <code>System</code> and <code>Human</code> templates.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-114">
<div id="cell-114" class="cell" data-tags="[&quot;combined_template&quot;]" data-execution_count="54">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">combined_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> system_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> human_template</span>
<span id="cb14-2">combined_template</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>ChatPromptTemplate(input_variables=['evidence', 'question'], messages=[SystemMessage(content='You are the best taker of tests, particularly excelling at answering questions based on information provided to you. You will be given nodes and edges from a knowledge graph in a JSON format and you are expected to answer a question based on them. The \'from_node\' and \'to_node\' fields in the edges correspond to the \'connecting_id\' fields in the nodes. Your output will only be JSON, and nothing more. No yapping.\nThis JSON Schema is the format you will be using: {"properties": {"answerable": {"description": "true or false value. Whether or not the answer is answerable based on the provided nodes and edges", "title": "Answerable", "type": "boolean"}, "answer": {"description": "The answer to the question. Terse and concise.", "title": "Answer", "type": "string"}, "support_idxs": {"description": "The indices of the nodes that support the answer. From \'paragraph_idx\' field", "items": {"type": "integer"}, "title": "Support Idxs", "type": "array"}}, "required": ["answerable", "answer", "support_idxs"], "title": "Answer", "type": "object"}'), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['evidence', 'question'], template='Question: {question}\n\n Supporting Evidence:\n {evidence}'))])</code></pre>
</div>
</div>
</div>
<p>Next, we need to wrap our Pydantic class <code>Answer</code> in a <code>PydanticOutputParser</code>, which takes the output from the LLM model and parses the string as a JSON, erroring out if the structure does not match our schema. We then wrap that parser in an <code>OutputFixingParser</code>, which will attempt to fix any errors that may occur during the parsing process by passing the error and output back to the LLM for remediation.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-91">
<div id="cell-91" class="cell" data-tags="[&quot;parse_pydantic&quot;]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PydanticOutputParser, OutputFixingParser</span>
<span id="cb16-2"></span>
<span id="cb16-3">_output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PydanticOutputParser(pydantic_object<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Answer)</span>
<span id="cb16-4">output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OutputFixingParser.from_llm(parser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_output_parser, llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chat_model, max_retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
</div>
<section id="moment-of-truth" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="moment-of-truth"><span class="header-section-number">5.1</span> Moment of truth</h2>
<p>We can now instantiate the pipeline, pass in the question and evidence, then run it.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-115">
<div id="cell-115" class="cell" data-tags="[&quot;ans_pipe&quot;]" data-execution_count="95">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">answer_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> chat_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser</span>
<span id="cb17-2"></span>
<span id="cb17-3">evidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>({<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>node_hist_dict, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>edge_hist_dict}.values()))</span>
<span id="cb17-4">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>]</span>
<span id="cb17-5">ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> answer_pipe.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: question, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'evidence'</span>: evidence})</span></code></pre></div>
</div>
</div>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-116">
<div id="cell-116" class="cell" data-tags="[&quot;wrong_ans&quot;]" data-execution_count="96">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">question, ans, lines[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>('What is the body of water by the city where Zvezda stadium is located?',
 Answer(answerable=True, answer='The Hussain Sagar lake', support_idxs=[5, 6]),
 'Kama River')</code></pre>
</div>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/cman_c.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="It’s okay to feel all sorts of things when you don’t get your expected result."><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/images/cman_c.jpg" class="img-fluid figure-img" alt="It’s okay to feel all sorts of things when you don’t get your expected result."></a></p>
<figcaption>It’s okay to feel all sorts of things when you don’t get your expected result.</figcaption>
</figure>
</div>
<ol type="1">
<li>What</li>
</ol>
<p>The supporting evidence makes no mention of <code>The Hussain Sagar lake</code>, however I <strong>did</strong> look it up, and found that it is located in Hyderabad, which <strong>is</strong> in our evidence. Here, we see the model looking into its own trained knowledgebase and ignoring the evidence.</p>
</section>
<section id="copingdeal-with-it" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="copingdeal-with-it"><span class="header-section-number">5.2</span> Coping(Deal with it)</h2>
<p>I’m not going to lie to you; I was not expecting the correct answer on the first trial run. Once we have an end-to-end pipeline established, it needs to be tuned to the task at hand. In order to tune a model, the best practice is to understand where its deficiencies lie.</p>
<p>According to the dataset, the supporting evidence comes from paragraphs 10 and 11, neither of which made it to our evidence.</p>
<p><strong>10</strong>:</p>
<pre><code>   Perm (;) is a city and the administrative centre of Perm Krai, Russia, located on
   the banks of the Kama River in the European part of Russia near the Ural Mountains.</code></pre>
<p><strong>11</strong>:</p>
<pre><code>   Star (Zvezda) Stadium (), until 1991 Lenin Komsomol Stadium (), is a multi-use stadium in
   Perm, Russia. It is currently used mostly for football matches and is the home ground of FC
   Amkar Perm. The stadium holds 17,000 people and was opened on June 5, 1969.</code></pre>
<p>Not only was the answer wrong, but the LLM believed that the question was <strong>answerable</strong> given the available evidence.</p>
<section id="is-a-more-potent-model-the-answer" class="level3" data-number="5.2.1">
<h3 data-number="5.2.1" class="anchored" data-anchor-id="is-a-more-potent-model-the-answer"><span class="header-section-number">5.2.1</span> Is a more potent model the answer?</h3>
<p>Given that the evidence does not contribute to the correct answer, we can say that our model is hallucinating due to it marking it as <em>answerable</em> and giving us the wrong answer. Weak models tend to hallucinate often. Could this be the case here? Lets use a more powerful model to test out our hypothesis.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-121">
<div id="cell-121" class="cell" data-tags="[&quot;adv_model&quot;]" data-execution_count="98">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">chat_model_adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatAnthropic(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>)</span>
<span id="cb22-2">answer_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> chat_model_adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser</span>
<span id="cb22-3"></span>
<span id="cb22-4">evidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>({<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>node_hist_dict, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>edge_hist_dict}.values()))</span>
<span id="cb22-5">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>]</span>
<span id="cb22-6">ans_adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> answer_pipe.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: question, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'evidence'</span>: evidence})</span></code></pre></div>
</div>
</div>
<p>This is a more sensible answer, using the evidence correctly; no good evidence, not answerable. As things should be.</p>
<p>It will be useful to outline the problems and their corresponding potential solutions to explore.</p>
<p><strong>Problem 1</strong>: The LLM believes the question is answerable, when it is not and the model hallucinates information.</p>
<p><strong>Solution 1a</strong>: Use a more powerful model. This isn’t a hard ask, given the exponential improvement and falling costs.</p>
<p><strong>Solution 1b</strong>: Add a chain-of-thought step. e.g.&nbsp;add a field to the output template that produces the reasoning behind the answer. This may be an acceptable solution when combined with a weak model.</p>
</section>
<section id="graph-woes" class="level3" data-number="5.2.2">
<h3 data-number="5.2.2" class="anchored" data-anchor-id="graph-woes"><span class="header-section-number">5.2.2</span> Graph Woes</h3>
<p>The evidence returned by our pipeline is inadequate. We can look through the knowledge graph carefully and see that the nodes and edges present in the knowledge graphs contain information that <strong>IS capable</strong> of answering the question.</p>
<p>The following nodes are present within the knowledge graph:</p>
<pre><code>{'semantic_id': 'star_stadium',
                'category': 'stadium',
                'attributes': {'name': 'Star (Zvezda) Stadium',
                 'former_name': 'Lenin Komsomol Stadium',
                 'location': {'city': 'Perm', 'country': 'Russia'},
                 'usage': 'football matches',
                 'home_team': 'FC Amkar Perm',
                 'capacity': 17000,
                 'opened': '1969-06-05'}}})</code></pre>
<pre><code>{'semantic_id': 'perm',
                'category': 'city',
                'attributes': {'name': 'Perm',
                 'location': {'river': 'Kama River',
                  'region': 'Perm Krai',
                  'country': 'Russia',
                  'geography': 'European part of Russia near the Ural Mountains'},
                 'administrative_status': 'administrative centre'}}})</code></pre>
<p>As is the connection between them:</p>
<pre><code>{'from_node': UUID('08f207c1-6915-4237-ac4e-902815d9cfae'),
                'to_node': UUID('5be79bf7-cd2a-487f-8833-36ae11257df8'),
                'category': 'located_in'}})</code></pre>
<p>We’ve found a limitation of the semantic search. The semantics/vibes of the question matched the incorrect evidence. We can’t say exactly why, but it could simply be the amount of water-adjaced terminology found in the question and the answer. Or it could be something else entirely. This sort of latent space analysis is tough, and sometimes impossible to do well.</p>
<p><strong>Problem 2</strong>: Searching our vector store for the correct nodes is inadequate. We need more than merely capture the gist of the passage based on the encoding.</p>
<p><strong>Solution 2a</strong>: Use a <a href="https://arxiv.org/abs/2212.10496">HyDE approach</a> where we can use an LLM to generate hypothetical questions to accompany the node information dump, so that the vector search is more likely to match the embedding of the question to the node.</p>
<p><strong>Solution 2b</strong>: Hybrid search. By combining a sparse search(word-matching) and a dense search(embedding-based), we can capture the exact terminology of the question better. “Svezda stadium” would be a more likely match in that case. Also, because ‘svezda’ is a Russian word for ‘star’, the dense/semantic search would be more likely to capture the node if someone asks about “Star Stadium”, even though ‘Svezda’ isn’t part of the question.</p>
</section>
</section>
</section>
<section id="steps-moving-forward" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Steps Moving Forward</h1>
<p>Closing up, lets speak about the road ahead:</p>
<ol type="1">
<li><strong>Composability</strong>: We have our rough outline of steps, which I reluctantly call a pipeline, that are necessary to go from paragraphs and a question to an evidenced answer. Moving forward, this should be a simple workflow which we can use to loop over any number of given items.</li>
<li><strong>Error handling</strong>: Some more error handling would be nice. Some of the code that generates the knowledge graph needs to be reworked in order to error out and retry generating the nodes and edges of a particular text chunk when it hallucinates connections. I’ve seen it make up <code>semantic_ids</code> when creating edges, which reduces the quality of our graph because now we can’t use those edges, and they’ve likely taken the place of useful ones. This would function similarly to the <code>OutputFixingParser</code> we used to wrap our <code>PydanticOutputParser</code> and allow it to self-correct.</li>
<li><strong>Graph Connection Generation:</strong> After our knowledge graph is generated, we can allow a few random(or not so random) passes of the LLM as discussed in <a href="../knowledge-graph-rag-benchmark-1/#letting-the-llm-loose">part one</a> to potentially create connections between disparate nodes. This step is probably not necessary given the relatively small size of the paragraphs, but it would be immensely useful for entity resolution and graph refinement for a larger corpus of text.</li>
<li><strong>Chunk augmentation and prompt size expansion:</strong> It may be a good idea to also tune the chunk size we’re using to speed things up and increase performance as well as keep a larger track of nodes in our passed in history. I’m hesitant to do this because I want this approach to be as versatile as possible, and easily transferable to rely solely on local machines.</li>
<li><strong>(Teaser) DSPy Prompt Tuning</strong>: As a further goal, being able to optimize the prompts we’re using would be a great benefit, and remove the arduous task of manually trying to condition an clever prompt. A further benefit of this is that modularizing the workflow this way allows also for being able to generate examples and tune smaller models which are comparably capable. <em>This requires more effort and time, and something I’d like to get to eventually.</em></li>
</ol>


</section>

 ]]></description>
  <category>knowledge-graphs</category>
  <category>rag</category>
  <category>benchmarking</category>
  <category>vector-databases</category>
  <guid>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/</guid>
  <pubDate>Thu, 16 May 2024 07:00:00 GMT</pubDate>
  <media:content url="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/images/question-answering-flow.png" medium="image" type="image/png" height="152" width="144"/>
</item>
<item>
  <title>Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three</title>
  <dc:creator>Dmitriy Leybel</dc:creator>
  <link>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/</link>
  <description><![CDATA[ 





<p><strong>On the last episode of</strong>: <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html">Don’t RAG on Knowledge Graphs(Or Do): Finally Building a Knowledge Graph – <em>Part Two</em></a>:</p>
<ul>
<li><p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#lets-split-some-text">Text splitting</a> is necessary to cut down the paragraphs into manageable chunks of text.</p></li>
<li><p>Langchain makes <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#prompting">prompt composition</a> easy, especially when managing nested and layered prompts with placeholders.</p></li>
<li><p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html##instructions-pydantic-and-json-schema-magic">Pydantic</a> helps us create the format we desire for structured output from the LLM.</p></li>
<li><p>A <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#knowledge-graph-generation-with-history">history handler</a> allows us to keep track of generated nodes and edges to feed to new calls to the LLM.</p></li>
</ul>
<hr>
<section id="review" class="level1 page-columns page-full" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Review</h1>
<p>First, a quick review of the workflow between knowledge graphs and vector databases <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#retrieval-strategy-1-focused-on-embeddings-search-followed-by-knowledge-graph-adjacency">mentioned eons ago</a>. This is more or less the implementation we’ll strive towards, and will motivate this post. We’ve already constructed the knowledge graph, so now we have a vector database to build and link to it.</p>
<div id="fig-adjacency-strategy" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-adjacency-strategy-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="../../..\technical_blog/knowledge-graph-rag-benchmark-0\images\adjacency strategy.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-1" title="Figure&nbsp;1: Strategy of retrieval through first finding a close embedding, and then utilizing the adjacency of nodes in the knowledge graph to hydrate the prompt"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark-0/images/adjacency strategy.png" class="img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-adjacency-strategy-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Strategy of retrieval through first finding a close embedding, and then utilizing the adjacency of nodes in the knowledge graph to hydrate the prompt
</figcaption>
</figure>
</div>
</section>
<section id="vector-database-simple-as" class="level1 page-columns page-full" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Vector Database, Simple as</h1>
<p>There are many vector database providers out there. New startups are blooming like a warm spring morning. Lets keep things simple. All we need is:</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-61">
<div id="cell-61" class="cell" data-tags="[&quot;import_chroma&quot;]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chromadb</span></code></pre></div>
</div>
</div>
<p>Well, we also need to pip install it and grab some build tools in case your system complains(I’m using <code>build-essential</code> for Linux). <a href="https://www.trychroma.com">Chroma</a> is fully-featured and lightweight vector database that can be deployed in numerous ways and fortunately offers us a quick and easy setup at the blink of an eye.</p>
<section id="embeddings" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="embeddings"><span class="header-section-number">2.1</span> Embeddings</h2>
<p>An embedding, in our current context, is a vector representation of some text. Texts that are semantically similar will have a similar embedding vector. “Fido jumped into the river” is similar to “The lake looks peaceful.” due to the semantic similarity of lake and river; both are bodies of water . More on that later.</p>
<p>Chroma integrates a few embedding models, from which we’ll choose the default, which is based on <a href="https://www.sbert.net">Sentence Transformers</a>(<code>all-MiniLM-L6-v2</code>).</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-62">
<div id="cell-62" class="cell" data-tags="[&quot;embedding_model_load&quot;]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> chromadb.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> embedding_functions</span>
<span id="cb2-2"></span>
<span id="cb2-3">ef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding_functions.DefaultEmbeddingFunction()</span></code></pre></div>
</div>
</div>
<p>Now that we’ve instantiated the embedding function, lets give it a whirl.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
If you’re running the embedding function for the first time, it’ll download the small model for you(only about 80MB)
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-63">
<div id="cell-63" class="cell" data-tags="[&quot;embed_test&quot;]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ef(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sup'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[[-0.08815008401870728,
  0.0389120951294899,
  -0.06267453730106354,
  0.025976944714784622,
  0.021272214129567146,
  0.036165427416563034,
  0.06472509354352951,
  0.03273024782538414,
  -0.022812241688370705,
  0.03426264598965645,
  -0.011476818472146988,
  -0.0558527335524559,
  0.0752527117729187,
  0.02892010472714901,
  -0.012184866704046726,
  -0.06143530085682869,
  0.057932790368795395,
  -0.02354748174548149,
  -0.037457771599292755,
  0.007783312350511551,
  -0.043894387781620026,
  -0.0005846268613822758,
  -0.05005178228020668,
  0.05256332457065582,
  0.041017238050699234,
  0.027247676625847816,
  -0.007769174408167601,
  0.006663127336651087,
  -0.0582849495112896,
  -0.058276500552892685,
  -0.008283257484436035,
  0.011540266685187817,
  0.09883619099855423,
  0.014246460050344467,
  0.021976888179779053,
  -0.042441871017217636,
  0.01698663830757141,
  0.05459064990282059,
  0.027719488367438316,
  0.040375471115112305,
  -0.07192573696374893,
  -0.0697317123413086,
  -0.007513706106692553,
  0.040573637932538986,
  0.031709592789411545,
  0.020085664466023445,
  -0.024455910548567772,
  0.021748993545770645,
  0.021665506064891815,
  -0.0782397910952568,
  0.012301645241677761,
  -0.07262903451919556,
  0.0020467431750148535,
  -0.007664070930331945,
  -0.0009409540216438472,
  0.02634112909436226,
  -0.017131712287664413,
  -0.04711078107357025,
  -0.03610646724700928,
  -0.08455827087163925,
  0.018454650416970253,
  -0.09647984802722931,
  -0.06264247000217438,
  0.04708629846572876,
  0.010321928188204765,
  0.10852538794279099,
  -0.017284022644162178,
  0.02371356077492237,
  0.004756816662847996,
  0.05711206793785095,
  -0.0002290358825121075,
  0.041850537061691284,
  -0.08036033064126968,
  0.05354780703783035,
  -0.011950146406888962,
  0.03304034471511841,
  0.04630657285451889,
  -0.01785254292190075,
  0.11931655555963516,
  -0.008362460881471634,
  0.004671791102737188,
  -0.005780027247965336,
  -0.06775062531232834,
  0.009449469856917858,
  0.023738745599985123,
  0.011783314868807793,
  -0.06681878864765167,
  -0.027939554303884506,
  0.006354610435664654,
  0.05730771645903587,
  -0.0838579311966896,
  -0.08851093053817749,
  0.08038954436779022,
  -0.02845342643558979,
  -0.047472529113292694,
  -0.07104448974132538,
  -0.002936464035883546,
  0.015265177004039288,
  -0.08989954739809036,
  0.2169521003961563,
  0.03967348858714104,
  0.05828956514596939,
  0.04222771152853966,
  0.0014037664514034986,
  -0.008869979530572891,
  -0.004865588154643774,
  -0.07116992026567459,
  -0.006799907423555851,
  -0.021581022068858147,
  -0.009085524827241898,
  -0.04695131257176399,
  -0.03597227856516838,
  0.04183044284582138,
  -0.025456368923187256,
  0.044091127812862396,
  0.017077835276722908,
  0.008213749155402184,
  0.011404010467231274,
  0.018198302015662193,
  -0.027580946683883667,
  0.03153375908732414,
  0.023579945787787437,
  -0.048822250217199326,
  0.02161264233291149,
  -0.017332669347524643,
  -0.08839226514101028,
  0.016617678105831146,
  -4.6542501285938574e-33,
  -0.05196730047464371,
  -0.021989643573760986,
  -0.029618987813591957,
  0.04105169698596001,
  -0.001578746596351266,
  0.009363578632473946,
  9.751021570991725e-05,
  0.01197210792452097,
  -0.034649863839149475,
  0.08685518056154251,
  -0.12436547130346298,
  -0.003243502229452133,
  -0.002412007190287113,
  0.005630753934383392,
  0.03797269985079765,
  0.06566265970468521,
  0.055325284600257874,
  -0.0033867782913148403,
  0.011790132150053978,
  0.01466473750770092,
  -0.044716041535139084,
  0.04668736830353737,
  -0.014505395665764809,
  0.01251885388046503,
  0.012130805291235447,
  -0.0644056648015976,
  0.06459583342075348,
  -0.04979125037789345,
  -0.013997192494571209,
  0.021896356716752052,
  0.01764928363263607,
  0.05214817821979523,
  -0.010583145543932915,
  -0.003208221634849906,
  -0.009506486356258392,
  0.010158931836485863,
  0.07064365595579147,
  -0.03242914006114006,
  0.00295675708912313,
  0.013653669506311417,
  0.04893507435917854,
  -0.005207119043916464,
  -0.037282273173332214,
  0.020390242338180542,
  0.02464980259537697,
  0.13883742690086365,
  -0.01673075370490551,
  0.042279619723558426,
  0.022591179236769676,
  0.044542353600263596,
  -0.01938001625239849,
  -0.017139442265033722,
  -0.0965004563331604,
  0.07410972565412521,
  -0.016040310263633728,
  0.027394499629735947,
  0.037999849766492844,
  -0.12169472128152847,
  -0.020582005381584167,
  0.00526941055431962,
  -0.024848125874996185,
  0.027975235134363174,
  0.0037561592180281878,
  -0.047139592468738556,
  -0.018269620835781097,
  -0.01704198122024536,
  -0.0066906544379889965,
  0.009610410779714584,
  0.018008427694439888,
  -0.029211603105068207,
  -0.09012635052204132,
  0.04693446308374405,
  0.1192922294139862,
  -0.010401724837720394,
  -0.02767297811806202,
  -0.026894785463809967,
  0.0003243408282287419,
  0.0372999832034111,
  0.10321266204118729,
  0.06125738471746445,
  -0.030062777921557426,
  -0.024563796818256378,
  -0.04380808770656586,
  -0.017787475138902664,
  0.06220285966992378,
  -0.06743179261684418,
  -0.021958552300930023,
  -0.08504771441221237,
  0.02000092715024948,
  -0.07109654694795609,
  -0.07193907350301743,
  0.007110072765499353,
  0.022553864866495132,
  0.07761543989181519,
  -0.0371822714805603,
  3.57144056859803e-33,
  -0.12020888924598694,
  0.013511578552424908,
  -0.0289490707218647,
  0.11010584235191345,
  0.01200167741626501,
  0.028086191043257713,
  0.011599362827837467,
  0.07943497598171234,
  -0.0704106017947197,
  0.0671350285410881,
  0.0107227498665452,
  0.018502017483115196,
  5.1427494327072054e-05,
  0.008013452403247356,
  -0.07282835990190506,
  0.023772109299898148,
  0.037625912576913834,
  -0.04462224245071411,
  -0.01509601715952158,
  -0.042705561965703964,
  -0.07307127118110657,
  0.040167830884456635,
  0.030199574306607246,
  0.06414608657360077,
  -0.040885623544454575,
  0.03525718301534653,
  -0.0314037948846817,
  0.058473147451877594,
  -0.016143586486577988,
  0.06214723363518715,
  0.0829816684126854,
  -0.05530810356140137,
  -0.06572870165109634,
  -0.010672389529645443,
  -0.013648229651153088,
  0.09427978098392487,
  0.02804470807313919,
  0.05287085473537445,
  -0.03369517996907234,
  -0.03602980077266693,
  0.06818007677793503,
  0.034106336534023285,
  0.019399693235754967,
  0.13262902200222015,
  0.008388478308916092,
  -0.012109436094760895,
  -0.039171162992715836,
  0.04033154994249344,
  0.07947935163974762,
  -0.041443053632974625,
  -0.08641794323921204,
  -0.030400192365050316,
  -0.1173543781042099,
  0.01031400915235281,
  -0.0023436383344233036,
  0.01253805123269558,
  -0.011449051089584827,
  0.014291658997535706,
  -0.06617258489131927,
  -0.062245313078165054,
  0.016467729583382607,
  -0.021559713408350945,
  -0.12505009770393372,
  0.026197155937552452,
  0.03813409060239792,
  0.02372247911989689,
  -0.05612555146217346,
  -0.06524056941270828,
  0.06582044064998627,
  -0.03490298241376877,
  0.1096431165933609,
  -0.03801364451646805,
  -0.10172274708747864,
  0.02089136838912964,
  -0.030176719650626183,
  -0.042703595012426376,
  -0.09114976972341537,
  0.04517712444067001,
  0.023939063772559166,
  -0.09658173471689224,
  -0.04929523169994354,
  -0.03724968805909157,
  0.008202498778700829,
  -0.022094616666436195,
  -0.018428556621074677,
  -0.005160237662494183,
  0.048229608684778214,
  0.027110382914543152,
  0.007152666803449392,
  0.005330891814082861,
  -0.0068723480217158794,
  0.0018026132602244616,
  0.08163446187973022,
  -0.024795232340693474,
  0.010881287977099419,
  -1.4566762018830559e-08,
  -0.004322580993175507,
  0.04305461049079895,
  -0.010600777342915535,
  0.0520879402756691,
  0.01802789233624935,
  0.06296617537736893,
  -0.08677810430526733,
  0.05512265861034393,
  0.08509743213653564,
  -0.020693860948085785,
  0.025800291448831558,
  0.019232159480452538,
  0.03931315243244171,
  0.003466429654508829,
  0.09492921084165573,
  -0.11571865528821945,
  -0.027029260993003845,
  0.10171782970428467,
  -0.03151828050613403,
  -0.020022252574563026,
  0.047960057854652405,
  0.025010110810399055,
  -0.015095007605850697,
  -0.03136930614709854,
  -0.003722142893821001,
  0.023892076686024666,
  -0.07897274196147919,
  0.04714563861489296,
  0.059783853590488434,
  0.029727943241596222,
  0.030625857412815094,
  -0.03413188084959984,
  -0.044605743139982224,
  0.024206150323152542,
  -0.0047183409333229065,
  -0.09526648372411728,
  -0.0770496353507042,
  -0.023633528500795364,
  0.09743858128786087,
  0.023828059434890747,
  -0.06587085127830505,
  -0.01218477264046669,
  0.03613143786787987,
  0.025722352787852287,
  -0.0845530703663826,
  0.004904137924313545,
  0.02101745456457138,
  0.0778331533074379,
  0.008732018992304802,
  -0.02525472640991211,
  -0.019046053290367126,
  -0.062338367104530334,
  0.011163970455527306,
  0.051886264234781265,
  0.14340852200984955,
  -0.031872380524873734,
  0.08313193172216415,
  0.008561764843761921,
  -0.0066390009596943855,
  0.05894242599606514,
  0.17481203377246857,
  0.024079544469714165,
  0.06344451010227203,
  0.02097688615322113],
 [-0.04983491450548172,
  0.047410059720277786,
  0.02075684443116188,
  0.0036884364672005177,
  0.029070785269141197,
  -0.06910350918769836,
  0.08781661838293076,
  0.033720798790454865,
  -0.016201989725232124,
  -0.04258463904261589,
  -0.05077064782381058,
  -0.053096938878297806,
  0.010030844248831272,
  0.012911750003695488,
  -0.012379195541143417,
  0.019358906894922256,
  -0.043964337557554245,
  0.0069747064262628555,
  -0.12316861003637314,
  -0.03856316953897476,
  -0.059056028723716736,
  0.06396914273500443,
  -0.020070277154445648,
  0.006908354815095663,
  -0.006557208485901356,
  -0.0001876982132671401,
  0.02345268242061138,
  0.05240260809659958,
  0.0265529602766037,
  -0.07057984918355942,
  0.018865060061216354,
  0.020978499203920364,
  0.041112422943115234,
  -0.028897671028971672,
  0.017154252156615257,
  -0.07860083878040314,
  -0.002234338317066431,
  -0.09510375559329987,
  0.03294316679239273,
  -0.009585811756551266,
  0.0640038251876831,
  -0.054985951632261276,
  0.06381730735301971,
  0.08698870241641998,
  0.10791453719139099,
  -0.018108127638697624,
  -0.00902014970779419,
  -0.03244858980178833,
  -0.02320343442261219,
  0.005078401416540146,
  0.04470254108309746,
  0.03359563276171684,
  0.04604236036539078,
  -0.054577603936195374,
  0.04181097820401192,
  0.04240523278713226,
  -0.04973261058330536,
  0.05762714892625809,
  0.03101509064435959,
  -0.055506374686956406,
  -0.024889405816793442,
  -0.009903420694172382,
  -0.10245583951473236,
  0.01849268190562725,
  0.09669843316078186,
  0.07571932673454285,
  -0.011814001947641373,
  0.008919758722186089,
  0.003123517381027341,
  -0.024138275533914566,
  0.015244080685079098,
  -0.024572260677814484,
  -0.07963927090167999,
  -0.04529915004968643,
  0.013277383521199226,
  0.0034561562351882458,
  0.06617144495248795,
  -0.03489890694618225,
  0.054232001304626465,
  0.049301907420158386,
  0.032285790890455246,
  -0.023837726563215256,
  -0.03968697786331177,
  -0.010161404497921467,
  -0.03578844293951988,
  -0.01881159096956253,
  0.022683821618556976,
  0.0351443849503994,
  -0.0010485335951671004,
  0.043829578906297684,
  0.0006098029552958906,
  -0.0550968274474144,
  0.034580301493406296,
  -0.020073121413588524,
  -0.08755818754434586,
  -0.03540779650211334,
  0.011154117062687874,
  -0.0520784854888916,
  -0.15004262328147888,
  0.2681502103805542,
  0.030406050384044647,
  0.026617038995027542,
  0.05415184050798416,
  0.018776625394821167,
  0.042038992047309875,
  0.01726127415895462,
  -0.03079761378467083,
  -0.002363220788538456,
  -0.012735975906252861,
  -0.024430427700281143,
  -0.024994466453790665,
  -0.012831549160182476,
  -0.10614868998527527,
  -0.0018657597247511148,
  -0.014149500988423824,
  0.03079080954194069,
  0.07474779337644577,
  -0.018895870074629784,
  0.029106391593813896,
  -0.08749617636203766,
  -0.05088314041495323,
  0.025541841983795166,
  -0.05021941289305687,
  0.0480412095785141,
  0.01865716092288494,
  -0.09822224825620651,
  0.05018414929509163,
  -1.4838867631284532e-33,
  0.03884870931506157,
  -0.025667142122983932,
  0.02762446179986,
  -0.04209671914577484,
  0.04037243872880936,
  0.06572036445140839,
  0.007036568131297827,
  -0.05030665919184685,
  -0.06949353963136673,
  -0.001430327189154923,
  0.0025782908778637648,
  0.01627175323665142,
  -0.019736241549253464,
  0.13940340280532837,
  0.11830995231866837,
  0.03684194013476372,
  0.09667646884918213,
  0.035070668905973434,
  0.0030133521649986506,
  -0.02321743220090866,
  0.019989095628261566,
  0.04470452293753624,
  0.0468166321516037,
  -0.023899244144558907,
  -0.021024813875555992,
  -0.02398647367954254,
  -0.026457354426383972,
  -0.05276739224791527,
  0.00587608153000474,
  0.03353196382522583,
  -0.007357672322541475,
  0.07106026262044907,
  -0.050913695245981216,
  -0.014338360168039799,
  -0.020886778831481934,
  -0.05181949585676193,
  0.031943611800670624,
  -0.04700925573706627,
  -0.02591674216091633,
  0.03265475481748581,
  -0.0022596963681280613,
  0.0024534505791962147,
  -0.06230804696679115,
  0.014108811505138874,
  0.044037144631147385,
  0.07213321328163147,
  0.06292419135570526,
  0.054413922131061554,
  -0.03602677211165428,
  -0.012107857502996922,
  0.0008751358254812658,
  0.01607143133878708,
  -0.10015927255153656,
  -0.01413557305932045,
  -0.05868290737271309,
  -0.02065744437277317,
  0.003992758225649595,
  -0.027841778472065926,
  0.029690319672226906,
  -0.014045015908777714,
  0.012597735971212387,
  0.08387438952922821,
  0.025408174842596054,
  -0.02001335471868515,
  -0.1182464063167572,
  -0.07764327526092529,
  0.023960299789905548,
  -0.015867924317717552,
  0.05507713183760643,
  -0.02569189853966236,
  -0.007574737071990967,
  0.026194175705313683,
  0.08373300731182098,
  0.005349453072994947,
  0.0318538062274456,
  -0.03233488276600838,
  0.017826825380325317,
  0.04583629220724106,
  -0.005807076580822468,
  -0.0661909282207489,
  0.00222235219553113,
  -0.014013771899044514,
  -0.027658652514219284,
  0.013542433269321918,
  0.04124703258275986,
  -0.0021795800421386957,
  -0.022596431896090508,
  -0.04924686625599861,
  -0.020406177267432213,
  -0.014784698374569416,
  -0.027839312329888344,
  0.035210106521844864,
  0.04620129242539406,
  0.03757832199335098,
  0.060697849839925766,
  3.0536386131386742e-34,
  0.08456361293792725,
  0.08147523552179337,
  -0.03336191549897194,
  0.05588332191109657,
  -0.02144193835556507,
  0.031138231977820396,
  0.02581152506172657,
  0.036460887640714645,
  0.016490254551172256,
  0.039796460419893265,
  0.021281400695443153,
  -0.09978808462619781,
  0.004475805442780256,
  -0.035769592970609665,
  0.04402599483728409,
  0.05466220900416374,
  0.10019738972187042,
  0.06424931436777115,
  -0.0407014936208725,
  0.03219299763441086,
  -0.0424066036939621,
  -0.017641497775912285,
  -0.04640892148017883,
  -0.06045156344771385,
  0.020258430391550064,
  0.033182986080646515,
  0.07075486332178116,
  0.040032193064689636,
  0.009616355411708355,
  0.008757013827562332,
  0.10673677921295166,
  -0.008585454896092415,
  -0.15125617384910583,
  0.004044604022055864,
  0.05798352137207985,
  0.09982240200042725,
  -0.054999690502882004,
  7.34408968128264e-05,
  0.10417070239782333,
  -0.08970246464014053,
  -0.0010847192024812102,
  0.0041154432110488415,
  0.03306804969906807,
  0.06667356193065643,
  0.001998799853026867,
  -0.07468786090612411,
  0.001044120523147285,
  -0.04047010466456413,
  -0.11857438087463379,
  0.03889648988842964,
  -0.06465069204568863,
  -0.04404180869460106,
  0.004789887927472591,
  -0.009365632198750973,
  -0.05295458436012268,
  0.04391732066869736,
  0.003941838163882494,
  0.010463234037160873,
  0.07796397805213928,
  0.0043679894879460335,
  -0.012168857268989086,
  0.0563892163336277,
  -0.032958246767520905,
  0.03640003502368927,
  -0.09901245683431625,
  0.013477855361998081,
  0.032833945006132126,
  0.008632335811853409,
  -0.015237522311508656,
  -0.045996278524398804,
  0.04744485393166542,
  -0.07848397642374039,
  -0.16673746705055237,
  -0.0009817220270633698,
  0.018159205093979836,
  0.0026159381959587336,
  -0.007587607018649578,
  0.001863642712123692,
  -0.0036697215400636196,
  -0.015728477388620377,
  -0.026224736124277115,
  -0.016035711392760277,
  0.03500324487686157,
  0.031706396490335464,
  -0.04410845413804054,
  -0.014305949211120605,
  0.06842508912086487,
  0.038970187306404114,
  -0.02548116073012352,
  -0.0811067596077919,
  -0.03804240748286247,
  0.0904158502817154,
  0.08024118095636368,
  -0.051469288766384125,
  0.006724147591739893,
  -1.4127249592377211e-08,
  -0.020074211061000824,
  -0.011974949389696121,
  0.02793658711016178,
  0.01786523126065731,
  0.03110302984714508,
  0.06413517892360687,
  -0.023988382890820503,
  -0.02752196229994297,
  -0.0033636605367064476,
  0.018158163875341415,
  0.12096750736236572,
  -0.008486862294375896,
  0.003321684431284666,
  -0.05455714836716652,
  0.044992756098508835,
  -0.0405462272465229,
  -0.03711879998445511,
  0.010892139747738838,
  0.010922703891992569,
  -0.10120225697755814,
  0.015770189464092255,
  0.049801792949438095,
  -0.09360873699188232,
  -0.08038635551929474,
  -0.043886736035346985,
  0.028670772910118103,
  0.007357894442975521,
  0.06992929428815842,
  0.03247477114200592,
  0.023066222667694092,
  -0.003743191948160529,
  0.03887111693620682,
  -0.013057591393589973,
  -0.023052601143717766,
  0.0647343099117279,
  -0.02109169401228428,
  -0.045990969985723495,
  -0.0717756599187851,
  0.016904039308428764,
  0.07475024461746216,
  -0.03764820471405983,
  0.007682626601308584,
  -0.041594963520765305,
  0.03814854100346565,
  -0.0941794365644455,
  0.011091839522123337,
  -0.05915017053484917,
  -0.031279437243938446,
  -0.033687345683574677,
  -0.030321571975946426,
  -0.009191246703267097,
  -0.032031286507844925,
  0.019655127078294754,
  0.09318964183330536,
  0.07215450704097748,
  -0.027178803458809853,
  -0.02098594605922699,
  -0.0187591090798378,
  0.02367139235138893,
  -0.021888094022870064,
  0.19160978496074677,
  0.0034248465672135353,
  -0.016104642301797867,
  -0.0016335448017343879],
 [-0.047706857323646545,
  0.029799047857522964,
  -0.029307443648576736,
  -0.028761692345142365,
  -0.049182552844285965,
  -0.04869556427001953,
  0.11003480106592178,
  0.029769031330943108,
  -0.006188513245433569,
  0.05534925311803818,
  0.0204521082341671,
  -0.05075625330209732,
  0.017509188503026962,
  0.008488249965012074,
  -0.04395948350429535,
  0.043411411345005035,
  -0.02037900686264038,
  -0.029790835455060005,
  0.044171810150146484,
  0.04676878824830055,
  -0.06464889645576477,
  0.07507970184087753,
  -0.011289148591458797,
  -0.004592073615640402,
  -0.015927044674754143,
  -0.003337560687214136,
  0.011098247952759266,
  0.10217370092868805,
  0.003518056822940707,
  -0.00919096078723669,
  0.017634805291891098,
  0.13972388207912445,
  0.05070934444665909,
  -0.02783096209168434,
  -0.0035908205900341272,
  -0.017583072185516357,
  -0.01819441467523575,
  -0.0054838648065924644,
  -0.022460605949163437,
  -0.04451676085591316,
  0.015791790559887886,
  -0.052957527339458466,
  0.005793462041765451,
  0.008374476805329323,
  0.03262092545628548,
  0.018899861723184586,
  -0.046665385365486145,
  -0.035868432372808456,
  -0.09819971024990082,
  -0.07561742514371872,
  -0.05793742090463638,
  0.055713143199682236,
  -0.00451300572603941,
  -0.05914030969142914,
  -0.04867144674062729,
  -0.0016276733949780464,
  -0.05643262341618538,
  -0.01853669248521328,
  -0.015230373479425907,
  -0.046567272394895554,
  -0.05330246686935425,
  0.011304951272904873,
  -0.11495313793420792,
  0.10305533558130264,
  0.05283502861857414,
  0.035230714827775955,
  0.016496378928422928,
  0.06500715762376785,
  0.005075459368526936,
  0.05328008159995079,
  -0.09429473429918289,
  0.009930397383868694,
  -0.06478379666805267,
  -0.04124986752867699,
  -0.05471572279930115,
  -0.0025090426206588745,
  0.03856153413653374,
  -0.02158009260892868,
  0.01686421036720276,
  0.030112208798527718,
  0.04350303113460541,
  0.0060177212581038475,
  -0.08983737975358963,
  0.023844074457883835,
  -0.0712917149066925,
  0.040687259286642075,
  0.02212377078831196,
  -0.03225473314523697,
  -0.09825507551431656,
  -0.012814310379326344,
  -0.05137163773179054,
  -0.0508715882897377,
  0.0356665775179863,
  0.06474190205335617,
  0.009078755974769592,
  -0.004626876208931208,
  -0.07715008407831192,
  -0.026909487321972847,
  -0.0634487047791481,
  0.24540770053863525,
  0.012282876297831535,
  -0.01706986129283905,
  -0.0012511075474321842,
  0.09647370129823685,
  -0.015949472784996033,
  0.007039134856313467,
  -0.014715258032083511,
  0.07577571272850037,
  0.03402278572320938,
  0.016772856935858727,
  0.0407135896384716,
  -0.008325525559484959,
  0.0016099949134513736,
  -0.012871264480054379,
  0.006253060884773731,
  -0.006250512786209583,
  -0.06602701544761658,
  0.013166422955691814,
  0.056004662066698074,
  -0.005936720408499241,
  0.02952989563345909,
  0.04650561138987541,
  0.05884496122598648,
  0.013950488530099392,
  -0.06323590874671936,
  -0.10772714763879776,
  0.09244363754987717,
  -3.246199648824735e-33,
  0.0029519363306462765,
  0.006624347530305386,
  -0.008346017450094223,
  0.009051835164427757,
  0.011032729409635067,
  0.07775413244962692,
  -0.030210910364985466,
  -0.011178763583302498,
  -0.046471260488033295,
  -0.015059034340083599,
  0.019916005432605743,
  -0.031136564910411835,
  -0.029937807470560074,
  0.026371324434876442,
  0.07905584573745728,
  -0.013263785280287266,
  0.05271025374531746,
  0.011820263229310513,
  0.023462682962417603,
  -0.041535381227731705,
  0.047901179641485214,
  0.011175201274454594,
  0.03211263194680214,
  0.04854049161076546,
  -0.05309046432375908,
  0.019062289968132973,
  -0.07798046618700027,
  -0.051897455006837845,
  -0.012413928285241127,
  0.03742313012480736,
  0.03230714052915573,
  0.026786386966705322,
  -0.027452530339360237,
  0.03520464897155762,
  -0.027697881683707237,
  -0.10518944263458252,
  0.04265424981713295,
  -0.10761565715074539,
  -0.050626687705516815,
  -0.017929106950759888,
  -0.022524379193782806,
  -0.039096981287002563,
  0.005315706599503756,
  0.05732399597764015,
  -0.04626333341002464,
  0.1416749656200409,
  -0.003580145537853241,
  0.037116218358278275,
  -0.006159882992506027,
  0.0014393212040886283,
  -0.05447343736886978,
  0.04099242761731148,
  -0.06244586408138275,
  0.05919301509857178,
  -0.030249932780861855,
  -0.033237360417842865,
  0.0049431296065449715,
  -0.07026117295026779,
  0.014024087227880955,
  0.051771726459264755,
  0.10352329909801483,
  0.024088077247142792,
  -0.03357868269085884,
  -0.004287239629775286,
  -0.01730150356888771,
  -0.07488695532083511,
  0.0003908060898538679,
  0.027570074424147606,
  -0.006252780091017485,
  -0.011089310981333256,
  0.0015536113642156124,
  -0.01308933924883604,
  0.1115591824054718,
  -0.05212273821234703,
  -0.0008197210845537484,
  0.025414563715457916,
  -0.0542709156870842,
  0.06618258357048035,
  0.03905229642987251,
  -0.004908710718154907,
  -0.013656924478709698,
  -0.003472711890935898,
  -0.06016167253255844,
  0.09176601469516754,
  0.04260535165667534,
  0.014385431073606014,
  0.027647485956549644,
  -0.07417813688516617,
  0.02283564582467079,
  -0.01586580090224743,
  -0.057338546961545944,
  0.010580653324723244,
  -0.005484357010573149,
  -0.026165256276726723,
  -0.008293806575238705,
  2.464531537700423e-33,
  0.03300580382347107,
  -0.01715261861681938,
  -0.03981883451342583,
  0.12353211641311646,
  -0.018451036885380745,
  0.014379706233739853,
  0.007427100092172623,
  0.0691729485988617,
  0.004493155516684055,
  0.10061202198266983,
  -0.05466959998011589,
  -0.10337553918361664,
  0.015087230131030083,
  -0.02494097501039505,
  -0.011892091482877731,
  0.03944435715675354,
  0.0327325202524662,
  0.010209660977125168,
  -0.09678077697753906,
  0.05819498747587204,
  -0.021728919818997383,
  -0.0386483408510685,
  0.000588937196880579,
  0.03783798962831497,
  -0.006611840333789587,
  0.06505469977855682,
  0.007079144939780235,
  0.06694035977125168,
  0.02415173314511776,
  0.04724515601992607,
  -0.006329400464892387,
  0.009057571180164814,
  -0.17014440894126892,
  -0.09140679240226746,
  0.017401646822690964,
  0.014095580205321312,
  -0.0787372812628746,
  0.0340920127928257,
  0.00824121292680502,
  0.04303678125143051,
  0.028128890320658684,
  -0.013432754203677177,
  0.037219978868961334,
  0.08892519026994705,
  0.012009781785309315,
  -0.06090620532631874,
  0.04102039709687233,
  0.04714181274175644,
  0.04708763211965561,
  -0.007145935203880072,
  -0.11487235873937607,
  -0.0040723965503275394,
  -0.07931794226169586,
  -0.030520547181367874,
  -0.09297792613506317,
  0.09480515867471695,
  0.020443223416805267,
  0.028473814949393272,
  0.00041346283978782594,
  -0.02046920917928219,
  -0.029133779928088188,
  0.013769570738077164,
  -0.021100269630551338,
  0.0700802206993103,
  -0.05099467560648918,
  -0.029298126697540283,
  -0.03564852848649025,
  0.009335000067949295,
  0.03160358965396881,
  -0.025795651599764824,
  0.07977144420146942,
  0.07508014142513275,
  -0.1043272390961647,
  0.0448288656771183,
  -0.050185561180114746,
  -0.0022289904300123453,
  -0.0046245078556239605,
  0.07300306856632233,
  0.07366469502449036,
  -0.016212882474064827,
  -0.033664144575595856,
  -0.07147421687841415,
  -0.02958005666732788,
  -0.0550491102039814,
  -0.010064290836453438,
  -0.005727516021579504,
  0.026934267953038216,
  -0.03192150965332985,
  0.019922709092497826,
  -0.016294335946440697,
  -0.019558662548661232,
  0.05691475421190262,
  0.11258960515260696,
  -0.02651376836001873,
  0.03533240407705307,
  -1.4853220875465922e-08,
  0.03286905214190483,
  0.013584330677986145,
  0.027436375617980957,
  -0.020878814160823822,
  0.10895758867263794,
  -0.030983706936240196,
  0.01623149774968624,
  0.016538944095373154,
  -0.04223388433456421,
  -0.019880937412381172,
  0.03786994889378548,
  -0.012722354382276535,
  0.051184702664613724,
  0.06075378507375717,
  0.027147572487592697,
  -0.008108423091471195,
  -0.013375341892242432,
  0.06135622411966324,
  -0.008997654542326927,
  -0.0575055293738842,
  -0.012919194996356964,
  0.046400099992752075,
  -0.02051331289112568,
  0.09030464291572571,
  -0.007730551529675722,
  0.069735087454319,
  -0.01826024241745472,
  0.0924258679151535,
  -0.00493173161521554,
  -0.04797661304473877,
  0.0553850494325161,
  -0.023436525836586952,
  -0.0447758287191391,
  -0.014637939631938934,
  0.00925927609205246,
  0.040850620716810226,
  -0.009064082987606525,
  -0.006945107597857714,
  -0.029200484976172447,
  0.14852873980998993,
  -0.04326893389225006,
  -0.1545904129743576,
  0.02772088348865509,
  0.0037093476857990026,
  -0.0880642905831337,
  0.023423565551638603,
  -0.05173948407173157,
  -0.01798063889145851,
  -0.0048668175004422665,
  -0.02943151257932186,
  -0.006786121055483818,
  -0.0043993447907269,
  0.0326085165143013,
  0.04477005451917648,
  0.07737607508897781,
  0.035019759088754654,
  0.03378671780228615,
  0.019712766632437706,
  -0.03159867227077484,
  0.005404326599091291,
  0.17780664563179016,
  -0.037863682955503464,
  -0.06350429356098175,
  0.014291122555732727]]</code></pre>
</div>
</div>
</div>
</div>
<p>Cool, looks like we’ve generated a vector representation for ‘sup’, right? Wrong.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-64">
<div id="cell-64" class="cell" data-tags="[&quot;strings_are_iterables&quot;]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ef(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sup'</span>)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ef([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sup'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(3, 1)</code></pre>
</div>
</div>
</div>
<p>Sup with that? Chroma tends to expect iterables(lists, tuples, etc) within its functions and methods, so when we pass a three character string, it treats it as an iterable and returns 3 embeddings – one for each letter, as seen above. So, as a word of caution, if you wish to pass in a single item, pass it in as a list of one.</p>
</section>
<section id="distance-between-embeddings" class="level2 page-columns page-full" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="distance-between-embeddings"><span class="header-section-number">2.2</span> Distance Between Embeddings</h2>
<p class="page-columns page-full"><a href="images/cos_similarity.jpg" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-2"></a></p><div class="no-row-height column-margin column-container"><a href="images/cos_similarity.jpg" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-2"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/images/cos_similarity.jpg" class="img-fluid" width="197"></a></div><p></p>
<p>When you wish to find the similarity between two separate embeddings, such as the generated embedding of your query and a stored embedding in the vector database(see Fig.&nbsp;1 Step 3), we need to use a distance function. In our case, we’ll use <em>cosine distance.</em> Related is the cosine similarity, which describes the similarity between two vectors. It is -1 if they are not at all related, and 1 if they are pointing in the exact same direction.</p>
<p><code>cosine_distance = 1 - cosine_similarity</code> so 0 represents a perfect relationship while 2 represents no relationship.</p>
<p>Putting this into practice, lets compare nodes generated from the 0th paragraph(we use zero indexing in these here parts, pahtnah) to other nodes generated from the 0th paragraph, and then compare nodes generated from the first paragraph to nodes generated from the 19th paragraph</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-66">
<div id="cell-66" class="cell" data-tags="[&quot;cos_comparison&quot;]" data-execution_count="160">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> chromadb.utils.distance_functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cosine</span>
<span id="cb7-2"></span>
<span id="cb7-3">p0_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-4">p19_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> graph_history.history.values():</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v:</span>
<span id="cb7-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_idx'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb7-8">            p0_list.append(v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>])</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_idx'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>:</span>
<span id="cb7-10">            p19_list.append(v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>])</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph 0 - paragraph 0 comparisons: '</span>, cosine(ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p0_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p0_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), cosine(ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p0_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p0_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),</span>
<span id="cb7-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">paragraph 1 - paragraph 19 comparisons: '</span>, cosine(ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p0_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p19_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), cosine(ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p0_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ef([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(p19_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>paragraph 0 - paragraph 0 comparisons:  0.22135839656360656 0.14691759339122346 
paragraph 1 - paragraph 19 comparisons:  0.3139882121419234 0.2947411460832846</code></pre>
</div>
</div>
</div>
<p>Luckily, the values make my point for me. There is more similarity between the nodes generated from within a paragraph than between nodes generated from different paragraphs.</p>
<div id="fig-similarity-comparison" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-similarity-comparison-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/similarity_comparison.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;2: Nodes originating from a paragraph are likely to be more similar than nodes generated from different paragraphs"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/images/similarity_comparison.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-similarity-comparison-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Nodes originating from a paragraph are likely to be more similar than nodes generated from different paragraphs
</figcaption>
</figure>
</div>
</section>
<section id="setting-up-our-db" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="setting-up-our-db"><span class="header-section-number">2.3</span> Setting Up Our DB</h2>
<p>Chroma uses <code>collections</code> as vector spaces which handle the storage of your vectors, their ids, and metadata.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-67">
<div id="cell-67" class="cell" data-tags="[&quot;db_setup&quot;]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">chroma_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chromadb.Client()</span>
<span id="cb9-2"></span>
<span id="cb9-3">collection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chroma_client.create_collection(</span>
<span id="cb9-4">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'musique_benchmark'</span>,</span>
<span id="cb9-5">    embedding_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ef,</span>
<span id="cb9-6">    metadata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsnw:space"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>}</span>
<span id="cb9-7">    )</span></code></pre></div>
</div>
</div>
<p>We just feed it a <code>name</code> – our benchmark, the <code>embedding_function</code> and the <code>hsnw:space</code> as the metadata, instructing the database which distance metric this collection should be optimized for.</p>
</section>
</section>
<section id="connecting-vector-db-to-knowledge-graph" class="level1 page-columns page-full" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Connecting Vector DB to Knowledge Graph</h1>
<p>Our current goal is to retrieve the adjacent nodes(nodes with connections) of a node whose embedding is semantically similar to our query – seen in Fig.&nbsp;1 Step 5.</p>
<p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#knowledge-graph-generation-with-history">In the previous post</a> we created a network graph with rustworkx from a graph_history object we generated with our LLM pipeline while looping over the paragraphs of a single question.</p>
<p>As a brief reminder, here is what the <code>history</code> dictionary of that <code>graph_history</code> object resembles:</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-69">
<div id="cell-69" class="cell" data-tags="[&quot;graph_hist_reminder&quot;]" data-execution_count="162">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">graph_history.history</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="162">
<pre><code>OrderedDict([(UUID('bdbf44f6-c5ab-4e93-95f9-913c4472c483'),
              {'nodes': {'semantic_id': 'world-war-2',
                'category': 'historical-event',
                'attributes': {'name': 'Second World War',
                 'duration': '1942 - 1945',
                 'impact': 'Japan occupied the Philippines during this period'},
                'paragraph_idx': 0}}),
             (UUID('26dc571e-2d3f-405e-be4c-11be4dbb4e21'),
              {'edges': {'from_node': UUID('7c74cbd4-d37e-48ee-b07b-8e743cb4e571'),
                'to_node': UUID('bdbf44f6-c5ab-4e93-95f9-913c4472c483'),
                'category': 'affected_by'}}),
             (UUID('7c74cbd4-d37e-48ee-b07b-8e743cb4e571'),
              {'nodes': {'semantic_id': 'philippines-commonwealth',
                'category': 'government',
                'attributes': {'name': 'Commonwealth of the Philippines',
                 'duration': '1935 - 1946',
                 'status': 'replaced the Insular Government',
                 'description': 'The administrative body that governed the Philippines from 1935 to 1946, aside from a period of exile in the Second World War from 1942 to 1945 when Japan occupied the country.',
                 'established_by': 'Tydings–McDuffie Act'},
                'paragraph_idx': 0}}),
             (UUID('45454413-bccb-4305-b606-2fa6386a64b6'),
              {'nodes': {'semantic_id': 'insular-government',
                'category': 'government',
                'attributes': {'name': 'Insular Government',
                 'type': 'United States territorial government',
                 'replaced_by': 'philippines-commonwealth'},
                'paragraph_idx': 0}}),
             (UUID('fd95bdaf-d7b3-4795-b0c3-bb239fa17d0e'),
              {'nodes': {'semantic_id': 'transition-to-independence',
                'category': 'process',
                'attributes': {'name': 'Transitional administration',
                 'purpose': "in preparation for the country's full achievement of independence"},
                'paragraph_idx': 0}}),
             (UUID('d456f405-4f08-48a4-8ede-5e3c39bda952'),
              {'edges': {'from_node': UUID('45454413-bccb-4305-b606-2fa6386a64b6'),
                'to_node': UUID('7c74cbd4-d37e-48ee-b07b-8e743cb4e571'),
                'category': 'replaced'}}),
             (UUID('4c6e9ebc-b61f-4514-93dd-628f4b3efc63'),
              {'edges': {'from_node': UUID('7c74cbd4-d37e-48ee-b07b-8e743cb4e571'),
                'to_node': UUID('fd95bdaf-d7b3-4795-b0c3-bb239fa17d0e'),
                'category': 'part_of'}}),
             (UUID('b88ccc2e-89f4-4799-bf64-38ca5d0badf8'),
              {'nodes': {'semantic_id': 'lake-oesa',
                'category': 'location',
                'attributes': {'name': 'Lake Oesa',
                 'elevation': 2267,
                 'unit': 'm',
                 'elevation_ft': 7438,
                 'location': {'park': 'Yoho National Park',
                  'city': 'Field',
                  'province': 'British Columbia',
                  'country': 'Canada'}},
                'paragraph_idx': 1}}),
             (UUID('fa964c2f-3cf7-4b61-99f4-6029ace56ccb'),
              {'nodes': {'semantic_id': 'arafura-swamp',
                'category': 'location',
                'attributes': {'name': 'Arafura Swamp',
                 'type': 'largest wooded swamp in the Northern Territory and possibly in Australia',
                 'location': {'region': 'Arnhem Land',
                  'territory': 'Northern Territory',
                  'country': 'Australia'},
                 'size': {'area': {'max': 5850, 'unit': 'km^2'},
                  'expansion': 'may expand by the end of the wet season'},
                 'status': 'near pristine floodplain',
                 'cultural_significance': 'great cultural significance to the Yolngu people, in particular the Ramingining community',
                 'filming_location': 'Ten Canoes'},
                'paragraph_idx': 2}}),
             (UUID('4c1c52c9-a5a5-4bc8-999d-cf7539d57322'),
              {'nodes': {'semantic_id': 'wapizagonke-lake',
                'category': 'location',
                'attributes': {'name': 'Wapizagonke Lake',
                 'location': {'sector': 'Lac-Wapizagonke',
                  'city': 'Shawinigan',
                  'park': 'La Mauricie National Park',
                  'region': 'Mauricie',
                  'province': 'Quebec',
                  'country': 'Canada'}},
                'paragraph_idx': 3}}),
             (UUID('dc5e696f-cdb0-4ae7-bf44-cc4eef5af46d'),
              {'nodes': {'semantic_id': 'khabarovsky-district',
                'category': 'location',
                'attributes': {'name': 'Khabarovsky District',
                 'type': 'administrative and municipal district',
                 'region': 'Khabarovsk Krai',
                 'country': 'Russia',
                 'area': {'value': 45140, 'unit': 'km^2'},
                 'segments': {'description': 'two unconnected segments separated by the territory of Amursky District',
                  'location': 'southwest of the krai'},
                 'administrative_center': {'name': 'Khabarovsk'}},
                'paragraph_idx': 4}}),
             (UUID('38724952-3d65-44b0-b5f8-03d13f501b6e'),
              {'nodes': {'semantic_id': 'silver-lake',
                'category': 'location',
                'attributes': {'name': 'Silver Lake',
                 'location': {'county': 'Cheshire County',
                  'state': 'New Hampshire',
                  'region': 'southwestern',
                  'country': 'United States'},
                 'towns': ['Harrisville', 'Nelson'],
                 'water_flow': {'from': 'Silver Lake',
                  'via': ['Minnewawa Brook', 'The Branch'],
                  'to': 'Ashuelot River'}},
                'paragraph_idx': 5}}),
             (UUID('85f00f66-e471-4e29-90f1-a11634734dc9'),
              {'nodes': {'semantic_id': 'ashuelot-river',
                'category': 'location',
                'attributes': {'name': 'Ashuelot River',
                 'type': 'tributary',
                 'of': 'Connecticut River'},
                'paragraph_idx': 5}}),
             (UUID('7c057b91-d6fb-4058-af7e-6d3104e1eed1'),
              {'nodes': {'semantic_id': 'hmda',
                'category': 'organization',
                'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA)',
                 'type': 'apolitical urban planning agency'},
                'paragraph_idx': 6}}),
             (UUID('a0f921c0-73c3-41db-980a-c86d1bc3906b'),
              {'nodes': {'semantic_id': 'hmda-area',
                'category': 'location',
                'attributes': {'name': 'area under the Hyderabad Metropolitan Development Authority (HMDA)',
                 'size': 'largest',
                 'description': 'covers the GHMC and its suburbs, extending to 54 mandals in five districts encircling the city'},
                'paragraph_idx': 6}}),
             (UUID('50db0180-d74c-4009-8812-aad530beef99'),
              {'nodes': {'semantic_id': 'ghmc-area',
                'category': 'location',
                'attributes': {'name': 'GHMC area',
                 'alias': 'Hyderabad city',
                 'size': 'larger than Hyderabad district'},
                'paragraph_idx': 6}}),
             (UUID('c01036cf-69f0-4589-a53f-c967eb829736'),
              {'nodes': {'semantic_id': 'hyderabad-district',
                'category': 'location',
                'attributes': {'name': 'Hyderabad district',
                 'size': 'larger than Hyderabad Police area'},
                'paragraph_idx': 6}}),
             (UUID('b325368a-939a-4b13-bc90-bb48ffa68859'),
              {'nodes': {'semantic_id': 'hyderabad-police-area',
                'category': 'location',
                'attributes': {'name': 'Hyderabad Police area',
                 'size': 'smallest'},
                'paragraph_idx': 6}}),
             (UUID('85d71a58-5af2-438e-9f73-72c8363a57f8'),
              {'nodes': {'semantic_id': 'hmwssb',
                'category': 'organization',
                'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage Board',
                 'description': 'bodies such as the Hyderabad Metropolitan Water Supply and Sewerage Board (HMWSSB) that HMDA manages the administration of'},
                'paragraph_idx': 6}}),
             (UUID('e11ba81b-0525-4e60-b433-2f0f4438784a'),
              {'edges': {'from_node': UUID('7c057b91-d6fb-4058-af7e-6d3104e1eed1'),
                'to_node': UUID('a0f921c0-73c3-41db-980a-c86d1bc3906b'),
                'category': 'manages'}}),
             (UUID('0dd83ca3-69c1-473a-ba60-6afc5fcf0acf'),
              {'edges': {'from_node': UUID('50db0180-d74c-4009-8812-aad530beef99'),
                'to_node': UUID('a0f921c0-73c3-41db-980a-c86d1bc3906b'),
                'category': 'part_of'}}),
             (UUID('9ff064a2-672f-4964-81c3-70316ecae3ec'),
              {'edges': {'from_node': UUID('c01036cf-69f0-4589-a53f-c967eb829736'),
                'to_node': UUID('50db0180-d74c-4009-8812-aad530beef99'),
                'category': 'part_of'}}),
             (UUID('bbd34f51-b77f-4d25-854c-52b0383ffc45'),
              {'edges': {'from_node': UUID('b325368a-939a-4b13-bc90-bb48ffa68859'),
                'to_node': UUID('c01036cf-69f0-4589-a53f-c967eb829736'),
                'category': 'part_of'}}),
             (UUID('e5d4bd92-ab18-4a9a-8479-6f840f818812'),
              {'edges': {'from_node': UUID('7c057b91-d6fb-4058-af7e-6d3104e1eed1'),
                'to_node': UUID('85d71a58-5af2-438e-9f73-72c8363a57f8'),
                'category': 'manages'}}),
             (UUID('9313d4b8-6d2e-4032-b214-b321fe5da7d3'),
              {'nodes': {'semantic_id': 'san-juan-city',
                'category': 'location',
                'attributes': {'name': 'San Juan city',
                 'size': '76.93 square miles (199.2 km²)',
                 'water_area': '29.11 square miles (75.4 km²) (37.83%)'},
                'paragraph_idx': 7}}),
             (UUID('72913ab5-4552-42e1-8604-7e016738c169'),
              {'nodes': {'semantic_id': 'san-juan-bay',
                'category': 'location',
                'attributes': {'name': 'San Juan Bay', 'type': 'water body'},
                'paragraph_idx': 7}}),
             (UUID('278b8adb-3088-4b06-9348-5cc2c9bb3fc1'),
              {'nodes': {'semantic_id': 'condado-lagoon',
                'category': 'location',
                'attributes': {'name': 'Condado Lagoon', 'type': 'water body'},
                'paragraph_idx': 7}}),
             (UUID('9814602e-d7e0-480f-b86e-4b0670e8bdf0'),
              {'nodes': {'semantic_id': 'san-jose-lagoon',
                'category': 'location',
                'attributes': {'name': 'San José Lagoon',
                 'type': 'water body'},
                'paragraph_idx': 7}}),
             (UUID('17ecb67f-e311-489c-9df7-97d8e689ec3e'),
              {'edges': {'from_node': UUID('9313d4b8-6d2e-4032-b214-b321fe5da7d3'),
                'to_node': UUID('72913ab5-4552-42e1-8604-7e016738c169'),
                'category': 'contains'}}),
             (UUID('03b81c23-907d-4f86-b12b-3fc300f8cecf'),
              {'edges': {'from_node': UUID('9313d4b8-6d2e-4032-b214-b321fe5da7d3'),
                'to_node': UUID('278b8adb-3088-4b06-9348-5cc2c9bb3fc1'),
                'category': 'contains'}}),
             (UUID('832b969e-08c7-4ad2-9f21-29e78f18f246'),
              {'edges': {'from_node': UUID('9313d4b8-6d2e-4032-b214-b321fe5da7d3'),
                'to_node': UUID('9814602e-d7e0-480f-b86e-4b0670e8bdf0'),
                'category': 'contains'}}),
             (UUID('0f3a0e4d-3a1b-4d2b-befc-676b8009d1f6'),
              {'nodes': {'semantic_id': 'landkreis',
                'category': 'location',
                'attributes': {'type': 'administrative district'},
                'paragraph_idx': 8}}),
             (UUID('b23a8544-765b-4713-a2a0-01c3f38fed6a'),
              {'nodes': {'semantic_id': 'urban-hinterland',
                'category': 'location',
                'attributes': {'type': 'area surrounding a district-free city or town'},
                'paragraph_idx': 8}}),
             (UUID('a0c2f429-8515-4075-b051-af1985e1ac5c'),
              {'nodes': {'semantic_id': 'district-level',
                'category': 'location',
                'attributes': {'type': 'administrative level'},
                'paragraph_idx': 8}}),
             (UUID('5447372d-faa0-4578-a285-d28ccd556385'),
              {'nodes': {'semantic_id': 'kreisfreie-stadt',
                'category': 'location',
                'attributes': {'type': 'district-free city or town'},
                'paragraph_idx': 8}}),
             (UUID('37176eec-a55d-44e4-a6cb-8bfbfee933fa'),
              {'nodes': {'semantic_id': 'local-associations',
                'category': 'organization',
                'attributes': {'type': 'amalgamation of one or more Landkreise with one or more Kreisfreie Städte',
                 'purpose': 'to implement simplification of administration at the district level'},
                'paragraph_idx': 8}}),
             (UUID('50b36c1c-0ca2-4111-a97e-258fdfb02e39'),
              {'edges': {'from_node': UUID('5447372d-faa0-4578-a285-d28ccd556385'),
                'to_node': UUID('b23a8544-765b-4713-a2a0-01c3f38fed6a'),
                'category': 'associated_with'}}),
             (UUID('ff2e2d26-2cd5-4257-abf8-c10e7df94c02'),
              {'edges': {'from_node': UUID('37176eec-a55d-44e4-a6cb-8bfbfee933fa'),
                'to_node': UUID('a0c2f429-8515-4075-b051-af1985e1ac5c'),
                'category': 'operates_at'}}),
             (UUID('cc430a8c-0f62-4bcc-ad2c-4d1f7ce5f6d5'),
              {'edges': {'from_node': UUID('37176eec-a55d-44e4-a6cb-8bfbfee933fa'),
                'to_node': UUID('5447372d-faa0-4578-a285-d28ccd556385'),
                'category': 'contains'}}),
             (UUID('6949c464-7c2f-4b0f-962b-3bce37d17ddc'),
              {'edges': {'from_node': UUID('37176eec-a55d-44e4-a6cb-8bfbfee933fa'),
                'to_node': UUID('0f3a0e4d-3a1b-4d2b-befc-676b8009d1f6'),
                'category': 'contains'}}),
             (UUID('4e3d9a61-a794-49f8-bafc-b9b64fec2fe6'),
              {'nodes': {'semantic_id': 'norfolk-island',
                'category': 'location',
                'attributes': {'name': 'Norfolk Island',
                 'type': 'island',
                 'coordinates': {'latitude': -29.033, 'longitude': 167.95},
                 'location': 'South Pacific Ocean, east of the Australian mainland',
                 'area': 34.6,
                 'area_unit': 'square kilometres',
                 'coastline': 32,
                 'coastline_unit': 'km',
                 'highest_point': 'Mount Bates'},
                'paragraph_idx': 9}}),
             (UUID('a7bf1182-a4f6-4a73-89ce-0a00be00e2cb'),
              {'nodes': {'semantic_id': 'phillip-island',
                'category': 'location',
                'attributes': {'name': 'Phillip Island',
                 'type': 'island',
                 'location': 'territory of Norfolk Island',
                 'size': 'second largest island'},
                'paragraph_idx': 9}}),
             (UUID('19b0c9e8-39b6-4dde-b822-d032cf5e63ba'),
              {'nodes': {'semantic_id': 'mount-bates',
                'category': 'location',
                'attributes': {'name': 'Mount Bates',
                 'elevation': 319,
                 'elevation_unit': 'metres',
                 'location': 'northwest quadrant of Norfolk Island'},
                'paragraph_idx': 9}}),
             (UUID('b21b44eb-f998-495d-9eb4-df1057959cf3'),
              {'nodes': {'semantic_id': 'phillip-island-distance',
                'category': 'distance',
                'attributes': {'distance': 7,
                 'distance_unit': 'kilometres',
                 'direction': 'south',
                 'reference_location': 'main island'},
                'paragraph_idx': 9}}),
             (UUID('e698d0e2-1709-4262-97d6-196bd98cc2d3'),
              {'edges': {'from_node': UUID('4e3d9a61-a794-49f8-bafc-b9b64fec2fe6'),
                'to_node': UUID('19b0c9e8-39b6-4dde-b822-d032cf5e63ba'),
                'category': 'contains'}}),
             (UUID('04e22c46-04cf-4f73-a4f1-39f7fc998ec3'),
              {'edges': {'from_node': UUID('4e3d9a61-a794-49f8-bafc-b9b64fec2fe6'),
                'to_node': UUID('a7bf1182-a4f6-4a73-89ce-0a00be00e2cb'),
                'category': 'contains'}}),
             (UUID('cee43dbe-2d89-44ed-a1fa-0eafa878167a'),
              {'edges': {'from_node': UUID('4e3d9a61-a794-49f8-bafc-b9b64fec2fe6'),
                'to_node': UUID('b21b44eb-f998-495d-9eb4-df1057959cf3'),
                'category': 'contains'}}),
             (UUID('5f092031-cf0d-408c-a4f1-896e7c8607be'),
              {'nodes': {'semantic_id': 'star-stadium',
                'category': 'location',
                'attributes': {'name': 'Star (Zvezda) Stadium',
                 'previous_name': 'Lenin Komsomol Stadium',
                 'location': 'Perm, Russia',
                 'type': 'multi-use stadium',
                 'usage': 'football matches',
                 'home_of': 'FC Amkar Perm',
                 'capacity': 17000,
                 'opened_on': '1969-06-05'},
                'paragraph_idx': 11}}),
             (UUID('08177c86-f5f7-4917-8a05-c1f311690aee'),
              {'nodes': {'semantic_id': 'perm',
                'category': 'location',
                'attributes': {'name': 'Perm',
                 'type': 'city',
                 'administrative_center': 'Perm Krai'},
                'paragraph_idx': 11}}),
             (UUID('08b31a77-8dc6-4490-925c-037ebf0b8d13'),
              {'nodes': {'semantic_id': 'perm-krai',
                'category': 'location',
                'attributes': {'name': 'Perm Krai',
                 'type': 'administrative region',
                 'location': 'Russia'},
                'paragraph_idx': 11}}),
             (UUID('725b2459-e361-40e7-a5c5-463c81aaed93'),
              {'edges': {'from_node': UUID('08177c86-f5f7-4917-8a05-c1f311690aee'),
                'to_node': UUID('08b31a77-8dc6-4490-925c-037ebf0b8d13'),
                'category': 'administrative_center_of'}}),
             (UUID('91b73ee9-b9f7-4858-b7bc-c761f5e8b4b5'),
              {'nodes': {'semantic_id': 'papeete',
                'category': 'location',
                'attributes': {'name': 'Papeete',
                 'type': 'city',
                 'location': 'French Polynesia'},
                'paragraph_idx': 12}}),
             (UUID('b8ed0c63-f06f-408a-832a-93d8b0a02d8e'),
              {'nodes': {'semantic_id': 'french-polynesia',
                'category': 'location',
                'attributes': {'name': 'French Polynesia',
                 'type': 'overseas territory',
                 'location': 'South Pacific Ocean'},
                'paragraph_idx': 12}}),
             (UUID('604a99d8-6569-4fbb-a44d-c9e446100111'),
              {'nodes': {'semantic_id': 'tahiti',
                'category': 'location',
                'attributes': {'name': 'Tahiti',
                 'type': 'island',
                 'part_of': 'Society Islands'},
                'paragraph_idx': 12}}),
             (UUID('cf0355f5-9078-4d93-8434-961fee590a47'),
              {'nodes': {'semantic_id': 'windward-islands',
                'category': 'location',
                'attributes': {'name': 'Windward Islands',
                 'type': 'administrative subdivision',
                 'part_of': 'Society Islands'},
                'paragraph_idx': 12}}),
             (UUID('202c4602-aa18-4147-92a8-a3c6344a048b'),
              {'edges': {'from_node': UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
                'to_node': UUID('91b73ee9-b9f7-4858-b7bc-c761f5e8b4b5'),
                'category': 'located_in'}}),
             (UUID('4ac76cfb-455e-4987-bfe0-2f6b1416bb49'),
              {'edges': {'from_node': UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
                'to_node': UUID('604a99d8-6569-4fbb-a44d-c9e446100111'),
                'category': 'located_on'}}),
             (UUID('aafe3fb3-ee59-4d8c-b299-d0a9776878e7'),
              {'edges': {'from_node': UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
                'to_node': UUID('cf0355f5-9078-4d93-8434-961fee590a47'),
                'category': 'part_of'}}),
             (UUID('2ca5031f-d739-4910-8b2e-574ee94b4fc3'),
              {'edges': {'from_node': UUID('604a99d8-6569-4fbb-a44d-c9e446100111'),
                'to_node': UUID('d2974cd5-7054-4bed-8222-0d92af1f90a6'),
                'category': 'part_of'}}),
             (UUID('ccd6454e-3a6a-4404-a2fa-f940a0039967'),
              {'edges': {'from_node': UUID('cf0355f5-9078-4d93-8434-961fee590a47'),
                'to_node': UUID('d2974cd5-7054-4bed-8222-0d92af1f90a6'),
                'category': 'part_of'}}),
             (UUID('e650982f-8436-491a-8f3e-1a1124550783'),
              {'edges': {'from_node': UUID('b8ed0c63-f06f-408a-832a-93d8b0a02d8e'),
                'to_node': UUID('604a99d8-6569-4fbb-a44d-c9e446100111'),
                'category': 'contains'}}),
             (UUID('f45c0231-3ade-44e5-9bb7-7722cca223f2'),
              {'edges': {'from_node': UUID('b8ed0c63-f06f-408a-832a-93d8b0a02d8e'),
                'to_node': UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
                'category': 'contains'}}),
             (UUID('d2974cd5-7054-4bed-8222-0d92af1f90a6'),
              {'nodes': {'semantic_id': 'society-islands',
                'category': 'location',
                'attributes': {'name': 'Society Islands',
                 'type': 'archipelago'},
                'paragraph_idx': 12}}),
             (UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
              {'nodes': {'semantic_id': 'paea',
                'category': 'location',
                'attributes': {'name': 'Paea',
                 'type': 'commune',
                 'location': 'Papeete, French Polynesia',
                 'island': 'Tahiti',
                 'administrative_subdivision': 'Windward Islands',
                 'part_of': 'Society Islands'},
                'paragraph_idx': 12}}),
             (UUID('78c1c3dc-5f26-4176-830a-c0586e583955'),
              {'nodes': {'semantic_id': 'population',
                'category': 'attribute',
                'attributes': {'value': 13021, 'year': 2017},
                'paragraph_idx': 12}}),
             (UUID('935abcd2-c7ec-4815-8026-14d9e8502b3e'),
              {'edges': {'from_node': UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
                'to_node': UUID('d2974cd5-7054-4bed-8222-0d92af1f90a6'),
                'category': 'part_of'}}),
             (UUID('2d09622d-df53-4f41-9707-24fc6698438c'),
              {'edges': {'from_node': UUID('0f802399-f15e-442d-a597-e0c84972a35f'),
                'to_node': UUID('78c1c3dc-5f26-4176-830a-c0586e583955'),
                'category': 'has_attribute'}}),
             (UUID('710a0044-84bc-4f53-a31c-1fb07c009351'),
              {'nodes': {'semantic_id': 'potamogeton-amplifolius',
                'category': 'plant',
                'attributes': {'name': 'Potamogeton amplifolius',
                 'common_names': ['largeleaf pondweed',
                  'broad-leaved pondweed'],
                 'description': 'an aquatic plant of North America',
                 'habitat': ['lakes', 'ponds', 'rivers'],
                 'environment': 'deep water'},
                'paragraph_idx': 13}}),
             (UUID('4e1a454c-a0c5-4851-a0a0-092123232ce0'),
              {'nodes': {'semantic_id': 'north-america',
                'category': 'geographic_region',
                'attributes': {'name': 'North America'},
                'paragraph_idx': 13}}),
             (UUID('9f17363c-01e0-4698-b96d-9425f00cd08b'),
              {'edges': {'from_node': UUID('710a0044-84bc-4f53-a31c-1fb07c009351'),
                'to_node': UUID('4e1a454c-a0c5-4851-a0a0-092123232ce0'),
                'category': 'native_to'}}),
             (UUID('417a9a71-8b2b-43f7-9d04-7905c9d00075'),
              {'nodes': {'semantic_id': 'soltonsky-district',
                'category': 'location',
                'attributes': {'name': 'Soltonsky District',
                 'type': 'administrative and municipal district',
                 'part_of': 'Altai Krai',
                 'location': 'Russia',
                 'borders': ['Biysky District']},
                'paragraph_idx': 14}}),
             (UUID('4b288fc3-091b-447f-b1e7-31736281589c'),
              {'nodes': {'semantic_id': 'krasnogorsky-district',
                'category': 'location',
                'attributes': {'name': 'Krasnogorsky District',
                 'type': 'administrative and municipal district',
                 'part_of': 'Altai Krai',
                 'location': 'Russia',
                 'borders': ['Biysky District']},
                'paragraph_idx': 14}}),
             (UUID('a2849f7d-8ccd-4c95-8911-29b2f498d6b7'),
              {'nodes': {'semantic_id': 'sovetsky-district',
                'category': 'location',
                'attributes': {'name': 'Sovetsky District',
                 'type': 'administrative and municipal district',
                 'part_of': 'Altai Krai',
                 'location': 'Russia',
                 'borders': ['Biysky District']},
                'paragraph_idx': 14}}),
             (UUID('b63a7d4f-9757-44f2-90c1-d29ef9d6c62a'),
              {'nodes': {'semantic_id': 'smolensky-district',
                'category': 'location',
                'attributes': {'name': 'Smolensky District',
                 'type': 'administrative and municipal district',
                 'part_of': 'Altai Krai',
                 'location': 'Russia',
                 'borders': ['Biysky District']},
                'paragraph_idx': 14}}),
             (UUID('b980a3e8-8022-485f-addf-9c8d68716740'),
              {'nodes': {'semantic_id': 'biysk',
                'category': 'location',
                'attributes': {'name': 'Biysk',
                 'type': 'city',
                 'part_of': 'Altai Krai',
                 'location': 'Russia',
                 'is_administrative_center': True},
                'paragraph_idx': 14}}),
             (UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
              {'nodes': {'semantic_id': 'biysky-district',
                'category': 'location',
                'attributes': {'name': 'Biysky District',
                 'type': 'administrative and municipal district',
                 'part_of': 'Altai Krai',
                 'location': 'Russia',
                 'borders': ['Soltonsky District',
                  'Krasnogorsky District',
                  'Sovetsky District',
                  'Smolensky District',
                  'Biysk']},
                'paragraph_idx': 14}}),
             (UUID('8f0836c4-fff6-4fde-b259-f70b6128b348'),
              {'nodes': {'semantic_id': 'altai-krai',
                'category': 'location',
                'attributes': {'name': 'Altai Krai',
                 'type': 'krai',
                 'location': 'Russia'},
                'paragraph_idx': 14}}),
             (UUID('bab321a0-3f98-426b-8a2d-20d5ec639232'),
              {'edges': {'from_node': UUID('417a9a71-8b2b-43f7-9d04-7905c9d00075'),
                'to_node': UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
                'category': 'borders'}}),
             (UUID('cbd9207d-ab1e-4c0d-b63b-a4181fbace46'),
              {'edges': {'from_node': UUID('4b288fc3-091b-447f-b1e7-31736281589c'),
                'to_node': UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
                'category': 'borders'}}),
             (UUID('cb5c0d19-7b12-4a50-a477-cac8e0762a12'),
              {'edges': {'from_node': UUID('a2849f7d-8ccd-4c95-8911-29b2f498d6b7'),
                'to_node': UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
                'category': 'borders'}}),
             (UUID('e40f26ca-a97c-46ca-a9ed-a031a8088448'),
              {'edges': {'from_node': UUID('b63a7d4f-9757-44f2-90c1-d29ef9d6c62a'),
                'to_node': UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
                'category': 'borders'}}),
             (UUID('a09750f0-d5f8-4dab-82cc-be2e73691c97'),
              {'edges': {'from_node': UUID('b980a3e8-8022-485f-addf-9c8d68716740'),
                'to_node': UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
                'category': 'borders'}}),
             (UUID('68b15747-9269-48bf-ba9d-ca79b31ba192'),
              {'edges': {'from_node': UUID('10b5e6c7-bc63-41d5-b52d-38e728f085e2'),
                'to_node': UUID('8f0836c4-fff6-4fde-b259-f70b6128b348'),
                'category': 'part_of'}}),
             (UUID('4e30cf7e-8223-4337-a65d-0c0c108e674e'),
              {'nodes': {'semantic_id': 'contoocook-lake',
                'category': 'location',
                'attributes': {'name': 'Contoocook Lake',
                 'type': 'lake',
                 'location': {'county': 'Cheshire County',
                  'state': 'New Hampshire',
                  'country': 'United States'},
                 'towns': ['Jaffrey', 'Rindge'],
                 'is_headwaters_of': 'contoocook-river'},
                'paragraph_idx': 15}}),
             (UUID('ada27367-85fa-47e6-9d1c-1f061b2e1dc6'),
              {'nodes': {'semantic_id': 'pool-pond',
                'category': 'location',
                'attributes': {'name': 'Pool Pond',
                 'type': 'pond',
                 'location': {'county': 'Cheshire County',
                  'state': 'New Hampshire',
                  'country': 'United States'},
                 'is_headwaters_of': 'contoocook-river'},
                'paragraph_idx': 15}}),
             (UUID('f39afbdf-aded-4076-b3fa-40f7541b98e6'),
              {'edges': {'from_node': UUID('4e30cf7e-8223-4337-a65d-0c0c108e674e'),
                'to_node': UUID('65cf9d75-79e6-46a5-aab9-ede4587f8e63'),
                'category': 'flows_into'}}),
             (UUID('e7f20049-4bf1-49ca-b9c9-3061af2aa15c'),
              {'edges': {'from_node': UUID('ada27367-85fa-47e6-9d1c-1f061b2e1dc6'),
                'to_node': UUID('65cf9d75-79e6-46a5-aab9-ede4587f8e63'),
                'category': 'flows_into'}}),
             (UUID('65cf9d75-79e6-46a5-aab9-ede4587f8e63'),
              {'nodes': {'semantic_id': 'contoocook-river',
                'category': 'location',
                'attributes': {'name': 'Contoocook River',
                 'type': 'river',
                 'flows_to': 'merrimack-river',
                 'flows_from': ['contoocook-lake', 'pool-pond'],
                 'location': {'city': 'Penacook',
                  'state': 'New Hampshire',
                  'country': 'United States'}},
                'paragraph_idx': 15}}),
             (UUID('9529f921-1f99-4ff7-b9a1-cdce2ff80f92'),
              {'nodes': {'semantic_id': 'merrimack-river',
                'category': 'location',
                'attributes': {'name': 'Merrimack River',
                 'type': 'river',
                 'location': {'city': 'Penacook',
                  'state': 'New Hampshire',
                  'country': 'United States'}},
                'paragraph_idx': 15}}),
             (UUID('c7467973-16e6-4395-8ef9-420c0d1227aa'),
              {'edges': {'from_node': UUID('65cf9d75-79e6-46a5-aab9-ede4587f8e63'),
                'to_node': UUID('9529f921-1f99-4ff7-b9a1-cdce2ff80f92'),
                'category': 'flows_into'}}),
             (UUID('ad00a8de-78fe-4c90-87ec-97495cc749a3'),
              {'nodes': {'semantic_id': 'bogota',
                'category': 'location',
                'attributes': {'name': 'Bogotá',
                 'type': 'city',
                 'pronunciation': {'en': ['ˈboʊɡəˌtɑː', 'bɒˈɡoʊtə', 'boɪ -'],
                  'es': 'boɣoˈta'},
                 'official_name': 'Bogotá',
                 'role': 'political, economic, administrative, industrial, artistic, cultural, and sports center'},
                'paragraph_idx': 16}}),
             (UUID('57a45a77-0a10-4b3c-aa0f-bb090c7df86a'),
              {'nodes': {'semantic_id': 'colombia',
                'category': 'location',
                'attributes': {'name': 'Colombia',
                 'type': 'country',
                 'capital': 'Bogotá'},
                'paragraph_idx': 16}}),
             (UUID('2ef968e0-18eb-4cc5-8e40-85f944b23b16'),
              {'edges': {'from_node': UUID('ad00a8de-78fe-4c90-87ec-97495cc749a3'),
                'to_node': UUID('57a45a77-0a10-4b3c-aa0f-bb090c7df86a'),
                'category': 'capital_of'}}),
             (UUID('a20af2cd-8a3a-4fb9-bdb3-f0c2934ec84d'),
              {'nodes': {'semantic_id': 'intracellular-fluid',
                'category': 'substance',
                'attributes': {'name': 'Intracellular fluid',
                 'amount_of_total_body_water': 0.625,
                 'amount_in_liters': 25,
                 'percentage_of_total_body_fluid': 62.5},
                'paragraph_idx': 17}}),
             (UUID('6a7ca929-c452-4102-92d3-696b92a385d0'),
              {'edges': {'from_node': UUID('a20af2cd-8a3a-4fb9-bdb3-f0c2934ec84d'),
                'to_node': UUID('3650ecee-07ad-4858-8d38-4d4cc2703da5'),
                'category': 'part_of'}}),
             (UUID('8994bac8-1a03-45a7-9e76-e2125548d7c9'),
              {'nodes': {'semantic_id': 'intracellular-fluid',
                'category': 'substance',
                'paragraph_idx': 19}}),
             (UUID('3650ecee-07ad-4858-8d38-4d4cc2703da5'),
              {'nodes': {'semantic_id': 'total-body-fluid',
                'category': 'substance',
                'attributes': {'amount_in_liters': 40,
                 'total_body_weight': 72},
                'paragraph_idx': 19}}),
             (UUID('73813ec0-5dbc-4793-8468-420bed7a3cd1'),
              {'nodes': {'semantic_id': 'territorial-waters',
                'category': 'location',
                'attributes': {'name': 'Territorial waters',
                 'type': 'sea',
                 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low - water mark) of a coastal state'},
                'paragraph_idx': 19}}),
             (UUID('84bcbbd4-0d38-42c3-9aa9-3b38227c0433'),
              {'nodes': {'semantic_id': 'law-of-the-sea',
                'category': 'legal_framework',
                'attributes': {'name': 'United Nations Convention on the Law of the Sea',
                 'year': 1982},
                'paragraph_idx': 19}}),
             (UUID('bc1c5af9-c311-4e9f-975d-349d33d41a15'),
              {'nodes': {'semantic_id': 'straits',
                'category': 'location',
                'attributes': {'name': 'Straits',
                 'type': 'body of water',
                 'sovereignty': 'This sovereignty extends to the airspace over and seabed below'},
                'paragraph_idx': 19}}),
             (UUID('72499573-c0cf-4a31-840a-da1dd1bf4c2f'),
              {'nodes': {'semantic_id': 'maritime-delimitation',
                'category': 'process',
                'attributes': {'name': 'Maritime delimitation',
                 'description': 'Adjustment of the boundaries of territorial waters and exclusive economic zones'},
                'paragraph_idx': 19}}),
             (UUID('cc1d4304-6583-4c76-9856-75f41f945f20'),
              {'nodes': {'semantic_id': 'bank-of-cyprus',
                'category': 'organization',
                'attributes': {'name': 'Bank of Cyprus',
                 'description': 'Largest banking group in Cyprus',
                 'relationship': "merged with the 'good' Cypriot part of Cyprus Popular Bank"},
                'paragraph_idx': 19}}),
             (UUID('1f97c243-fa43-4380-af8f-4404c5c5ce24'),
              {'edges': {'from_node': UUID('73813ec0-5dbc-4793-8468-420bed7a3cd1'),
                'to_node': UUID('84bcbbd4-0d38-42c3-9aa9-3b38227c0433'),
                'category': 'defined_by'}}),
             (UUID('238e98a5-a6be-4048-adf2-f1a310fd78df'),
              {'edges': {'from_node': UUID('bc1c5af9-c311-4e9f-975d-349d33d41a15'),
                'to_node': UUID('72499573-c0cf-4a31-840a-da1dd1bf4c2f'),
                'category': 'defined_by'}}),
             (UUID('51aade3e-39c7-41f8-87b2-38b9b595d6d3'),
              {'edges': {'from_node': UUID('7540bcc4-0cb2-463c-9250-40aadee08d65'),
                'to_node': UUID('cc1d4304-6583-4c76-9856-75f41f945f20'),
                'category': 'merged_with'}}),
             (UUID('8d3a66e1-85c3-4cf9-a995-9eb0c91c2510'),
              {'edges': {'from_node': UUID('8994bac8-1a03-45a7-9e76-e2125548d7c9'),
                'to_node': UUID('3650ecee-07ad-4858-8d38-4d4cc2703da5'),
                'category': 'part_of'}}),
             (UUID('7540bcc4-0cb2-463c-9250-40aadee08d65'),
              {'nodes': {'semantic_id': 'cyprus-popular-bank',
                'category': 'organization',
                'attributes': {'name': 'Cyprus Popular Bank',
                 'previous_names': ['Marfin Popular Bank'],
                 'status': 'shuttered in March 2013',
                 'description': 'Second largest banking group in Cyprus behind the Bank of Cyprus until 2013'},
                'paragraph_idx': 19}}),
             (UUID('b9ef6b09-848c-4ee3-94b8-2a0dbb4e88bb'),
              {'edges': {'from_node': UUID('7540bcc4-0cb2-463c-9250-40aadee08d65'),
                'to_node': UUID('7b7ab7bd-43ab-4a85-a863-587230a60496'),
                'category': 'owns'}}),
             (UUID('d4c1831d-40c6-44ad-ba34-a8945f1ddfb3'),
              {'nodes': {'semantic_id': 'central-bank-of-cyprus',
                'category': 'organization',
                'attributes': {'name': 'Central Bank of Cyprus',
                 'description': 'The central bank that amended the lawyers of the legacy entity without consulting the special administrator'},
                'paragraph_idx': 19}}),
             (UUID('ddeb860c-8a26-4602-81b2-80c3a81058b9'),
              {'edges': {'from_node': UUID('883c8cec-7a77-44ff-9d5d-0aefda29ce21'),
                'to_node': UUID('7b7ab7bd-43ab-4a85-a863-587230a60496'),
                'category': 'manages'}}),
             (UUID('edad1ce6-fc15-4785-8188-9be0a9e2fb30'),
              {'edges': {'from_node': UUID('d4c1831d-40c6-44ad-ba34-a8945f1ddfb3'),
                'to_node': UUID('7b7ab7bd-43ab-4a85-a863-587230a60496'),
                'category': 'amended_lawyers'}}),
             (UUID('7b7ab7bd-43ab-4a85-a863-587230a60496'),
              {'nodes': {'semantic_id': 'legacy-entity',
                'category': 'organization',
                'attributes': {'name': 'Legacy entity of Cyprus Popular Bank',
                 'description': 'Holds all the overseas operations of the now defunct Cyprus Popular Bank, until they are sold by the Special Administrator'},
                'paragraph_idx': 19}}),
             (UUID('3b46a61b-149b-4102-afd7-da851e1dda5c'),
              {'nodes': {'semantic_id': 'veteran-banker',
                'category': 'person',
                'attributes': {'name': 'Chris Pavlou',
                 'expertise': 'expert in Treasury'},
                'paragraph_idx': 19}}),
             (UUID('883c8cec-7a77-44ff-9d5d-0aefda29ce21'),
              {'nodes': {'semantic_id': 'special-administrator',
                'category': 'person',
                'attributes': {'name': 'Andri Antoniadou',
                 'position': 'ran the legacy entity of Cyprus Popular Bank for two years, from March 2013 until 3 March 2015'},
                'paragraph_idx': 19}}),
             (UUID('f9641a28-4283-4cdd-92cd-391f7888e7f4'),
              {'nodes': {'semantic_id': 'marfin-investment-group',
                'category': 'organization',
                'attributes': {'name': 'Marfin Investment Group',
                 'relationship': 'former major shareholder of the legacy entity'},
                'paragraph_idx': 19}}),
             (UUID('5b9c4ae3-5301-41ec-b7eb-73da084dd865'),
              {'edges': {'from_node': UUID('3b46a61b-149b-4102-afd7-da851e1dda5c'),
                'to_node': UUID('7b7ab7bd-43ab-4a85-a863-587230a60496'),
                'category': 'took_over_as'}}),
             (UUID('76e5ee79-b64a-4624-b350-1e01a6753954'),
              {'edges': {'from_node': UUID('7b7ab7bd-43ab-4a85-a863-587230a60496'),
                'to_node': UUID('f9641a28-4283-4cdd-92cd-391f7888e7f4'),
                'category': 'pursuing_legal_action_against'}})])</code></pre>
</div>
</div>
</div>
</div>
<p>It consists of nodes and edges, each with a unique identifier(UUID). To build our vector store collection, we simply loop over it and add the documents and ids associated with the nodes into the collection we created earlier.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-72">
<div id="cell-72" class="cell" data-tags="[&quot;building_collection&quot;]" data-execution_count="18">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> graph_history.history.items():</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v:</span>
<span id="cb12-3">        collection.add(documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>])], ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(k)])</span></code></pre></div>
</div>
</div>
<p>Surely, it has to be harder than that? Nope. The documents, AKA Python dictionaries we converted to strings, we added were converted using the Sentence Transformer used in the <code>create_collection()</code> command. Lets take it for a spin and query it with a question.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-74">
<div id="cell-74" class="cell" data-tags="[&quot;top_results&quot;]" data-execution_count="178">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">top_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collection.query(</span>
<span id="cb13-2">    query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the largest island in the pacific?"</span>]</span>
<span id="cb13-3">    )</span>
<span id="cb13-4">top_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'documents'</span>], top_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ids'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="178">
<pre><code>(["{'semantic_id': 'norfolk-island', 'category': 'location', 'attributes': {'name': 'Norfolk Island', 'type': 'island', 'coordinates': {'latitude': -29.033, 'longitude': 167.95}, 'location': 'South Pacific Ocean, east of the Australian mainland', 'area': 34.6, 'area_unit': 'square kilometres', 'coastline': 32, 'coastline_unit': 'km', 'highest_point': 'Mount Bates'}, 'paragraph_idx': 9}",
  "{'semantic_id': 'phillip-island', 'category': 'location', 'attributes': {'name': 'Phillip Island', 'type': 'island', 'location': 'territory of Norfolk Island', 'size': 'second largest island'}, 'paragraph_idx': 9}",
  "{'semantic_id': 'tahiti', 'category': 'location', 'attributes': {'name': 'Tahiti', 'type': 'island', 'part_of': 'Society Islands'}, 'paragraph_idx': 12}",
  "{'semantic_id': 'territorial-waters', 'category': 'location', 'attributes': {'name': 'Territorial waters', 'type': 'sea', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low - water mark) of a coastal state'}, 'paragraph_idx': 19}",
  "{'semantic_id': 'french-polynesia', 'category': 'location', 'attributes': {'name': 'French Polynesia', 'type': 'overseas territory', 'location': 'South Pacific Ocean'}, 'paragraph_idx': 12}",
  "{'semantic_id': 'san-juan-city', 'category': 'location', 'attributes': {'name': 'San Juan city', 'size': '76.93 square miles (199.2 km²)', 'water_area': '29.11 square miles (75.4 km²) (37.83%)'}, 'paragraph_idx': 7}",
  "{'semantic_id': 'phillip-island-distance', 'category': 'distance', 'attributes': {'distance': 7, 'distance_unit': 'kilometres', 'direction': 'south', 'reference_location': 'main island'}, 'paragraph_idx': 9}",
  "{'semantic_id': 'paea', 'category': 'location', 'attributes': {'name': 'Paea', 'type': 'commune', 'location': 'Papeete, French Polynesia', 'island': 'Tahiti', 'administrative_subdivision': 'Windward Islands', 'part_of': 'Society Islands'}, 'paragraph_idx': 12}",
  "{'semantic_id': 'straits', 'category': 'location', 'attributes': {'name': 'Straits', 'type': 'body of water', 'sovereignty': 'This sovereignty extends to the airspace over and seabed below'}, 'paragraph_idx': 19}",
  "{'semantic_id': 'arafura-swamp', 'category': 'location', 'attributes': {'name': 'Arafura Swamp', 'type': 'largest wooded swamp in the Northern Territory and possibly in Australia', 'location': {'region': 'Arnhem Land', 'territory': 'Northern Territory', 'country': 'Australia'}, 'size': {'area': {'max': 5850, 'unit': 'km^2'}, 'expansion': 'may expand by the end of the wet season'}, 'status': 'near pristine floodplain', 'cultural_significance': 'great cultural significance to the Yolngu people, in particular the Ramingining community', 'filming_location': 'Ten Canoes'}, 'paragraph_idx': 2}"],
 ['4e3d9a61-a794-49f8-bafc-b9b64fec2fe6',
  'a7bf1182-a4f6-4a73-89ce-0a00be00e2cb',
  '604a99d8-6569-4fbb-a44d-c9e446100111',
  '73813ec0-5dbc-4793-8468-420bed7a3cd1',
  'b8ed0c63-f06f-408a-832a-93d8b0a02d8e',
  '9313d4b8-6d2e-4032-b214-b321fe5da7d3',
  'b21b44eb-f998-495d-9eb4-df1057959cf3',
  '0f802399-f15e-442d-a597-e0c84972a35f',
  'bc1c5af9-c311-4e9f-975d-349d33d41a15',
  'fa964c2f-3cf7-4b61-99f4-6029ace56ccb'])</code></pre>
</div>
</div>
</div>
<p>The top 10 results are returned based on the cosine distance metric specified, once again, in the <code>create_collection()</code> command. To illustrate the process up till here, have a flowchart.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="images/vec_populate.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-4" title="Population and querying of the vector database"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/images/vec_populate.png" class="column-page preview-image img-fluid figure-img" alt="Population and querying of the vector database"></a></p>
<figcaption>Population and querying of the vector database</figcaption>
</figure>
</div>
<p>Now, going back to the graph we created – <code>digraph</code> – we are able to use the UUID of the top result to do a dictionary lookup in the <code>node_indices</code> mapping we created when building the graph that maps from the UUID to the index of the node within the graph.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-77">
<div id="cell-77" class="cell" data-tags="[&quot;top_result&quot;]" data-execution_count="183">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uuid</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constructing a UUID version 4 from a string</span></span>
<span id="cb15-4">uuid_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ids'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-5">top_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uuid.UUID(uuid_str, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-6"></span>
<span id="cb15-7">top_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> digraph[node_indices[top_uuid]]</span>
<span id="cb15-8">top_node</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="183">
<pre><code>{'semantic_id': 'norfolk-island',
 'category': 'location',
 'attributes': {'name': 'Norfolk Island',
  'type': 'island',
  'coordinates': {'latitude': -29.033, 'longitude': 167.95},
  'location': 'South Pacific Ocean, east of the Australian mainland',
  'area': 34.6,
  'area_unit': 'square kilometres',
  'coastline': 32,
  'coastline_unit': 'km',
  'highest_point': 'Mount Bates'},
 'paragraph_idx': 9}</code></pre>
</div>
</div>
</div>
<p>Cool, so what? We already have the node dictionary. Because we have the node’s location in the graph, we can easily query the graph to get any nodes connected to it: its neighbors.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-78">
<div id="cell-78" class="cell" data-tags="[&quot;top_connections&quot;]" data-execution_count="186">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> digraph.neighbors(node_indices[top_uuid]):</span>
<span id="cb17-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(digraph[idx])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'semantic_id': 'mount-bates', 'category': 'location', 'attributes': {'name': 'Mount Bates', 'elevation': 319, 'elevation_unit': 'metres', 'location': 'northwest quadrant of Norfolk Island'}, 'paragraph_idx': 9}
{'semantic_id': 'phillip-island-distance', 'category': 'distance', 'attributes': {'distance': 7, 'distance_unit': 'kilometres', 'direction': 'south', 'reference_location': 'main island'}, 'paragraph_idx': 9}
{'semantic_id': 'phillip-island', 'category': 'location', 'attributes': {'name': 'Phillip Island', 'type': 'island', 'location': 'territory of Norfolk Island', 'size': 'second largest island'}, 'paragraph_idx': 9}</code></pre>
</div>
</div>
</div>
</section>
<section id="ze-end" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Ze end</h1>
<p>See, promised I’d keep it short and sweet.</p>
<p>Next up, we’ll focus on using our vector database and knowledge graph to not only answer questions, but also cite the paragraphs with contributing evidence – at least that’s the plan.</p>
<p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html"><strong>Part Four &gt;&gt;&gt;</strong></a></p>


</section>

 ]]></description>
  <category>knowledge-graphs</category>
  <category>rag</category>
  <category>benchmarking</category>
  <guid>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/</guid>
  <pubDate>Tue, 23 Apr 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two</title>
  <dc:creator>Dmitriy Leybel</dc:creator>
  <link>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/</link>
  <description><![CDATA[ 





<p><strong>On the last episode of</strong>: <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html">Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – <em>Part One</em></a>:</p>
<ul>
<li><p><a href="../knowledge-graph-rag-benchmark-1/#jean-claude-van-damme-tell-me-a-haiku">Claude 3 Haiku</a> is our model of choice due to it being in the Goldilocks zone of performance and cost.</p></li>
<li><p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#motivation-for-rag-over-large-context-windows">Relying on large context windows isn’t enough</a>, we need to impart a structure on the data for efficient reuse and robust grounding.</p></li>
<li><p>When creating a knowledge graph, we need to not only be clever about <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html##knowledge-stuffing">controlling our context window</a>, but also having a process through which the connections in the <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#letting-the-llm-loose">graph can grow</a>.</p></li>
</ul>
<hr>
<p><strong>Finally</strong>, we’re getting to the fun part. Like many, I thought this day would never come, but here we are.</p>
<p>I’m going to introduce the numerous components we’ll be using, and then combine them into our knowledge graph creation pipeline.</p>
<section id="lets-split-some-text" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Lets Split Some Text</h1>
<p>In order to feed text of reasonable length into our LLM, we need to be able to split it. The splitting criteria will be the token length of the passage. To implement this criterion, we need to create a length function that will be passed into our splitter, and then test it on one of the paragraphs we have available from the MuSiQue dataset.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-20">
<div id="cell-20" class="cell" data-tags="[&quot;token_len&quot;]" data-execution_count="105">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tiktoken</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> token_len(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, model: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-4">    encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiktoken.encoding_for_model(model)</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(encoder.encode(text))</span>
<span id="cb1-6"></span>
<span id="cb1-7">pprint(paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>])</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token length: '</span>, token_len(paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>]))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>('The Commonwealth of the Philippines (; ) was the administrative body that '
 'governed the Philippines from 1935 to 1946, aside from a period of exile in '
 'the Second World War from 1942 to 1945 when Japan occupied the country. It '
 'replaced the Insular Government, a United States territorial government, and '
 'was established by the Tydings–McDuffie Act. The Commonwealth was designed '
 "as a transitional administration in preparation for the country's full "
 'achievement of independence.')
Token length:  95</code></pre>
</div>
</div>
</div>
<p>As noted in the <a href="../knowledge-graph-rag-benchmark-1#claude-tokenization">last post</a>, we’re going to do a little assuming about the Claude 3 Haiku tokenization and say that it’s comparable to the latest OpenAI models – which is why we’re going to get away with using OpenAI’s tokenizer, tiktoken.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
As of this writing, Meta’s Llama 3 was just released and is using OpenAI’s tiktoken (<em>and it’s incredible)</em>
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>We’ll be using LangChain’s <code>RecursiveCharacterTextSplitter</code> to split the text into chunks. It algorithmically uses punctuation to help split the text in order to preserve some sentence structure, so sometimes, the chunks will be smaller than our specified chunk size. For illustrative purposes, the following example will use a chunk size and a chunk overlap different from what we’ll end up using in the pipeline. Two of the paragraphs are split below with a specified chunk size of 20 and an overlap of 5. If you peek into the code, you can see that we’re using our length function as the determinant of splits.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-21">
<div id="cell-21" class="cell" data-tags="[&quot;split_examples&quot;]" data-execution_count="106">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_text_splitters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RecursiveCharacterTextSplitter</span>
<span id="cb3-2"></span>
<span id="cb3-3">text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter(chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, length_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token_len)</span>
<span id="cb3-4">splits0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_text(paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>])</span>
<span id="cb3-5">splits0_tups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token length: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(token_len(s)), s) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> splits0]</span>
<span id="cb3-6">splits1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_text(paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>])</span>
<span id="cb3-7">splits1_tups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token length: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(token_len(s)), s) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> splits1]</span>
<span id="cb3-8"></span>
<span id="cb3-9">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Paragraph 1**'</span>))</span>
<span id="cb3-10">pprint(splits0_tups)</span>
<span id="cb3-11">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Paragraph 2**'</span>))</span>
<span id="cb3-12">display(splits1_tups)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Paragraph 1</strong></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[('Token length: 20',
  'The Commonwealth of the Philippines (; ) was the administrative body that '
  'governed the Philippines from 1935 to'),
 ('Token length: 20',
  'from 1935 to 1946, aside from a period of exile in the Second World War'),
 ('Token length: 20',
  'in the Second World War from 1942 to 1945 when Japan occupied the country. '
  'It'),
 ('Token length: 20',
  'occupied the country. It replaced the Insular Government, a United States '
  'territorial government, and was established'),
 ('Token length: 20',
  'government, and was established by the Tydings–McDuffie Act. The '
  'Commonwealth was designed'),
 ('Token length: 19',
  'The Commonwealth was designed as a transitional administration in '
  "preparation for the country's full achievement of independence.")]</code></pre>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Paragraph 2</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>[('Token length: 18',
  'Lake Oesa is a body of water located at an elevation of 2,267m'),
 ('Token length: 19',
  '2,267m (7438 ft) in the mountains of Yoho National Park, near'),
 ('Token length: 11', 'National Park, near Field, British Columbia, Canada.')]</code></pre>
</div>
</div>
</div>
</section>
<section id="prompting" class="level1 page-columns page-full" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Prompting</h1>
<p>Prompting our model is as simple as loading up the API key as an environmental variable, then instantiating the model with Langchain. We can pass in any text string we want to the model as long as it observes the token limits.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-27">
<div id="cell-27" class="cell" data-tags="[&quot;model_load&quot;]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_anthropic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatAnthropic</span>
<span id="cb6-3"></span>
<span id="cb6-4">load_dotenv()</span>
<span id="cb6-5"></span>
<span id="cb6-6">chat_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatAnthropic(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'claude-3-haiku-20240307'</span>)</span>
<span id="cb6-7">joke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat_model.invoke(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a mid joke about airplanes and horses"</span>)</span>
<span id="cb6-8">display(joke)</span>
<span id="cb6-9">joke.pretty_print()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>AIMessage(content="Here's a mildly silly joke about airplanes and horses:\n\nWhy did the horse refuse to get on the airplane? Because it already had a stable flight plan!", response_metadata={'id': 'msg_01K9jCUru7b4TiBBC6eaWRxf', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'input_tokens': 18, 'output_tokens': 39}}, id='run-2cb963b0-3180-432e-95a7-368169c5bef0-0')</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>================================== Ai Message ==================================

Here's a mildly silly joke about airplanes and horses:

Why did the horse refuse to get on the airplane? Because it already had a stable flight plan!</code></pre>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p><code>dotenv</code> allows us to load environmental variables from a <code>.env</code> file</p>
<p><a href="images/dotenv_ex.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/images/dotenv_ex.jpg" class="img-fluid" width="132"></a></p>
</div></div><p>It’s <em>so over</em> for stand up comedians.</p>
<p>While we can easily pass strings into the LLM call, LangChain provides us with templates, which enable endless composability and modularity, as will be witnessed as we create our fairly elaborate prompts – but first, an illustration of the structure we’ll be using.</p>
<div id="fig-prompts" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-prompts-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="images/prompt_structure.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-2" title="Figure&nbsp;1: Prompt Template Composition"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/images/prompt_structure.png" class="img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-prompts-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Prompt Template Composition
</figcaption>
</figure>
</div>
<p>As witnessed in the above, we’re creating a template out of multiple templates. A <code>System Message</code> is a message sent to an LLM that tells it how to respond, in the style, tone, or format of your choosing; it primes it with an ‘identity’. The <code>Human Message</code> is the message you send to the LLM after you prime it with a system message. Do you actually need to differentiate between them? <strong>Meh</strong>. In my experience it makes no difference and I haven’t seen any testing to suggest otherwise, but in the case that future models start to take the distinction more seriously, we should continue using it. LLMs which function as chat models tend to be able to take a series of messages through their APIs, which LangChain is helping us facilitate.</p>
<p>Lets decompose the components of <code>gen_template</code>, the main template we’ll be using in our pipeline.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The difference between a prompt and a template is the fact that a template can contain {<em>placeholder variables</em>} which can be replaced in our pipeline, as you will see.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="graph_analyst_template" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="graph_analyst_template"><span class="header-section-number">2.1</span> graph_analyst_template</h2>
<p>This is the main system prompt template. It’s going to inform the LLM of its purpose, the format we expect it to return to us, the format of what we send to it, and any history we want it to take into account when generating its response.</p>
<section id="instructions-pydantic-and-json-schema-magic" class="level3" data-number="2.1.1">
<h3 data-number="2.1.1" class="anchored" data-anchor-id="instructions-pydantic-and-json-schema-magic"><span class="header-section-number">2.1.1</span> Instructions (Pydantic and JSON Schema Magic)</h3>
<p>To programatically build a knowledge graph, the output of the LLM will have to be very specific and in a format we can easily process. Foundational models like Claude 3 excel at processing code and various formatted specifications. The specification that’s of interest to us is the <a href="https://json-schema.org">JSON Schema</a>, which is designed to describe the structure of JSON data. <a href="https://json-schema.org/learn/json-schema-examples">Here</a> are some examples of this specification. It describes the fields, their types, and any particular data structures you need in your JSON.</p>
<p>I trust you’ve perused the examples and are not too stoked to write all of that out yourself. Well, you won’t have to because we can express the same thing in a cleaner pythonic format using the <a href="https://docs.pydantic.dev/latest/">Pydantic library</a> – it makes structured outputs a breeze. In fact, there are entire libraries, like <a href="https://github.com/jxnl/instructor">Instructor</a> that are centered on using Pydantic to generate structured output from LLMs that help you validate the output against the schema specification.</p>
<p>The nodes and edges we need to construct for the knowledge graph aren’t overly complex, but they do have their nuances and enough moving parts to warrant a systemic approach to their production.</p>
<div id="fig-node-edge" class="preview-image quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-node-edge-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/node_edge.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;2: The node-edge structure we construct from the outputs."><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/images/node_edge.png" class="preview-image img-fluid figure-img" width="665"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-node-edge-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: The node-edge structure we construct from the outputs.
</figcaption>
</figure>
</div>
<p>Each individual node has an identifier, a category, a variable number of attributes, the source text it was created from, and an identifier of the paragraph it was created from taken from the dataset itself. The LLM won’t have to generate all of the properties, as the paragraph ID is simply taken from the paragraph that creates it; in fact, it can probably be a list of IDs where that particular node is referenced. The edges are a degree simpler, as they just need a category, some attributes, and the nodes which they connect.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pydantic, along with a similar sort of workflow can be generalized for structured extraction of any sort with LLMs. You define the JSON structure, feed the LLM a passage, and it extracts the fields you specified. This is a complete game-changer for machine learning and feature generation(much more exciting than chatbots, IMO).
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>Below, you’ll see each class represent a distinct JSON object, with the fields and instructions that the model will receive. By using the <code>BaseModel</code> superclass😎, we can create Pydantic classes with the following syntax:</p>
<div style="max-height: 800px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-28">
<div id="cell-28" class="cell" data-tags="[&quot;pydantic&quot;]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict, List, Union, Tuple, Optional</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Node(BaseModel):</span>
<span id="cb9-6">    semantic_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The unique identifier of the node that is </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                             a reference to create edges between different nodes."</span>)</span>
<span id="cb9-8">    category: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The category of the node"</span>)</span>
<span id="cb9-9">    attributes: Optional[Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Additional properties of the node"</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Edge(BaseModel):</span>
<span id="cb9-12">    from_node: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The id of the node from which the edge originates. Only previously generated semantic_ids belong here, nothing else."</span>)</span>
<span id="cb9-13">    to_node: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The id of the node to which the edge connects. Only previously generated semantic_ids belong here, nothing else."</span>)</span>
<span id="cb9-14">    category: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The type of the relationship"</span>)</span>
<span id="cb9-15">    attributes: Optional[Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Additional properties of the edge"</span>)</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Graph(BaseModel):</span>
<span id="cb9-18">    nodes: List[Node] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(...,description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of nodes in the graph"</span>)</span>
<span id="cb9-19">    edges: List[Edge] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(...,description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of edges in the graph"</span>)</span>
<span id="cb9-20"></span>
<span id="cb9-21">Graph.model_json_schema()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>{'$defs': {'Edge': {'properties': {'from_node': {'description': 'The id of the node from which the edge originates. Only previously generated semantic_ids belong here, nothing else.',
     'title': 'From Node',
     'type': 'string'},
    'to_node': {'description': 'The id of the node to which the edge connects. Only previously generated semantic_ids belong here, nothing else.',
     'title': 'To Node',
     'type': 'string'},
    'category': {'description': 'The type of the relationship',
     'title': 'Category',
     'type': 'string'},
    'attributes': {'anyOf': [{'additionalProperties': {'anyOf': [{'type': 'string'},
         {'type': 'integer'},
         {'type': 'boolean'}]},
       'type': 'object'},
      {'type': 'null'}],
     'default': None,
     'description': 'Additional properties of the edge',
     'title': 'Attributes'}},
   'required': ['from_node', 'to_node', 'category'],
   'title': 'Edge',
   'type': 'object'},
  'Node': {'properties': {'semantic_id': {'description': 'The unique identifier of the node that is                              a reference to create edges between different nodes.',
     'title': 'Semantic Id',
     'type': 'string'},
    'category': {'description': 'The category of the node',
     'title': 'Category',
     'type': 'string'},
    'attributes': {'anyOf': [{'additionalProperties': {'anyOf': [{'type': 'string'},
         {'type': 'integer'},
         {'type': 'boolean'}]},
       'type': 'object'},
      {'type': 'null'}],
     'default': None,
     'description': 'Additional properties of the node',
     'title': 'Attributes'}},
   'required': ['semantic_id', 'category'],
   'title': 'Node',
   'type': 'object'}},
 'properties': {'nodes': {'description': 'A list of nodes in the graph',
   'items': {'$ref': '#/$defs/Node'},
   'title': 'Nodes',
   'type': 'array'},
  'edges': {'description': 'A list of edges in the graph',
   'items': {'$ref': '#/$defs/Edge'},
   'title': 'Edges',
   'type': 'array'}},
 'required': ['nodes', 'edges'],
 'title': 'Graph',
 'type': 'object'}</code></pre>
</div>
</div>
</div>
</div>
<p>The Graph class is the ultimate class we’re using to generate the JSON schema. It combines the Node and Edge classes into lists, as we want the final output to be a collection of nodes and the edges that connect them. <code>model_json_schema()</code> outputs the JSON schema of the format we want the LLM to return.</p>
<p>It may be worthwhile to read through the fields and their descriptions carefully, and mind the <code>semantic_id</code> in the <code>Node</code> class; its purpose is to allow the LLM to use that identifier in the <code>from_node</code> and <code>to_node</code> fields of the edges.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
You can <em>probably</em> use Pydantic classes to describe the JSON output we need without even generating the JSON schema. Such is the magic of LLMs.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>In addition to our fancy JSON schema generated with Pydantic, which already includes some descriptions of the fields, we need to pass in some instructions.</p>
<div style="max-height: 500px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-29">
<div id="cell-29" class="cell" data-tags="[&quot;json_instructions&quot;]" data-execution_count="109">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">json_rules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""We need to create a JSON object that contains a list of nodes and edges that connect the nodes.</span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Both, nodes and edges, have optional attributes.</span></span>
<span id="cb11-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Your goal is to extract as much pertinent information from the passage as possible and create nodes and edges with the extracted information.</span></span>
<span id="cb11-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If history is provided, it will be in the JSON schema you are given. You may create new connections between the nodes and edges in the history and the new nodes you are producing.</span></span>
<span id="cb11-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If you wish to change/update any of the node attributes in the provided history based on newly gathered information, simply reuse the semantic_ids of the nodes you wish to change.</span></span>
<span id="cb11-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If you wish to modify/update the edge attributes in the history, reuse the semantic_ids of the 'from' and 'to' nodes of any edge you wish to change.</span></span>
<span id="cb11-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Use the following schema and make sure to read the descriptions:</span></span>
<span id="cb11-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span> </span>
<span id="cb11-10"></span>
<span id="cb11-11">json_prompt_instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-12">    json_rules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-13">    json.dumps(Graph.model_json_schema()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-----</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-15"></span>
<span id="cb11-16">pprint(json_prompt_instructions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('We need to create a JSON object that contains a list of nodes and edges that '
 'connect the nodes.\n'
 'Both, nodes and edges, have optional attributes.\n'
 'Your goal is to extract as much pertinent information from the passage as '
 'possible and create nodes and edges with the extracted information.\n'
 'If history is provided, it will be in the JSON schema you are given. You may '
 'create new connections between the nodes and edges in the history and the '
 'new nodes you are producing.\n'
 'If you wish to change/update any of the node attributes in the provided '
 'history based on newly gathered information, simply reuse the semantic_ids '
 'of the nodes you wish to change.\n'
 'If you wish to modify/update the edge attributes in the history, reuse the '
 "semantic_ids of the 'from' and 'to' nodes of any edge you wish to change.\n"
 'Use the following schema and make sure to read the descriptions:\n'
 '{"$defs": {"Edge": {"properties": {"from_node": {"description": "The id of '
 'the node from which the edge originates. Only previously generated '
 'semantic_ids belong here, nothing else.", "title": "From Node", "type": '
 '"string"}, "to_node": {"description": "The id of the node to which the edge '
 'connects. Only previously generated semantic_ids belong here, nothing '
 'else.", "title": "To Node", "type": "string"}, "category": {"description": '
 '"The type of the relationship", "title": "Category", "type": "string"}, '
 '"attributes": {"anyOf": [{"additionalProperties": {"anyOf": [{"type": '
 '"string"}, {"type": "integer"}, {"type": "boolean"}]}, "type": "object"}, '
 '{"type": "null"}], "default": null, "description": "Additional properties of '
 'the edge", "title": "Attributes"}}, "required": ["from_node", "to_node", '
 '"category"], "title": "Edge", "type": "object"}, "Node": {"properties": '
 '{"semantic_id": {"description": "The unique identifier of the node that '
 'is                              a reference to create edges between '
 'different nodes.", "title": "Semantic Id", "type": "string"}, "category": '
 '{"description": "The category of the node", "title": "Category", "type": '
 '"string"}, "attributes": {"anyOf": [{"additionalProperties": {"anyOf": '
 '[{"type": "string"}, {"type": "integer"}, {"type": "boolean"}]}, "type": '
 '"object"}, {"type": "null"}], "default": null, "description": "Additional '
 'properties of the node", "title": "Attributes"}}, "required": '
 '["semantic_id", "category"], "title": "Node", "type": "object"}}, '
 '"properties": {"nodes": {"description": "A list of nodes in the graph", '
 '"items": {"$ref": "#/$defs/Node"}, "title": "Nodes", "type": "array"}, '
 '"edges": {"description": "A list of edges in the graph", "items": {"$ref": '
 '"#/$defs/Edge"}, "title": "Edges", "type": "array"}}, "required": ["nodes", '
 '"edges"], "title": "Graph", "type": "object"}\n'
 '-----\n')</code></pre>
</div>
</div>
</div>
</div>
<p>This prompt states that if a history of nodes and edges is provided, then the LLM is at liberty to reuse those semantic ids in order to modify their respective nodes and edges. Doing this allows for the knowledge graph to grow more dynamically as it processes more information.</p>
<p>For example, if we have two separate chunks of text that the LLM is exposed to at different times, considering that there is some adjacency between the processing of the passages, since we won’t keep the entire history of nodes and edges in the context window.</p>
<blockquote class="blockquote">
<p>Fido ran over the bridge</p>
</blockquote>
<p>and</p>
<blockquote class="blockquote">
<p>Fido was hungry and stole a donut.</p>
</blockquote>
<p>The <code>semantic_id</code> that identifies Fido would persist, so that the particular entity wouldn’t be duplicated.</p>
<div id="fig-fido" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-fido-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/fido.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Figure&nbsp;3: The semantic id allows for continuity of the entity ‘Fido’"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/images/fido.png" class="img-fluid figure-img" width="526"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-fido-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: The semantic id allows for continuity of the entity ‘Fido’
</figcaption>
</figure>
</div>
</section>
<section id="content" class="level3" data-number="2.1.2">
<h3 data-number="2.1.2" class="anchored" data-anchor-id="content"><span class="header-section-number">2.1.2</span> Content</h3>
<p>In addition to the JSON formatting instructions, we give the model some high-level guidance. The placeholders are included as <code>{instructions}</code> where the previously constructed JSON instructions will go, and <code>history</code> where past nodes and edges will be inserted – the format isn’t critical, but we’ll stick to the JSON schema we’re using for the output.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-30">
<div id="cell-30" class="cell" data-tags="[&quot;graph_creator&quot;]" data-execution_count="112">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">graph_creator_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a brilliant and efficient creator of JSON objects that capture the essence of passages and who follows instructions unbelievably well.</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will be first given instructions and a json schema, then you will be provided a passage to extract the information from.</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will only respond with valid JSON, nothing else.</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Your instructions are:</span></span>
<span id="cb13-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{instructions}</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">History:</span></span>
<span id="cb13-8"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{history}</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
</div>
</section>
</section>
<section id="pass_passage_template" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="pass_passage_template"><span class="header-section-number">2.2</span> pass_passage_template</h2>
<p>The human message portion of this template consists of something as simple as:</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-31">
<div id="cell-31" class="cell" data-tags="[&quot;pass_passage&quot;]" data-execution_count="110">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pass_passage_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Below is the passage to extract the values from.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*****</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Passage:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{passage}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
</div>
<p>where <code>{passage]</code> is our placeholder for the chunk(s) of text we grab from our paragraphs.</p>
</section>
<section id="combining-the-prompt-templates" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="combining-the-prompt-templates"><span class="header-section-number">2.3</span> Combining the Prompt Templates</h2>
<p>To create our Langchain pipeline, we wrap the templates we created in <code>SystemMessagePromptTemplate</code> and <code>HumanMessagePromptTemplate</code> classes, and then combine them into <code>gen_template</code>.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-32">
<div id="cell-32" class="cell" data-tags="[&quot;template_agg&quot;]" data-execution_count="113">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb15-2">    HumanMessagePromptTemplate,</span>
<span id="cb15-3">    SystemMessagePromptTemplate,</span>
<span id="cb15-4">)</span>
<span id="cb15-5"></span>
<span id="cb15-6">graph_analyst_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SystemMessagePromptTemplate.from_template(template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>graph_creator_content,</span>
<span id="cb15-7">                                                                   input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'history'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instructions'</span>])</span>
<span id="cb15-8">pass_passage_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HumanMessagePromptTemplate.from_template(pass_passage_content, input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passage'</span>])</span>
<span id="cb15-9"></span>
<span id="cb15-10">gen_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> graph_analyst_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pass_passage_template</span>
<span id="cb15-11"></span>
<span id="cb15-12">gen_template.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passage'</span>: paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>],</span>
<span id="cb15-13">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'history'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,</span>
<span id="cb15-14">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instructions'</span>: json_prompt_instructions})</span>
<span id="cb15-15"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>ChatPromptValue(messages=[SystemMessage(content='You are a brilliant and efficient creator of JSON objects that capture the essence of passages and who follows instructions unbelievably well.\nYou will be first given instructions and a json schema, then you will be provided a passage to extract the information from.\nYou will only respond with valid JSON, nothing else.\nYour instructions are:\nWe need to create a JSON object that contains a list of nodes and edges that connect the nodes.\nBoth, nodes and edges, have optional attributes.\nYour goal is to extract as much pertinent information from the passage as possible and create nodes and edges with the extracted information.\nIf history is provided, it will be in the JSON schema you are given. You may create new connections between the nodes and edges in the history and the new nodes you are producing.\nIf you wish to change/update any of the node attributes in the provided history based on newly gathered information, simply reuse the semantic_ids of the nodes you wish to change.\nIf you wish to modify/update the edge attributes in the history, reuse the semantic_ids of the \'from\' and \'to\' nodes of any edge you wish to change.\nUse the following schema and make sure to read the descriptions:\n{"$defs": {"Edge": {"properties": {"from_node": {"description": "The id of the node from which the edge originates. Only previously generated semantic_ids belong here, nothing else.", "title": "From Node", "type": "string"}, "to_node": {"description": "The id of the node to which the edge connects. Only previously generated semantic_ids belong here, nothing else.", "title": "To Node", "type": "string"}, "category": {"description": "The type of the relationship", "title": "Category", "type": "string"}, "attributes": {"anyOf": [{"additionalProperties": {"anyOf": [{"type": "string"}, {"type": "integer"}, {"type": "boolean"}]}, "type": "object"}, {"type": "null"}], "default": null, "description": "Additional properties of the edge", "title": "Attributes"}}, "required": ["from_node", "to_node", "category"], "title": "Edge", "type": "object"}, "Node": {"properties": {"semantic_id": {"description": "The unique identifier of the node that is                              a reference to create edges between different nodes.", "title": "Semantic Id", "type": "string"}, "category": {"description": "The category of the node", "title": "Category", "type": "string"}, "attributes": {"anyOf": [{"additionalProperties": {"anyOf": [{"type": "string"}, {"type": "integer"}, {"type": "boolean"}]}, "type": "object"}, {"type": "null"}], "default": null, "description": "Additional properties of the node", "title": "Attributes"}}, "required": ["semantic_id", "category"], "title": "Node", "type": "object"}}, "properties": {"nodes": {"description": "A list of nodes in the graph", "items": {"$ref": "#/$defs/Node"}, "title": "Nodes", "type": "array"}, "edges": {"description": "A list of edges in the graph", "items": {"$ref": "#/$defs/Edge"}, "title": "Edges", "type": "array"}}, "required": ["nodes", "edges"], "title": "Graph", "type": "object"}\n-----\n\nHistory:\n\n'), HumanMessage(content="Below is the passage to extract the values from.\n*****\nPassage:\nThe Commonwealth of the Philippines (; ) was the administrative body that governed the Philippines from 1935 to 1946, aside from a period of exile in the Second World War from 1942 to 1945 when Japan occupied the country. It replaced the Insular Government, a United States territorial government, and was established by the Tydings–McDuffie Act. The Commonwealth was designed as a transitional administration in preparation for the country's full achievement of independence.")])</code></pre>
</div>
</div>
</div>
<p><code>invoke</code> is a generic command in Langchain’s expression language(LCEL) which can be applied to many of the Langchain elements in order to ‘trigger’ them. This makes the interface quite simple when building chains of elements and extending the types of elements that are available to your custom chains by implementing your own classes that contain the <code>invoke</code> method(and others).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Generally, we can use <a href="https://python.langchain.com/docs/modules/model_io/prompts/partial/">partial_variables</a> within the prompt templates in order to not have to pass in the json_prompt_instructions on each invocation – but a recent Langchain update(langchain == 0.1.16) did us wrong and broke that for quite a few templates.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
</section>
<section id="knowledge-graph-generation-without-history" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Knowledge Graph Generation (Without History)</h1>
<p>We now, more or less, have the components necessary to give knowledge graph generation a first go. Development is generally iterative so we’ll leave out the history aspect of it for the time being.</p>
<p>We now will take a gander at the LCEL in action:</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-34">
<div id="cell-34" class="cell" data-tags="[&quot;test1&quot;]" data-execution_count="117">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">load_dotenv()</span>
<span id="cb17-2"></span>
<span id="cb17-3">chat_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatAnthropic(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'claude-3-haiku-20240307'</span>)</span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># json_output_parser = JsonOutputParser()</span></span>
<span id="cb17-5"></span>
<span id="cb17-6">llm_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> chat_model</span></code></pre></div>
</div>
</div>
<p>That’s all there is to it. We pipe(<code>|</code>) the output from invoking the <code>gen_template</code> straight to the <code>chat_model</code> which also gets invoked.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-35">
<div id="cell-35" class="cell" data-tags="[&quot;test2&quot;]" data-execution_count="118">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm_pipe.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passage'</span>: paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>],</span>
<span id="cb18-2">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'history'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,</span>
<span id="cb18-3">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instructions'</span>: json_prompt_instructions})</span></code></pre></div>
</div>
</div>
<p><code>llm_pipe</code> is passed the same arguments that <code>gen_template</code> would’ve been.</p>
<div style="max-height: 400px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-36">
<div id="cell-36" class="cell" data-tags="[&quot;response_contents&quot;]" data-execution_count="119">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">pprint(response.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('{\n'
 '  "nodes": [\n'
 '    {\n'
 '      "semantic_id": "commonwealth_of_the_philippines",\n'
 '      "category": "administrative_body",\n'
 '      "attributes": {\n'
 '        "name": "Commonwealth of the Philippines",\n'
 '        "government_period": "1935 to 1946",\n'
 '        "purpose": "transitional administration in preparation for '
 'independence"\n'
 '      }\n'
 '    },\n'
 '    {\n'
 '      "semantic_id": "insular_government",\n'
 '      "category": "territorial_government",\n'
 '      "attributes": {\n'
 '        "name": "Insular Government",\n'
 '        "governed_by": "United States"\n'
 '      }\n'
 '    },\n'
 '    {\n'
 '      "semantic_id": "japan",\n'
 '      "category": "country",\n'
 '      "attributes": {\n'
 '        "name": "Japan",\n'
 '        "occupied_the_philippines": "1942 to 1945"\n'
 '      }\n'
 '    },\n'
 '    {\n'
 '      "semantic_id": "tydings_mcduffie_act",\n'
 '      "category": "legislation",\n'
 '      "attributes": {\n'
 '        "name": "Tydings–McDuffie Act",\n'
 '        "established": "Commonwealth of the Philippines"\n'
 '      }\n'
 '    }\n'
 '  ],\n'
 '  "edges": [\n'
 '    {\n'
 '      "from_node": "insular_government",\n'
 '      "to_node": "commonwealth_of_the_philippines",\n'
 '      "category": "replaced"\n'
 '    },\n'
 '    {\n'
 '      "from_node": "commonwealth_of_the_philippines",\n'
 '      "to_node": "japan",\n'
 '      "category": "occupied_by",\n'
 '      "attributes": {\n'
 '        "period": "1942 to 1945"\n'
 '      }\n'
 '    },\n'
 '    {\n'
 '      "from_node": "tydings_mcduffie_act",\n'
 '      "to_node": "commonwealth_of_the_philippines",\n'
 '      "category": "established"\n'
 '    }\n'
 '  ]\n'
 '}')</code></pre>
</div>
</div>
</div>
</div>
<p>Would you look at that, it did what we told it to, and it cost less than a penny. However, it’s still a string, so we need to convert it into a more amiable format.</p>
<div id="parsed_output_example" style="max-height: 400px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-37">
<div id="cell-37" class="cell" data-tags="[&quot;json_parsed&quot;]" data-execution_count="120">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JsonOutputParser</span>
<span id="cb21-2"></span>
<span id="cb21-3">json_output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JsonOutputParser()</span>
<span id="cb21-4">json_output_parser.invoke(response)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>{'nodes': [{'semantic_id': 'commonwealth_of_the_philippines',
   'category': 'administrative_body',
   'attributes': {'name': 'Commonwealth of the Philippines',
    'government_period': '1935 to 1946',
    'purpose': 'transitional administration in preparation for independence'}},
  {'semantic_id': 'insular_government',
   'category': 'territorial_government',
   'attributes': {'name': 'Insular Government',
    'governed_by': 'United States'}},
  {'semantic_id': 'japan',
   'category': 'country',
   'attributes': {'name': 'Japan',
    'occupied_the_philippines': '1942 to 1945'}},
  {'semantic_id': 'tydings_mcduffie_act',
   'category': 'legislation',
   'attributes': {'name': 'Tydings–McDuffie Act',
    'established': 'Commonwealth of the Philippines'}}],
 'edges': [{'from_node': 'insular_government',
   'to_node': 'commonwealth_of_the_philippines',
   'category': 'replaced'},
  {'from_node': 'commonwealth_of_the_philippines',
   'to_node': 'japan',
   'category': 'occupied_by',
   'attributes': {'period': '1942 to 1945'}},
  {'from_node': 'tydings_mcduffie_act',
   'to_node': 'commonwealth_of_the_philippines',
   'category': 'established'}]}</code></pre>
</div>
</div>
</div>
</div>
<p>Using Langchain’s <code>JsonOutputParser</code> allows us to easily convert the JSON string into a Python dictionary object. We’re once again calling <code>invoke</code> which means it could easily be inserted into our pipeline:</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-39">
<div id="cell-39" class="cell" data-tags="[&quot;whole_pipe&quot;]" data-execution_count="122">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">llm_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> chat_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> json_output_parser</span></code></pre></div>
</div>
</div>
<p>Before assuming that the output would be correctly structured JSON string, we needed to see it for ourselves. If the output from <code>gen_template | chat_model</code> ended up anything else other than a JSON string that our parser can handle, we would’ve received an unfortunate error.</p>
<p>Generally speaking, if you have a prompt that plays ball with an LLM of your choosing, you’re fairly safe when it comes to receiving the structured output in the subsequent calls. However, it is a best practice to involve a failsafe that can retry the process in the even of failure. The failsafe method can involve something as simple as sending the faulty output along with a string that describes your desired output back into the LLM for re-evaluation. For instance:</p>
<pre><code>You didn't output the proper JSON format. Please try again.
This was your output:
{output}</code></pre>
<p>We can skip that for now, and see how robust our pipeline really is. Risk it for the biscuit. <sub><sup>🙏</sup></sub></p>
<section id="visualization-with-rustworkx" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="visualization-with-rustworkx"><span class="header-section-number">3.1</span> Visualization with rustworkx</h2>
<p>The easiest way to visualize our newly-formed knowledge graph is by using a network graph library; in our case, I’ve chosen <a href="https://www.rustworkx.org/index.html">rustworkx</a>. It’s a Python library that allows for the creation, manipulation, and rendering of directed graphs. If you’re familiar with networkx, then the syntax will be very similar, however the performance is a magnitude faster given that all of the internal goodies are written in Rust.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-42">
<div id="cell-42" class="cell" data-tags="[&quot;base_graph_viz&quot;]" data-execution_count="246">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rustworkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> rx</span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rustworkx.visualization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mpl_draw</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directed graph</span></span>
<span id="cb25-5">digraph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rx.PyDiGraph()</span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add nodes to the graph</span></span>
<span id="cb25-8">node_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb25-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nodes_edges_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodes"</span>]:</span>
<span id="cb25-10">    idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> digraph.add_node(node)</span>
<span id="cb25-11">    node_indices[node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"semantic_id"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx</span>
<span id="cb25-12"></span>
<span id="cb25-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add edges to the graph</span></span>
<span id="cb25-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> edge <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nodes_edges_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"edges"</span>]:</span>
<span id="cb25-15">    from_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_indices[edge[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from_node"</span>]]</span>
<span id="cb25-16">    to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_indices[edge[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to_node"</span>]]</span>
<span id="cb25-17">    digraph.add_edge(from_idx, to_idx, edge)</span>
<span id="cb25-18"></span>
<span id="cb25-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the graph with labels based on node and edge categories</span></span>
<span id="cb25-20">mpl_draw(digraph, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb25-21">         labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> node: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attributes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb25-22">         edge_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> edge: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>edge[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>edge<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attributes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb25-23">         font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/..-knowledge-graph-rag-benchmark-1-notebooks-kg_build-cell-35-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index_files/figure-html/..-knowledge-graph-rag-benchmark-1-notebooks-kg_build-cell-35-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</div>
<p>It ain’t pretty, but it’s honest work.</p>
<p>To create the graph, we use a dictionary to map the node <code>semantic_id</code> to the generated node index which is output when we create a new node. Then to create edges, that mapping is used to convert the <code>semantic_id</code> to the index.</p>
</section>
</section>
<section id="knowledge-graph-generation-with-history" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Knowledge Graph Generation (With History)</h1>
<section id="history-management" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="history-management"><span class="header-section-number">4.1</span> History Management</h2>
<p>When it comes to managing the history of nodes and edges, there is a tiny bit of overhead involved. We need to:</p>
<ul>
<li><p>Keep track of the generated nodes and edges and thusly provide them with unique identifiers</p></li>
<li><p>Add new edges and nodes to the history</p></li>
<li><p>Update edges and nodes if the LLM makes changes to them</p></li>
<li><p>Return a string representation of the nodes and edges to our pipeline using a specified token limit dependent on the context size</p></li>
</ul>
<p>To do this, we will create a magnificent <code>GraphHistory</code> class that manages this storage and retrieval.</p>
<p>(Unfolding the code not for the faint of heart)</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-44">
<div id="cell-44" class="cell" data-tags="[&quot;history_class&quot;]" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb26-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging.config</span>
<span id="cb26-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> param</span>
<span id="cb26-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrderedDict</span>
<span id="cb26-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> copy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deepcopy</span>
<span id="cb26-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> uuid <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uuid4</span>
<span id="cb26-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb26-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union, List, Dict</span>
<span id="cb26-9"></span>
<span id="cb26-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../logs/logging_config.json'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb26-11">    config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(f)</span>
<span id="cb26-12">logging.config.dictConfig(config)</span>
<span id="cb26-13">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'root'</span>)</span>
<span id="cb26-14"></span>
<span id="cb26-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GraphHistory(param.Parameterized):</span>
<span id="cb26-16">    nodes_alias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> param.String(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>)</span>
<span id="cb26-17">    edges_alias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> param.String(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span>)</span>
<span id="cb26-18">    history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> param.Dict(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OrderedDict())</span>
<span id="cb26-19">    latest_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> param.Dict(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OrderedDict(),</span>
<span id="cb26-20">        doc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generated when get_history_str is run; contains {uuid: {nodes|edges: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{object}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">} mapping. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb26-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            Meant to be used for managing the current history window and modifications"</span>)</span>
<span id="cb26-22">    latest_history_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> param.Dict(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OrderedDict(),</span>
<span id="cb26-23">        doc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maps semantic_id to uuid for the latest history items as well as the node pairs to an edge uuid"</span>)</span>
<span id="cb26-24">    token_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> param.Integer(default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb26-25">    </span>
<span id="cb26-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_history(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, new_items: Union[List, Dict], return_with_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb26-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Nodes are added directly to the history with their UUIDs. </span></span>
<span id="cb26-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Edges are added only after their 'from_node' and 'to_node' fields are set to the corresponding</span></span>
<span id="cb26-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        node UUIDs. This ensures that edges reference the correct nodes in the graph.</span></span>
<span id="cb26-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb26-32">        new_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deepcopy(new_items)</span>
<span id="cb26-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(new_items, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb26-34">            new_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [new_items]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure new_items is always a list for consistency</span></span>
<span id="cb26-35">        history_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb26-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> new_items:</span>
<span id="cb26-37">            item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> item <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.edges_alias</span>
<span id="cb26-38">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Makes it easier to work with the inner dict of {nodes|edges: {*inner_dict*}}</span></span>
<span id="cb26-39">            item_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[item_type]</span>
<span id="cb26-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handling nodes</span></span>
<span id="cb26-41">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If node exists in latest_history, we want to modify it and move it to the bottom in history</span></span>
<span id="cb26-42">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No need to add to latest_history, since it won't be used since item exists in it already, and will be reset on next get_history_str call</span></span>
<span id="cb26-43">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping:</span>
<span id="cb26-44">                    uuid_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>]]</span>
<span id="cb26-45">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history[uuid_gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item</span>
<span id="cb26-46">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history.move_to_end(uuid_gen)</span>
<span id="cb26-47">                    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Node exists in latest_history, moving to end of history: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uuid_gen<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-48">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb26-49">                    uuid_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uuid4()</span>
<span id="cb26-50">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history[uuid_gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item</span>
<span id="cb26-51">                    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Added node to history: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(uuid_gen)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-52">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history[uuid_gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item</span>
<span id="cb26-53">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uuid_gen</span>
<span id="cb26-54">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> return_with_uuid:</span>
<span id="cb26-55">                    history_list.append((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(uuid_gen), item))</span>
<span id="cb26-56">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb26-57">                    history_list.append(item)</span>
<span id="cb26-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handling edges</span></span>
<span id="cb26-59">                from_semantic_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>]</span>
<span id="cb26-60">                to_semantic_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>]</span>
<span id="cb26-61">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure 'from_node' and 'to_node' reference the correct UUIDs from the recently added nodes</span></span>
<span id="cb26-62">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Add exception handling for when the LLM thinks that a node exists when it doesn't. Try, except</span></span>
<span id="cb26-63">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb26-64">                    item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[from_semantic_id]</span>
<span id="cb26-65">                    item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[to_semantic_id]</span>
<span id="cb26-66">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span>:</span>
<span id="cb26-67">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"KeyError: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>from_semantic_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> or </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>to_semantic_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found in latest_history_mapping"</span>)</span>
<span id="cb26-68">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb26-69">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the edge is in the latest history according to its from and to nodes, then we update it</span></span>
<span id="cb26-70">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (from_to_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span>(item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>], item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>])) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping:</span>
<span id="cb26-71">                    uuid_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[from_to_tuple]</span>
<span id="cb26-72">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history[uuid_gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item</span>
<span id="cb26-73">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history.move_to_end(uuid_gen)</span>
<span id="cb26-74">                    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Edge exists in latest_history_mapping, moving to end of history: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uuid_gen<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-75">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb26-76">                    uuid_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uuid4()</span>
<span id="cb26-77">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history[uuid_gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item</span>
<span id="cb26-78">                    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Added edge to history: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(uuid_gen)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-79">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> return_with_uuid:</span>
<span id="cb26-80">                    history_list.append((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(uuid_gen), item))</span>
<span id="cb26-81">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb26-82">                    history_list.append(item)</span>
<span id="cb26-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> deepcopy(history_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(history_list) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> deepcopy(history_list)</span>
<span id="cb26-84">    </span>
<span id="cb26-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_history_window(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, token_max: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb26-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> token_max <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb26-87">            token_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token_max  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use default token_max if not specified</span></span>
<span id="cb26-88">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history.clear()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the latest history for a fresh start</span></span>
<span id="cb26-89">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping.clear()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Also clear the latest history mapping</span></span>
<span id="cb26-90">        logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cleared latest_history_mapping and latest_history"</span>)</span>
<span id="cb26-91">        token_tracking <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb26-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> uuid, item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history.items()):</span>
<span id="cb26-93">            item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> item <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.edges_alias</span>
<span id="cb26-94">            item_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[item_type]</span>
<span id="cb26-95">            token_tracking <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> token_len(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._item_to_json_str(deepcopy(item)))</span>
<span id="cb26-96">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> token_tracking <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> token_max:</span>
<span id="cb26-97">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history[uuid] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update latest_history with the current item</span></span>
<span id="cb26-98">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias:</span>
<span id="cb26-99">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uuid  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update latest_history_mapping</span></span>
<span id="cb26-100">                    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Added node to latest_history_mapping: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-101">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.edges_alias:</span>
<span id="cb26-102">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history_mapping[(item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>], item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>])] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uuid</span>
<span id="cb26-103">                    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Added edge to latest_history_mapping: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-104">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb26-105">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop adding items if token_max is reached</span></span>
<span id="cb26-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> deepcopy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latest_history)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the history as a string</span></span>
<span id="cb26-107"></span>
<span id="cb26-108">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _item_to_json_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, item):</span>
<span id="cb26-109">        item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> item <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.edges_alias</span>
<span id="cb26-110">        item_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[item_type]</span>
<span id="cb26-111">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.edges_alias:</span>
<span id="cb26-112">            item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history[item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>]][<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>]</span>
<span id="cb26-113">            item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history[item_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>]][<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nodes_alias][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span>]</span>
<span id="cb26-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json.dumps(item_dict)</span>
<span id="cb26-115">            </span>
<span id="cb26-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_history_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, token_max: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb26-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns a history string based on the token length specification and updates the latest_history</span></span>
<span id="cb26-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb26-120">        latest_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_history_window(token_max)</span>
<span id="cb26-121">        json_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb26-122">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> uuid, item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> latest_history.items():</span>
<span id="cb26-123">            json_list.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._item_to_json_str(item))</span>
<span id="cb26-124">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> json_list:</span>
<span id="cb26-125">            json_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(json_list)</span>
<span id="cb26-126">            logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"JSON History string created: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>json_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-127">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_str</span></code></pre></div>
</details>
</div>
</div>
<p>The code above addresses the bullets representing our requirements, however, there are some messy workarounds where we skip creating edges when it imagines node names. The ideal handling of this would involve rerunning the generation and feeding it the error, but we’re going to wing it and skip this for better or worse. The mistaken identity shouldn’t be very common, but it <em>can</em> occur.</p>
</section>
</section>
<section id="putting-it-all-together" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Putting it All Together</h1>
<p>Now that we have an ability to store and inject history into our pipeline, we’re ready to go.</p>
<p>We’re iterating over all of the paragraphs, and then splitting each paragraph with the <code>RecursiveCharacterTextSplitter</code>.</p>
<p>Some things to note about our new pipeline before you dive in:</p>
<ol type="1">
<li>The JSON parser is now wrapped with a special <code>OutputFixingParser</code> class from Langchain that in the event of an error like a <code>JSONDecodeError</code>, it sends that error back to the LLM and tries to generate the correct format. Experimenting with Claude 3 Haiku has led me to add that, as it had generated faulty JSON(unlike GPT 3.5). This gives more credence to the user stories claiming that Claude 3 is more buddy-buddy with XML over JSON.</li>
<li>A way to handle the <code>RateLimitError</code> exception was added, in the event that the <a href="https://docs.anthropic.com/claude/reference/rate-limits">API complains</a> when we generate too many nodes and edges back to back. All it takes is waiting a minute before retrying.</li>
<li>The <code>paragraph_idx</code> is added to the nodes to indicate which paragraph it was generated from.</li>
<li>The nodes and edges we generate are stored in <code>graph_history</code>, which is a list of objects similar to what we generated here, but with UUIDs for unique identification(the <code>semantic_id</code> generated may, by chance alone, be the same)</li>
</ol>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-46">
<div id="cell-46" class="cell" data-tags="[&quot;history_pipe&quot;]" data-execution_count="128">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> json <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JSONDecodeError</span>
<span id="cb27-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> anthropic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RateLimitError</span>
<span id="cb27-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OutputFixingParser</span>
<span id="cb27-6"></span>
<span id="cb27-7">splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter(chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, length_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token_len)</span>
<span id="cb27-8"></span>
<span id="cb27-9">json_fixing_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OutputFixingParser.from_llm(parser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json_output_parser, llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chat_model, max_retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb27-10"></span>
<span id="cb27-11">llm_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> chat_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> json_fixing_parser</span>
<span id="cb27-12">graph_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GraphHistory()</span>
<span id="cb27-13"></span>
<span id="cb27-14">graph_components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> paragraph <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> paragraphs:</span>
<span id="cb27-16">    splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> splitter.split_text(paragraph[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>])</span>
<span id="cb27-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> split <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> splits:</span>
<span id="cb27-18">        local_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> graph_history.get_history_str(token_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)</span>
<span id="cb27-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb27-20">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm_pipe.invoke(</span>
<span id="cb27-21">                {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passage'</span>: split,</span>
<span id="cb27-22">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'history'</span>: local_history,</span>
<span id="cb27-23">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instructions'</span>: json_prompt_instructions})</span>
<span id="cb27-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> RateLimitError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb27-25">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span>
<span id="cb27-26">            time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait for a minute</span></span>
<span id="cb27-27">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm_pipe.invoke(</span>
<span id="cb27-28">                {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passage'</span>: split,</span>
<span id="cb27-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'history'</span>: local_history,</span>
<span id="cb27-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instructions'</span>: json_prompt_instructions})</span>
<span id="cb27-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb27-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response:</span>
<span id="cb27-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>]:</span>
<span id="cb27-34">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'semantic_id'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> node:</span>
<span id="cb27-35">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb27-36">                node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_idx'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> paragraph[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'idx'</span>]</span>
<span id="cb27-37">                graph_history.add_history({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>: node}, return_with_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb27-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response:</span>
<span id="cb27-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> edge <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span>]:</span>
<span id="cb27-40">                graph_history.add_history({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span>: edge}, return_with_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb27-41"></span>
<span id="cb27-42">        graph_components.append(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>KeyError: silver-lake or minnewawa-brook not found in latest_history_mapping
KeyError: minnewawa-brook or the-branch not found in latest_history_mapping
KeyError: the-branch or ashuelot-river not found in latest_history_mapping
KeyError: ashuelot-river or connecticut-river not found in latest_history_mapping</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>KeyError: veteran-banker or treasury not found in latest_history_mapping</code></pre>
</div>
</div>
</div>
<div style="max-height: 400px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-48">
<div id="cell-48" class="cell" data-tags="[&quot;graph_components&quot;]" data-execution_count="50">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">graph_history.history</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>OrderedDict([(UUID('acc73dc0-d5ae-499e-8cc4-63f70f2d935f'),
              {'nodes': {'semantic_id': 'insular_government',
                'category': 'political_entity',
                'attributes': {'name': 'Insular Government',
                 'description': 'A United States territorial government that was replaced by the Commonwealth of the Philippines.'}}}),
             (UUID('38d26bc0-e096-4524-945a-77b9e4ae0f49'),
              {'nodes': {'semantic_id': 'commonwealth_of_the_philippines',
                'category': 'political_entity',
                'attributes': {'name': 'Commonwealth of the Philippines',
                 'years_active': '1935 to 1946',
                 'description': 'The administrative body that governed the Philippines during this period, except for a period of exile from 1942 to 1945 when Japan occupied the country.'}}}),
             (UUID('9555e806-1679-4bc0-99d7-55717f21bdef'),
              {'nodes': {'semantic_id': 'tydings_mcduffie_act',
                'category': 'legal_document',
                'attributes': {'name': 'Tydings–McDuffie Act',
                 'description': "The act that established the Commonwealth of the Philippines as a transitional administration in preparation for the country's full achievement of independence."}}}),
             (UUID('90d9b404-119e-4b31-a0cf-ad102105687f'),
              {'edges': {'from_node': UUID('acc73dc0-d5ae-499e-8cc4-63f70f2d935f'),
                'to_node': UUID('38d26bc0-e096-4524-945a-77b9e4ae0f49'),
                'category': 'replaced'}}),
             (UUID('2cdca930-c9f5-4d65-8da0-4fcc351ac2d0'),
              {'edges': {'from_node': UUID('9555e806-1679-4bc0-99d7-55717f21bdef'),
                'to_node': UUID('38d26bc0-e096-4524-945a-77b9e4ae0f49'),
                'category': 'established'}}),
             (UUID('c7120f30-4152-4e88-bec1-698bfdd2d5e1'),
              {'nodes': {'semantic_id': 'lake_oesa',
                'category': 'natural_feature',
                'attributes': {'name': 'Lake Oesa',
                 'elevation': 2267,
                 'elevation_unit': 'm',
                 'location': {'park': 'Yoho National Park',
                  'city': 'Field',
                  'province': 'British Columbia',
                  'country': 'Canada'}}}}),
             (UUID('7c83cf46-05fc-491d-9667-20acf68fe70f'),
              {'nodes': {'semantic_id': 'arafura_swamp',
                'category': 'natural_feature',
                'attributes': {'name': 'Arafura Swamp',
                 'type': 'inland freshwater wetland',
                 'location': {'region': 'Arnhem Land',
                  'territory': 'Northern Territory',
                  'country': 'Australia'},
                 'size': {'area': {'value': None, 'unit': 'km2'},
                  'expansion_during_wet_season': True},
                 'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia',
                 'cultural_significance': 'of great cultural significance to the Yolngu people, in particular the Ramingining community',
                 'filming_location': 'Ten Canoes'}}}),
             (UUID('f39070c7-1d59-4d1b-a4a4-c8a18c222f85'),
              {'nodes': {'semantic_id': 'wapizagonke_lake',
                'category': 'natural_feature',
                'attributes': {'name': 'Wapizagonke Lake',
                 'type': 'body of water',
                 'location': {'sector': 'Lac-Wapizagonke',
                  'city': 'Shawinigan',
                  'park': 'La Mauricie National Park',
                  'region': 'Mauricie',
                  'province': 'Quebec',
                  'country': 'Canada'}}}}),
             (UUID('9a8a31e6-d311-4085-845d-48ae33707b51'),
              {'nodes': {'semantic_id': 'amursky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Amursky District',
                 'country': 'Russia',
                 'region': 'Khabarovsk Krai'}}}),
             (UUID('f85fb9ae-7e0f-46b2-b039-63ee01e6ce5d'),
              {'nodes': {'semantic_id': 'khabarovsky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Khabarovsky District',
                 'country': 'Russia',
                 'region': 'Khabarovsk Krai',
                 'area': None,
                 'area_unit': None,
                 'administrative_center': 'Khabarovsk'}}}),
             (UUID('21425234-233f-4f40-b6b3-98e818755151'),
              {'edges': {'from_node': UUID('f85fb9ae-7e0f-46b2-b039-63ee01e6ce5d'),
                'to_node': UUID('9a8a31e6-d311-4085-845d-48ae33707b51'),
                'category': 'separated_by'}}),
             (UUID('43464202-f216-469b-94d2-8ca7ad3d92f1'),
              {'nodes': {'semantic_id': 'silver_lake',
                'category': 'natural_feature',
                'attributes': {'name': 'Silver Lake',
                 'type': 'body of water',
                 'location': {'county': 'Cheshire County',
                  'state': 'New Hampshire',
                  'country': 'United States',
                  'towns': ['Harrisville', 'Nelson']},
                 'outflows': ['Minnewawa Brook', 'The Branch'],
                 'ultimate_recipient': 'Connecticut River'}}}),
             (UUID('f938374c-ec1e-49b0-b049-91257d6ae64d'),
              {'nodes': {'semantic_id': 'hyderabad_police_area',
                'category': 'administrative_district',
                'attributes': {'name': 'Hyderabad Police area',
                 'jurisdiction_size': 'smallest'}}}),
             (UUID('595a2f04-abae-4845-b45c-6df6a8ed9ab5'),
              {'nodes': {'semantic_id': 'hyderabad_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Hyderabad district',
                 'jurisdiction_size': 'second_smallest'}}}),
             (UUID('b3beb831-6954-4ca9-87f3-052767e60856'),
              {'edges': {'from_node': UUID('f938374c-ec1e-49b0-b049-91257d6ae64d'),
                'to_node': UUID('595a2f04-abae-4845-b45c-6df6a8ed9ab5'),
                'category': 'jurisdiction_size_hierarchy'}}),
             (UUID('252323ba-7590-4b55-ae43-e6b9da12ff9e'),
              {'edges': {'from_node': UUID('595a2f04-abae-4845-b45c-6df6a8ed9ab5'),
                'to_node': UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),
                'category': 'jurisdiction_size_hierarchy'}}),
             (UUID('723c0ccc-8f09-43ad-bbcf-97b08d5c1bd8'),
              {'edges': {'from_node': UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),
                'to_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),
                'category': 'jurisdiction_size_hierarchy'}}),
             (UUID('4c681f75-6f72-4771-831a-4aa16149195a'),
              {'nodes': {'semantic_id': 'hmda_area',
                'category': 'administrative_district',
                'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area',
                 'jurisdiction_size': 'largest',
                 'type': 'urban_planning_agency',
                 'apolitical': True,
                 'covers': ['ghmc_area', 'suburbs_of_ghmc_area']}}}),
             (UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),
              {'nodes': {'semantic_id': 'ghmc_area',
                'category': 'administrative_district',
                'attributes': {'name': 'GHMC area',
                 'jurisdiction_size': 'second_largest',
                 'alternate_name': 'Hyderabad city'}}}),
             (UUID('90c5ce53-79aa-4aaf-a27d-7400e6ac1c08'),
              {'nodes': {'semantic_id': 'suburbs_of_ghmc_area',
                'category': 'administrative_district',
                'attributes': {'name': 'Suburbs of GHMC area',
                 'jurisdiction_size': 'medium',
                 'type': 'residential'}}}),
             (UUID('9a4b69f8-749a-4b7c-a3e3-e2db4f3823d1'),
              {'nodes': {'semantic_id': 'hmwssb',
                'category': 'administrative_body',
                'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage Board',
                 'type': 'water_management'}}}),
             (UUID('c48817dd-b382-4db9-ad18-d3e2190cdcf5'),
              {'edges': {'from_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),
                'to_node': UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),
                'category': 'jurisdiction_size_hierarchy'}}),
             (UUID('4b64fe19-941d-44ce-8cd0-8f94f503dea5'),
              {'edges': {'from_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),
                'to_node': UUID('90c5ce53-79aa-4aaf-a27d-7400e6ac1c08'),
                'category': 'jurisdiction_size_hierarchy'}}),
             (UUID('268f7e8f-a2c7-4a83-94b9-24baeca1be73'),
              {'edges': {'from_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),
                'to_node': UUID('9a4b69f8-749a-4b7c-a3e3-e2db4f3823d1'),
                'category': 'manages'}}),
             (UUID('7956f84b-20a8-4836-ae7a-c7311d716cd1'),
              {'nodes': {'semantic_id': 'san_juan',
                'category': 'city',
                'attributes': {'name': 'San Juan',
                 'location': {'country': 'Puerto Rico',
                  'region': 'north-eastern coast'},
                 'borders': {'north': 'Atlantic Ocean',
                  'south': ['Caguas', 'Trujillo Alto'],
                  'east': ['Carolina'],
                  'west': ['Guaynabo']},
                 'area': {'value': 76.93, 'unit': 'square miles'},
                 'water_bodies': ['San Juan Bay',
                  'Condado Lagoon',
                  'San José Lagoon'],
                 'water_area': {'value': 29.11,
                  'unit': 'square miles',
                  'percentage': 37.83}}}}),
             (UUID('75abfc38-a7ea-4db7-9c2b-5dddaf51c493'),
              {'nodes': {'semantic_id': 'urban_hinterland',
                'category': 'administrative_district',
                'attributes': {'name': 'Urban hinterland',
                 'type': 'urban_area'}}}),
             (UUID('6f12633f-2502-4467-a29c-ebe5b0699810'),
              {'nodes': {'semantic_id': 'kreisfreie_stadte',
                'category': 'administrative_district',
                'attributes': {'name': 'Kreisfreie Städte',
                 'type': 'district-free_city_or_town'}}}),
             (UUID('e7748608-55fe-4ad2-b17a-83af70f4fc73'),
              {'nodes': {'semantic_id': 'landkreise_amalgamation',
                'category': 'administrative_district',
                'attributes': {'name': 'Local associations of a special kind',
                 'type': 'amalgamation_of_districts',
                 'purpose': 'simplification_of_administration'}}}),
             (UUID('0114478c-292d-43e4-940c-349f0b8d8060'),
              {'edges': {'from_node': UUID('6f12633f-2502-4467-a29c-ebe5b0699810'),
                'to_node': UUID('75abfc38-a7ea-4db7-9c2b-5dddaf51c493'),
                'category': 'grouping'}}),
             (UUID('9c504b5a-98b9-4620-9d56-0c18fe35005f'),
              {'edges': {'from_node': UUID('e7748608-55fe-4ad2-b17a-83af70f4fc73'),
                'to_node': UUID('75abfc38-a7ea-4db7-9c2b-5dddaf51c493'),
                'category': 'comprises'}}),
             (UUID('6b27c2fc-9694-4f6e-b61c-425360f1c8f7'),
              {'edges': {'from_node': UUID('e7748608-55fe-4ad2-b17a-83af70f4fc73'),
                'to_node': UUID('6f12633f-2502-4467-a29c-ebe5b0699810'),
                'category': 'comprises'}}),
             (UUID('7715b916-5807-45f4-8408-2770897a7581'),
              {'nodes': {'semantic_id': 'norfolk_island',
                'category': 'island',
                'attributes': {'name': 'Norfolk Island',
                 'location': {'ocean': 'South Pacific Ocean',
                  'relative_location': 'east of Australian mainland'},
                 'coordinates': {'latitude': -29.033, 'longitude': 167.95},
                 'area': {'value': 34.6, 'unit': 'square kilometres'},
                 'coastline': {'length': 32, 'unit': 'km'},
                 'highest_point': 'Mount Bates'}}}),
             (UUID('0db9008a-ae7e-4e32-a7b3-ae5c7d8f93d2'),
              {'edges': {'from_node': UUID('7715b916-5807-45f4-8408-2770897a7581'),
                'to_node': UUID('48a3d3e7-34c1-4a64-93ba-72a6108b3e57'),
                'category': 'part_of'}}),
             (UUID('48a3d3e7-34c1-4a64-93ba-72a6108b3e57'),
              {'nodes': {'semantic_id': 'phillip_island',
                'category': 'island',
                'attributes': {'name': 'Phillip Island',
                 'location': {'relation': 'second largest island of the territory',
                  'coordinates': {'latitude': -29.117, 'longitude': 167.95},
                  'distance_from_main_island': {'value': 7,
                   'unit': 'kilometres'}}}}}),
             (UUID('52ec31ee-9fc6-42a1-9e6c-daf0ea0a9390'),
              {'edges': {'from_node': UUID('48a3d3e7-34c1-4a64-93ba-72a6108b3e57'),
                'to_node': UUID('7715b916-5807-45f4-8408-2770897a7581'),
                'category': 'part_of'}}),
             (UUID('08f207c1-6915-4237-ac4e-902815d9cfae'),
              {'nodes': {'semantic_id': 'star_stadium',
                'category': 'stadium',
                'attributes': {'name': 'Star (Zvezda) Stadium',
                 'former_name': 'Lenin Komsomol Stadium',
                 'location': {'city': 'Perm', 'country': 'Russia'},
                 'usage': 'football matches',
                 'home_team': 'FC Amkar Perm',
                 'capacity': 17000,
                 'opened': '1969-06-05'}}}),
             (UUID('5be79bf7-cd2a-487f-8833-36ae11257df8'),
              {'nodes': {'semantic_id': 'perm',
                'category': 'city',
                'attributes': {'name': 'Perm',
                 'location': {'river': 'Kama River',
                  'region': 'Perm Krai',
                  'country': 'Russia',
                  'geography': 'European part of Russia near the Ural Mountains'},
                 'administrative_status': 'administrative centre'}}}),
             (UUID('e9a848ba-35b3-42e4-b9e6-aa0ea8651d92'),
              {'edges': {'from_node': UUID('08f207c1-6915-4237-ac4e-902815d9cfae'),
                'to_node': UUID('5be79bf7-cd2a-487f-8833-36ae11257df8'),
                'category': 'located_in'}}),
             (UUID('57c8adca-9dcc-4257-be85-bfb48eacd310'),
              {'nodes': {'semantic_id': 'paea',
                'category': 'municipality',
                'attributes': {'name': 'Paea',
                 'location': {'island': 'Tahiti',
                  'subdivision': 'Windward Islands',
                  'region': 'Society Islands',
                  'country': 'French Polynesia',
                  'territory': 'France'},
                 'population': 13021}}}),
             (UUID('62866902-6285-4c38-98b0-7496dbe73fd3'),
              {'nodes': {'semantic_id': 'potamogeton_amplifolius',
                'category': 'plant',
                'attributes': {'common_names': ['largeleaf pondweed',
                  'broad-leaved pondweed'],
                 'habitat': ['lakes', 'ponds', 'rivers'],
                 'water_depth': 'often in deep water',
                 'distribution': 'North America'}}}),
             (UUID('0da6e66c-64c6-4155-bb6f-88e1b0c9a349'),
              {'nodes': {'semantic_id': 'soltonsky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Soltonsky District',
                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),
             (UUID('2bdd9668-a653-4815-bcde-f43dcf5ff4a5'),
              {'nodes': {'semantic_id': 'krasnogorsky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Krasnogorsky District',
                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),
             (UUID('e9620276-009f-4f5a-99b6-b41d93fbe791'),
              {'nodes': {'semantic_id': 'sovetsky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Sovetsky District',
                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),
             (UUID('4bdbb329-0688-4621-9c67-e1af0e8d57fe'),
              {'nodes': {'semantic_id': 'smolensky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Smolensky District',
                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),
             (UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),
              {'nodes': {'semantic_id': 'biysky_district',
                'category': 'administrative_district',
                'attributes': {'name': 'Biysky District',
                 'location': {'region': 'Altai Krai',
                  'country': 'Russia',
                  'geography': 'east of the krai'},
                 'administrative_status': 'administrative and municipal district (raion)',
                 'bordering_districts': ['Soltonsky_district',
                  'Krasnogorsky_district',
                  'Sovetsky_district',
                  'Smolensky_district',
                  'City_of_Biysk']}}}),
             (UUID('a375ae9a-9282-4916-9e6b-02da8a824e3f'),
              {'nodes': {'semantic_id': 'city_of_biysk',
                'category': 'city',
                'attributes': {'name': 'Biysk',
                 'location': {'region': 'Altai Krai', 'country': 'Russia'},
                 'administrative_status': 'administrative center'}}}),
             (UUID('6674891e-b1e6-4c85-9821-54b4a7fd923a'),
              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),
                'to_node': UUID('0da6e66c-64c6-4155-bb6f-88e1b0c9a349'),
                'category': 'bordering'}}),
             (UUID('5f81b958-60c6-40a5-8bea-9fdacae9f671'),
              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),
                'to_node': UUID('2bdd9668-a653-4815-bcde-f43dcf5ff4a5'),
                'category': 'bordering'}}),
             (UUID('8077d42e-5e70-44dd-aade-c764087f139f'),
              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),
                'to_node': UUID('e9620276-009f-4f5a-99b6-b41d93fbe791'),
                'category': 'bordering'}}),
             (UUID('abe4eb3e-0a01-48f2-b97d-67a30519a4d3'),
              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),
                'to_node': UUID('4bdbb329-0688-4621-9c67-e1af0e8d57fe'),
                'category': 'bordering'}}),
             (UUID('a27a6ceb-536d-4dbe-9798-e5d86e9755c6'),
              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),
                'to_node': UUID('a375ae9a-9282-4916-9e6b-02da8a824e3f'),
                'category': 'bordering'}}),
             (UUID('3d2af122-d4b9-47f1-a034-c9f23e262e14'),
              {'nodes': {'semantic_id': 'contoocook_lake',
                'category': 'lake',
                'attributes': {'name': 'Contoocook Lake',
                 'location': {'county': 'Cheshire County',
                  'state': 'New Hampshire',
                  'country': 'United States',
                  'towns': ['Jaffrey', 'Rindge']},
                 'connection': {'to': 'pool_pond',
                  'type': 'forms_headwaters_of'},
                 'outflow': {'to': 'contoocook_river', 'direction': 'north'},
                 'outflow_destination': 'merrimack_river'}}}),
             (UUID('1eafa7a8-a830-4472-8b32-c071159c8140'),
              {'nodes': {'semantic_id': 'pool_pond',
                'category': 'lake',
                'attributes': {'name': 'Pool Pond',
                 'connection': {'to': 'contoocook_lake',
                  'type': 'forms_headwaters_of'}}}}),
             (UUID('f841df5f-a4ff-4a6b-8656-1458252aca37'),
              {'edges': {'from_node': UUID('3d2af122-d4b9-47f1-a034-c9f23e262e14'),
                'to_node': UUID('1eafa7a8-a830-4472-8b32-c071159c8140'),
                'category': 'forms_headwaters_of'}}),
             (UUID('d50d66d9-c89d-4c0a-9c61-fa4e856ab2c2'),
              {'edges': {'from_node': UUID('3d2af122-d4b9-47f1-a034-c9f23e262e14'),
                'to_node': UUID('56ae1a37-74f4-486b-b517-34b99027ba36'),
                'category': 'outflows_to'}}),
             (UUID('56ae1a37-74f4-486b-b517-34b99027ba36'),
              {'nodes': {'semantic_id': 'contoocook_river',
                'category': 'river',
                'attributes': {'name': 'Contoocook River',
                 'flow_direction': 'north',
                 'outflow_destination': 'merrimack_river'}}}),
             (UUID('0c92123d-fbc3-47e7-b752-65df1d6680c0'),
              {'nodes': {'semantic_id': 'merrimack_river',
                'category': 'river',
                'attributes': {'name': 'Merrimack River',
                 'location': {'city': 'Penacook',
                  'state': 'New Hampshire',
                  'country': 'United States'}}}}),
             (UUID('6e9b6a2d-926e-4b20-97ab-d8bb217a5029'),
              {'edges': {'from_node': UUID('56ae1a37-74f4-486b-b517-34b99027ba36'),
                'to_node': UUID('0c92123d-fbc3-47e7-b752-65df1d6680c0'),
                'category': 'flows_into'}}),
             (UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
              {'nodes': {'semantic_id': 'bogota',
                'category': 'city',
                'attributes': {'name': 'Bogotá',
                 'pronunciation': {'english': ['/ˈboʊɡəˌtɑː/',
                   '/ˌboʊ-/',
                   '/ˈbɔɪ-/'],
                  'spanish': 'boˈɣota'},
                 'official_name': 'Bogotá',
                 'administration': 'Capital District'}}}),
             (UUID('adc293cf-401b-49b6-928d-ada04da0e4bf'),
              {'nodes': {'semantic_id': 'political_center',
                'category': 'function',
                'attributes': {'name': 'political center',
                 'location': 'Bogotá'}}}),
             (UUID('108added-3b0f-4b67-9e28-fce89a168e46'),
              {'nodes': {'semantic_id': 'economic_center',
                'category': 'function',
                'attributes': {'name': 'economic center',
                 'location': 'Bogotá'}}}),
             (UUID('7fad3f22-d955-4f54-a1e2-5683bf4639e8'),
              {'nodes': {'semantic_id': 'administrative_center',
                'category': 'function',
                'attributes': {'name': 'administrative center',
                 'location': 'Bogotá'}}}),
             (UUID('404e8a42-e9e9-4081-9890-669ba48d1b36'),
              {'nodes': {'semantic_id': 'industrial_center',
                'category': 'function',
                'attributes': {'name': 'industrial center',
                 'location': 'Bogotá'}}}),
             (UUID('8b80ba4f-77b2-4ee6-8548-a66108963fb7'),
              {'nodes': {'semantic_id': 'artistic_center',
                'category': 'function',
                'attributes': {'name': 'artistic center',
                 'location': 'Bogotá'}}}),
             (UUID('056f1544-f292-4506-ba8d-18d6e294d433'),
              {'nodes': {'semantic_id': 'cultural_center',
                'category': 'function',
                'attributes': {'name': 'cultural center',
                 'location': 'Bogotá'}}}),
             (UUID('d747fcf6-5b60-4595-a127-f3e247cbb8a3'),
              {'nodes': {'semantic_id': 'sports_center',
                'category': 'function',
                'attributes': {'name': 'sports center',
                 'location': 'Bogotá'}}}),
             (UUID('59719cce-5c68-47cf-8111-481c74e73c3b'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('8ad7ae8e-ed3a-415f-8d0e-a8984bd7717e'),
                'category': 'capital_of'}}),
             (UUID('0bc7053b-2183-41df-995a-faecd919ad45'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('5576789f-9306-4a82-8736-882db81abdf2'),
                'category': 'part_of'}}),
             (UUID('73230839-050b-4ace-9dd1-7927b1bd1034'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('adc293cf-401b-49b6-928d-ada04da0e4bf'),
                'category': 'functions_as'}}),
             (UUID('04b8ded0-c2c1-441f-b7f7-069b05f80338'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('108added-3b0f-4b67-9e28-fce89a168e46'),
                'category': 'functions_as'}}),
             (UUID('0a86d51a-bd57-4a63-b494-08075a2bcb4a'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('7fad3f22-d955-4f54-a1e2-5683bf4639e8'),
                'category': 'functions_as'}}),
             (UUID('58c0a891-5c05-48e5-ba2a-1c230b588997'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('404e8a42-e9e9-4081-9890-669ba48d1b36'),
                'category': 'functions_as'}}),
             (UUID('5bad3267-dceb-4067-8d02-bc8c748d50d3'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('8b80ba4f-77b2-4ee6-8548-a66108963fb7'),
                'category': 'functions_as'}}),
             (UUID('d80bed21-cd68-454d-a142-223fb30d5db6'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('056f1544-f292-4506-ba8d-18d6e294d433'),
                'category': 'functions_as'}}),
             (UUID('6c12a6ad-244d-4d7e-8c25-f3a6288967fb'),
              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),
                'to_node': UUID('d747fcf6-5b60-4595-a127-f3e247cbb8a3'),
                'category': 'functions_as'}}),
             (UUID('87517804-e5a2-44d9-82bd-23b4e33c2a40'),
              {'nodes': {'semantic_id': 'bogota',
                'category': 'city',
                'attributes': {'name': 'Bogotá',
                 'functions': ['political center',
                  'economic center',
                  'administrative center',
                  'industrial center',
                  'artistic center',
                  'cultural center',
                  'sports center']}}}),
             (UUID('8ad7ae8e-ed3a-415f-8d0e-a8984bd7717e'),
              {'nodes': {'semantic_id': 'colombia',
                'category': 'country',
                'attributes': {'name': 'Colombia',
                 'capital': 'Bogotá',
                 'status': 'capital and largest city'}}}),
             (UUID('5576789f-9306-4a82-8736-882db81abdf2'),
              {'nodes': {'semantic_id': 'cundinamarca',
                'category': 'region',
                'attributes': {'name': 'Cundinamarca',
                 'relation_to_bogota': 'often thought of as part of'}}}),
             (UUID('af6b4ebf-7c7c-4dd0-a58e-ab8c292eaf7c'),
              {'edges': {'from_node': UUID('87517804-e5a2-44d9-82bd-23b4e33c2a40'),
                'to_node': UUID('8ad7ae8e-ed3a-415f-8d0e-a8984bd7717e'),
                'category': 'capital_of'}}),
             (UUID('3265632a-4065-46c4-82cf-527b3d4abc13'),
              {'edges': {'from_node': UUID('87517804-e5a2-44d9-82bd-23b4e33c2a40'),
                'to_node': UUID('5576789f-9306-4a82-8736-882db81abdf2'),
                'category': 'part_of'}}),
             (UUID('d97d057d-2564-427d-9703-e77a61ff58c7'),
              {'nodes': {'semantic_id': 'intracellular_fluid',
                'category': 'fluid',
                'attributes': {'name': 'intracellular fluid',
                 'volume': '2/3 of body water',
                 'amount_in_72_kg_body': '25 litres',
                 'percentage_of_total_body_fluid': 62.5}}}),
             (UUID('380f506f-c2cf-453e-879f-fb58b3f3d1db'),
              {'nodes': {'semantic_id': 'body_fluid',
                'category': 'fluid',
                'attributes': {'name': 'body fluid',
                 'total_volume_in_72_kg_body': '40 litres'}}}),
             (UUID('1b0bebc1-49a1-419f-bfb2-d50cffeed740'),
              {'edges': {'from_node': UUID('d97d057d-2564-427d-9703-e77a61ff58c7'),
                'to_node': UUID('380f506f-c2cf-453e-879f-fb58b3f3d1db'),
                'category': 'part_of'}}),
             (UUID('6e5f08dc-fe95-4b74-884d-dcce8470290a'),
              {'nodes': {'semantic_id': 'territorial_waters',
                'category': 'geographic_area',
                'attributes': {'name': 'territorial waters',
                 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state',
                 'source': '1982 United Nations Convention on the Law of the Sea'}}}),
             (UUID('443e77c0-cff1-43e4-89f2-ba748d4421a1'),
              {'edges': {'from_node': UUID('6e5f08dc-fe95-4b74-884d-dcce8470290a'),
                'to_node': UUID('d5019515-a9d9-4d23-89cf-dac81f7d96ea'),
                'category': 'extends_from'}}),
             (UUID('58b64eae-e6c2-47f1-8916-eaf1dcc87e6b'),
              {'edges': {'from_node': UUID('6e5f08dc-fe95-4b74-884d-dcce8470290a'),
                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),
                'category': 'belongs_to'}}),
             (UUID('7b534168-d2e7-498e-9115-5e21d6c638f3'),
              {'nodes': {'semantic_id': 'territorial_sea',
                'category': 'geographic_area',
                'attributes': {'name': 'territorial sea',
                 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state',
                 'sovereign_territory': True,
                 'foreign_ship_passage': 'innocent passage through it or transit passage for straits',
                 'jurisdiction': 'extends to airspace over and seabed below'}}}),
             (UUID('d5019515-a9d9-4d23-89cf-dac81f7d96ea'),
              {'nodes': {'semantic_id': 'baseline',
                'category': 'geographic_feature',
                'attributes': {'name': 'baseline',
                 'definition': 'usually the mean low-water mark of a coastal state'}}}),
             (UUID('11903999-15a7-4776-8bae-f1803429147f'),
              {'nodes': {'semantic_id': 'coastal_state',
                'category': 'legal_entity',
                'attributes': {'name': 'coastal state'}}}),
             (UUID('7a93cd6e-7f97-43fa-9054-22d3e4478ecf'),
              {'edges': {'from_node': UUID('7b534168-d2e7-498e-9115-5e21d6c638f3'),
                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),
                'category': 'belongs_to'}}),
             (UUID('4dec6036-1299-4093-ae68-3b6cecc73053'),
              {'edges': {'from_node': UUID('7b534168-d2e7-498e-9115-5e21d6c638f3'),
                'to_node': UUID('d5019515-a9d9-4d23-89cf-dac81f7d96ea'),
                'category': 'extends_from'}}),
             (UUID('d86a7f75-df06-47f1-a30d-67a921d822bf'),
              {'nodes': {'semantic_id': 'strait',
                'category': 'geographic_feature',
                'attributes': {'name': 'strait',
                 'sovereign_territory': True,
                 'jurisdiction': {'airspace': True, 'seabed': True}}}}),
             (UUID('1baf2bf2-6083-481f-8980-d2f9793f58e6'),
              {'nodes': {'semantic_id': 'maritime_delimitation',
                'category': 'legal_concept',
                'attributes': {'name': 'maritime delimitation',
                 'definition': "Adjustment of the boundaries of a coastal state's territorial sea, exclusive economic zone, or continental shelf"}}}),
             (UUID('396cc35f-de5f-4717-9cb5-2cf511456fb2'),
              {'edges': {'from_node': UUID('d86a7f75-df06-47f1-a30d-67a921d822bf'),
                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),
                'category': 'belongs_to'}}),
             (UUID('88b88486-07be-4ae4-8d51-c2d88ca9f125'),
              {'edges': {'from_node': UUID('1baf2bf2-6083-481f-8980-d2f9793f58e6'),
                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),
                'category': 'involves'}}),
             (UUID('d8b37bae-dbdb-49c8-9e35-6c87c902f3f9'),
              {'nodes': {'semantic_id': 'uninsured_depositor',
                'category': 'stakeholder',
                'attributes': {'deposit_amount': '&gt;100,000 Euro',
                 'treatment': 'subject to a bail-in',
                 'new_role': 'new shareholders of the legacy entity'}}}),
             (UUID('7862ab2f-0f92-48af-ba10-12cdac45a10f'),
              {'nodes': {'semantic_id': 'bank_of_cyprus',
                'category': 'organization',
                'attributes': {'name': 'Bank of Cyprus',
                 'size': 'largest banking group in Cyprus',
                 'relation_to_cyprus_popular_bank': "absorbed the 'good' Cypriot part of Cyprus Popular Bank after it was shuttered"}}}),
             (UUID('1c509f8b-300e-47ac-ad62-4dcf675ca11d'),
              {'nodes': {'semantic_id': 'cyprus_popular_bank',
                'category': 'organization',
                'attributes': {'name': 'Cyprus Popular Bank',
                 'previous_name': 'Marfin Popular Bank',
                 'status': 'shuttered in 2013',
                 'size': 'second largest banking group in Cyprus',
                 'parent': 'Bank of Cyprus'}}}),
             (UUID('82b3a659-7692-4909-a812-fc247f97ed6c'),
              {'edges': {'from_node': UUID('d8b37bae-dbdb-49c8-9e35-6c87c902f3f9'),
                'to_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),
                'category': 'holds_deposits'}}),
             (UUID('a80831eb-a3c9-4ad6-a6ba-9db107876050'),
              {'edges': {'from_node': UUID('1c509f8b-300e-47ac-ad62-4dcf675ca11d'),
                'to_node': UUID('7862ab2f-0f92-48af-ba10-12cdac45a10f'),
                'category': 'merged_with'}}),
             (UUID('2d393fc3-fe9b-46dd-90f7-2fadb227fccd'),
              {'nodes': {'semantic_id': 'central_bank_of_cyprus',
                'category': 'organization',
                'attributes': {'name': 'Central Bank of Cyprus',
                 'role': 'Governor and Board members amended the lawyers of the legacy entity without consulting the special administrator'}}}),
             (UUID('87a173a3-a32b-4a36-a1b2-6248a92eb14c'),
              {'nodes': {'semantic_id': 'veteran_banker',
                'category': 'stakeholder',
                'attributes': {'name': 'Chris Pavlou',
                 'expertise': 'Treasury'}}}),
             (UUID('7af74b0b-30ab-44c4-8adf-8e19ecf04a14'),
              {'nodes': {'semantic_id': 'special_administrator',
                'category': 'stakeholder',
                'attributes': {'name': 'Andri Antoniadou',
                 'role': 'ran the legacy entity for two years, from March 2013 until 3 March 2015'}}}),
             (UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),
              {'nodes': {'semantic_id': 'legacy_entity',
                'category': 'organization',
                'attributes': {'description': "the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds",
                 'ownership_stake': '4.8% of Bank of Cyprus',
                 'board_representation': 'does not hold a board seat',
                 'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'}}}),
             (UUID('bfe012be-e584-401f-bd34-f6d147e7831c'),
              {'nodes': {'semantic_id': 'marfin_investment_group',
                'category': 'stakeholder',
                'attributes': {'name': 'Marfin Investment Group',
                 'role': 'former major shareholder of the legacy entity'}}}),
             (UUID('14585bad-087d-4ce7-bbc2-1d89e4cd7548'),
              {'edges': {'from_node': UUID('2d393fc3-fe9b-46dd-90f7-2fadb227fccd'),
                'to_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),
                'category': 'amended_lawyers_without_consulting'}}),
             (UUID('14eb57de-1b12-42b5-8b91-945cdfd08442'),
              {'edges': {'from_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),
                'to_node': UUID('7af74b0b-30ab-44c4-8adf-8e19ecf04a14'),
                'category': 'managed_by'}}),
             (UUID('e367aa2a-74bb-426e-b17c-f4ecf2032e6f'),
              {'edges': {'from_node': UUID('87a173a3-a32b-4a36-a1b2-6248a92eb14c'),
                'to_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),
                'category': 'took_over_as_special_administrator'}}),
             (UUID('1c9504d1-c7e5-4b0b-ad7a-24a03cc9c498'),
              {'edges': {'from_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),
                'to_node': UUID('bfe012be-e584-401f-bd34-f6d147e7831c'),
                'category': 'pursuing_legal_action_against'}})])</code></pre>
</div>
</div>
</div>
</div>
<p>It took ~2 minutes to create generate the <code>graph_history</code>and 43 calls to the LLM.</p>
<p>A speed boost can definitely be had in multiple ways:</p>
<ul>
<li><p>Use a different model. The latest Llama 3 model running on <a href="https://wow.groq.com">Groq</a> infrastructure can yield a 10x speed up in some cases if you use the 8B model. The great thing about using a framework like Langchain is the ease with which you can plug n play different models in your pipelines.</p></li>
<li><p>Increase the chunk size. If the entire paragraph is passed to the LLM, this will cut down on the 43 multiple calls by roughly half in our case.</p></li>
<li><p>In addition to increasing the chunk size, we can pass multiple paragraphs to process at the same time – although this would involve prompting the model to extract some paragraph identification which we currently get for free simply by attaching the <code>idx</code> of each paragraph to the nodes it creates.</p></li>
<li><p><strong>PARALLELIZE IT</strong>(though we may lose some of the history tracking)</p></li>
</ul>
<section id="show-me-the-money" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="show-me-the-money"><span class="header-section-number">5.1</span> Show Me the Money</h2>
<p>Or the knowledge graph. Back to rustworkx we go. Some minor tweaks were made to the visualization code we saw earlier in order for all of the nodes and edges to not be concealed by the <em>massive</em> amounts of text we’ve generated. I’ve left the node categories visible. The graph generation code was modified to work with the the history stored within our <code>graph_history</code> object.</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-49">
<div id="cell-49" class="cell" data-tags="[&quot;paragraphs_viz&quot;]" data-execution_count="172">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rustworkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> rx</span>
<span id="cb32-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rustworkx.visualization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mpl_draw</span>
<span id="cb32-3"></span>
<span id="cb32-4">digraph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rx.PyDiGraph()</span>
<span id="cb32-5"></span>
<span id="cb32-6">node_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through the history to add nodes and edges</span></span>
<span id="cb32-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> uuid, data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> graph_history.history.items():</span>
<span id="cb32-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data:</span>
<span id="cb32-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add node to the graph and store the index with its UUID</span></span>
<span id="cb32-11">        node_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> digraph.add_node(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nodes'</span>])</span>
<span id="cb32-12">        node_indices[uuid] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_index</span>
<span id="cb32-13"></span>
<span id="cb32-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> uuid, data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> graph_history.history.items():</span>
<span id="cb32-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data:</span>
<span id="cb32-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve indices of the from and to nodes using their UUIDs</span></span>
<span id="cb32-17">        from_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_indices.get(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_node'</span>])</span>
<span id="cb32-18">        to_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node_indices.get(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_node'</span>])</span>
<span id="cb32-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> from_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> to_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb32-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add edge to the graph</span></span>
<span id="cb32-21">            digraph.add_edge(from_index, to_index, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edges'</span>])</span>
<span id="cb32-22"></span>
<span id="cb32-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the graph with labels based on node and edge categories</span></span>
<span id="cb32-24">layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rx.digraph_spring_layout(digraph, repulsive_exponent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb32-25">mpl_draw(digraph, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layout,</span>
<span id="cb32-26">         labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> node: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb32-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  edge_labels=lambda edge: f'{edge["category"]}',</span></span>
<span id="cb32-28">         font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/..-knowledge-graph-rag-benchmark-1-notebooks-kg_build-cell-41-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index_files/figure-html/..-knowledge-graph-rag-benchmark-1-notebooks-kg_build-cell-41-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</div>
<p>Messy, but you get the idea.</p>
<p>We can do a little graph analytics to find the most connected nodes(nodes with the most connections). <code>incident_edges(n)</code> identifies the edges of a node with index <code>n</code>, so all we have to do is get the length of the edge list returned and then sort it.</p>
<div style="max-height: 400px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-50">
<div id="cell-50" class="cell" data-tags="[&quot;node_incident_edges&quot;]" data-execution_count="81">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">len_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(digraph.incident_edges(n, all_edges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(digraph.node_indices()))]</span>
<span id="cb33-2">len_list.sort(reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-3">len_list[:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<pre><code>[9,
 5,
 5,
 4,
 4,
 3,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 2,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 0,
 0,
 0,
 0,
 0,
 0,
 0]</code></pre>
</div>
</div>
</div>
</div>
<p>The most connections a single node has is 9, while most nodes merely have a single connection, and a minority of nodes have no connections. Here is said node:</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-54">
<div id="cell-54" class="cell" data-tags="[&quot;chad_nine&quot;]" data-execution_count="71">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rustworkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> rx</span>
<span id="cb35-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rustworkx.visualization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mpl_draw</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming 'graph' is your existing PyDiGraph object</span></span>
<span id="cb35-5">node_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example node index</span></span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get predecessors and successors</span></span>
<span id="cb35-8">predecessors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(digraph.predecessor_indices(node_index))</span>
<span id="cb35-9">successors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(digraph.successor_indices(node_index))</span>
<span id="cb35-10"></span>
<span id="cb35-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Include the original node and ensure uniqueness of nodes</span></span>
<span id="cb35-12">subgraph_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([node_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> predecessors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> successors))</span>
<span id="cb35-13"></span>
<span id="cb35-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the subgraph</span></span>
<span id="cb35-15">subgraph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> digraph.subgraph(subgraph_nodes)</span>
<span id="cb35-16"></span>
<span id="cb35-17"></span>
<span id="cb35-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the graph with labels based on node and edge categories</span></span>
<span id="cb35-19">mpl_draw(subgraph, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb35-20">         labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> node: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attributes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb35-21">         edge_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> edge: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>edge[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb35-22">         font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/..-knowledge-graph-rag-benchmark-1-notebooks-kg_build-cell-46-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index_files/figure-html/..-knowledge-graph-rag-benchmark-1-notebooks-kg_build-cell-46-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</div>
<p>Do recall, our token window is fairly small, with all of 70 tokens, however, we’re using 600 tokens to store the history of generated nodes and edges which are fed back to the model. Perhaps this a good amount of connectivity given these parameters and the fact that only a few paragraphs should have a connection between them, or perhaps not. The lack of quantifiable best practices in a bleeding edge field is 😢sad but expected.</p>
<p>To jog your memory a bit, here is what 70 tokens looks like:</p>
<div id="fig-tokens" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-tokens-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/70_tokens.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Figure&nbsp;4: An example text consisting of 70 tokens"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/images/70_tokens.jpg" class="img-fluid figure-img" width="637"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-tokens-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: An example text consisting of 70 tokens
</figcaption>
</figure>
</div>
</section>
</section>
<section id="wrapping-up" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Wrapping Up</h1>
<p><a href="images/thats_all.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/images/thats_all.gif" class="img-fluid"></a></p>
<p>Well…<strong>almost!</strong></p>
<p>Now that we have a workflow for generating knowledge graphs for questions in the MuSiQue dataset, we can move on to attaching a vector database to it in the <strong>next post</strong>.</p>
<p>Thanks for reading, I hope you managed to stay awake.</p>
<p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html"><strong>Part Three &gt;&gt;&gt;</strong></a></p>


</section>

 ]]></description>
  <category>knowledge-graphs</category>
  <category>rag</category>
  <category>benchmarking</category>
  <guid>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/</guid>
  <pubDate>Sat, 20 Apr 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One</title>
  <dc:creator>Dmitriy Leybel</dc:creator>
  <link>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/</link>
  <description><![CDATA[ 





<p><strong>On the last episode of</strong>: <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html">Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – <em>Part Zero</em></a>:</p>
<ul>
<li><p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#rag">RAG</a> is used to ground LLMs when there are strict sourcing requirements</p></li>
<li><p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#knowledge-graphs">Knowledge graphs</a> have been of great utility in information management across organizations, but not without their problems. They are a very potent tool when coupled with LLMs.</p></li>
<li><p>The <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#musique">MuSiQue benchmark</a> combines many previous RAG benchmarks, with a variable multi-hop answerable/unanswerable dataset.</p></li>
</ul>
<hr>
<section id="what-are-we-predicting" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> What are we predicting?</h1>
<p>First and foremost, if we want to build a knowledge graph to assist us with a certain task, we want to ascertain exactly what the output at the end of this pipeline should look like.</p>
<section id="data-and-prediction-datasets" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="data-and-prediction-datasets"><span class="header-section-number">1.1</span> Data and Prediction Datasets</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
By ‘predictions’, we mean ‘the answers’ and any other expected outputs. It’s a vestige of machine learning vernacular.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>Fortunately for us, the fine folks who’ve created the MuSiQue benchmark have made it simple. They’ve ran several models on the dataset and used them for evaluations. We can find the generated predictions in their <a href="https://github.com/StonyBrookNLP/musique">github repo</a>; this will give us the starting point we need. Lets first look at an example of the input, provided in the data folder(again, from the repo). Note that there is a question, an answer, an answerable flag and a bunch of paragraphs marked whether they support the answer.</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-6">
<div id="cell-6" class="cell" data-tags="[&quot;line_example&quot;]" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> jsonlines.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(musique_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/data/musique_full_v1.0_train.jsonl'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> reader:</span>
<span id="cb1-2">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [reader.read() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)]</span>
<span id="cb1-3">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Line Example**'</span>), pprint(lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>{'answer': 'north',
 'answer_aliases': ['North', 'N'],
 'answerable': True,
 'id': '2hop__269805_135710',
 'paragraphs': [{'idx': 0,
                 'is_supporting': False,
                 'paragraph_text': 'Milton F. Pavlic (1909–1942) was a United '
                                   'States Navy officer killed in action '
                                   'during World War II for whom a U.S. Navy '
                                   'high-speed transport was named.',
                 'title': 'Milton F. Pavlic'},
                {'idx': 1,
                 'is_supporting': False,
                 'paragraph_text': 'Osmund Holm-Hansen (also known as Oz '
                                   'Holm-Hansen) is a Norwegian-born American '
                                   'scientist, for whom Mount Holm-Hansen, in '
                                   'Antarctica is named. A plant physiologist '
                                   'by training, from 1962 Holm-Hansen was the '
                                   'head of polar research at the Scripps '
                                   'Institution of Oceanography.',
                 'title': 'Osmund Holm-Hansen'},
                {'idx': 2,
                 'is_supporting': False,
                 'paragraph_text': '"Sapphire Princess" was built in Japan by '
                                   'Mitsubishi Heavy Industries, the second '
                                   'Princess Cruises ship to be built in a '
                                   'Japanese shipyard. Her only sister ship is '
                                   '"Diamond Princess", with whom she swapped '
                                   'names during construction.',
                 'title': 'Sapphire Princess'},
                {'idx': 3,
                 'is_supporting': False,
                 'paragraph_text': 'Lake Pontchartrain is named for Louis '
                                   'Phélypeaux, comte de Pontchartrain. He was '
                                   'the French Minister of the Marine, '
                                   'Chancellor, and Controller-General of '
                                   "Finances during the reign of France's "
                                   '"Sun King", Louis XIV, for whom the colony '
                                   'of "La Louisiane" was named.',
                 'title': 'Lake Pontchartrain'},
                {'idx': 4,
                 'is_supporting': False,
                 'paragraph_text': 'Henry Crater is a large crater in the '
                                   'Arabia quadrangle of Mars, located at '
                                   '10.9° north latitude and 23.3° east '
                                   'longitude. It is in diameter and was named '
                                   'after the brothers Paul Henry and Prosper '
                                   'Henry, both of whom were French telescope '
                                   'makers and astronomers.',
                 'title': 'Henry (Martian crater)'},
                {'idx': 5,
                 'is_supporting': False,
                 'paragraph_text': 'Where Dead Voices Gather is a book by Nick '
                                   'Tosches. It is, in part, a biography of '
                                   'Emmett Miller, one of the last minstrel '
                                   'singers. Just as importantly, it depicts '
                                   "Tosches' search for information about "
                                   'Miller, about whom he initially wrote in '
                                   'his book "Country: The Twisted Roots of '
                                   'Rock and Roll". It is also a study of '
                                   'minstrelsy and its connection to American '
                                   'folk music, country music, the blues and '
                                   'ultimately, rock and roll. In that way, it '
                                   'is a companion volume to his other books '
                                   'of music journalism, "Country" and "Unsung '
                                   'Heroes of Rock N\' Roll".',
                 'title': 'Where Dead Voices Gather'},
                {'idx': 6,
                 'is_supporting': True,
                 'paragraph_text': 'Norway has a total area of and a '
                                   'population of 5,312,300 (as of August '
                                   '2018). The country shares a long eastern '
                                   'border with Sweden (1,619 km or 1,006\xa0'
                                   'mi long). Norway is bordered by Finland '
                                   'and Russia to the north-east, and the '
                                   'Skagerrak strait to the south, with '
                                   'Denmark on the other side. Norway has an '
                                   'extensive coastline, facing the North '
                                   'Atlantic Ocean and the Barents Sea. The '
                                   "maritime influence also dominates Norway's "
                                   'climate with mild lowland temperatures on '
                                   'the sea coasts, whereas the interior, '
                                   'while colder, also is a lot milder than '
                                   'areas elsewhere in the world on such '
                                   'northerly latitudes. Even during polar '
                                   'night in the north, temperatures above '
                                   'freezing are commonplace on the coastline. '
                                   'The maritime influence brings high '
                                   'rainfall and snowfall to some areas of the '
                                   'country.',
                 'title': 'Norway'},
                {'idx': 7,
                 'is_supporting': False,
                 'paragraph_text': 'The Hireling Shepherd (1851) is a painting '
                                   'by the Pre-Raphaelite artist William '
                                   'Holman Hunt. It represents a shepherd '
                                   'neglecting his flock in favour of an '
                                   'attractive country girl to whom he shows a '
                                   "death's-head hawkmoth. The meaning of the "
                                   'image has been much debated.',
                 'title': 'The Hireling Shepherd'},
                {'idx': 8,
                 'is_supporting': False,
                 'paragraph_text': 'Naissa Mosque is a mosque in Qardaha, '
                                   'along the Syrian coast. It was built in '
                                   '1989 by architect Abdul Rahman Naassan, '
                                   'and funded by the mother of former '
                                   'president Hafez al-Assad, Naissa '
                                   'Assad—after whom the mosque was named. The '
                                   'state funeral of Hafez al-Assad was '
                                   'observed at the mosque.',
                 'title': 'Naissa Mosque'},
                {'idx': 9,
                 'is_supporting': False,
                 'paragraph_text': 'The quick German victory over the French '
                                   'stunned neutral observers, many of whom '
                                   'had expected a French victory and most of '
                                   'whom had expected a long war. The '
                                   'strategic advantages possessed by the '
                                   'Germans were not appreciated outside '
                                   'Germany until after hostilities had '
                                   'ceased. Other countries quickly discerned '
                                   'the advantages given to the Germans by '
                                   'their military system, and adopted many of '
                                   'their innovations, particularly the '
                                   'General Staff, universal conscription and '
                                   'highly detailed mobilization systems.',
                 'title': 'Franco-Prussian War'},
                {'idx': 10,
                 'is_supporting': True,
                 'paragraph_text': 'Tveitsund is a village in Nissedal '
                                   'municipality, Norway. The urban area '
                                   'Tveitsund, which consists of Tveitsund and '
                                   'Treungen, has a population of 361.',
                 'title': 'Tveitsund'},
                {'idx': 11,
                 'is_supporting': False,
                 'paragraph_text': 'John Francis Sheehan (1910–1942) was a '
                                   'United States Navy sailor killed in action '
                                   'during World War II for whom a destroyer '
                                   'escort was named during the war.',
                 'title': 'John Francis Sheehan'},
                {'idx': 12,
                 'is_supporting': False,
                 'paragraph_text': 'Holmes Summit is a peak rising to , the '
                                   'highest elevation in the Read Mountains of '
                                   'the Shackleton Range in Antarctica. It was '
                                   'photographed from the air by the U.S. Navy '
                                   'in 1967 and was surveyed by the British '
                                   'Antarctic Survey in the period 1968–71. In '
                                   'association with the names of geologists '
                                   'grouped in this area, it was named by the '
                                   'UK Antarctic Place-Names Committee in 1971 '
                                   'after Professor Arthur Holmes, after whom '
                                   'the Holmes Hills in Palmer Land were also '
                                   'named.',
                 'title': 'Holmes Summit'},
                {'idx': 13,
                 'is_supporting': False,
                 'paragraph_text': ', better known by her pen name is a '
                                   'Japanese manga artist. She is married to '
                                   'fellow manga artist Tatsuneko, from whom '
                                   'he took the name of . She is a graduate of '
                                   'Mita Senior High School, Tokyo. She '
                                   'currently lives in Setagaya, Tokyo with '
                                   'her husband and daughter.',
                 'title': 'Yun Kōga'},
                {'idx': 14,
                 'is_supporting': False,
                 'paragraph_text': 'The Book of Proper Names () is a Belgian '
                                   'novel by Amélie Nothomb. It was first '
                                   'published in 2002. It is a romanticized '
                                   'account of the life of the singer RoBERT, '
                                   'whom Nothomb became acquainted with as an '
                                   'avid admirer of her songs.',
                 'title': 'The Book of Proper Names'},
                {'idx': 15,
                 'is_supporting': False,
                 'paragraph_text': '653 Berenike is a main-belt asteroid '
                                   'discovered on November 27, 1907, by Joel '
                                   'Hastings Metcalf at Taunton, '
                                   'Massachusetts. It is named after Berenice '
                                   'II of Egypt, after whom the constellation '
                                   'Coma Berenices is also named.',
                 'title': '653 Berenike'},
                {'idx': 16,
                 'is_supporting': False,
                 'paragraph_text': 'orbiting the Sun. It was discovered on 21 '
                                   'February 1906 by August Kopff from '
                                   'Heidelberg. Kopff named the asteroid after '
                                   'a female English student with whom he was '
                                   'acquainted.',
                 'title': '596 Scheila'},
                {'idx': 17,
                 'is_supporting': False,
                 'paragraph_text': 'William M. Hobby (1899–1942), was a United '
                                   'States Navy officer killed in action '
                                   'during World War II for whom a U.S. Navy '
                                   'ship was named.',
                 'title': 'William M. Hobby'},
                {'idx': 18,
                 'is_supporting': False,
                 'paragraph_text': 'The Alma Grace McDonough Health and '
                                   'Recreation Center is a 2,200 seat '
                                   'multipurpose arena and recreation facility '
                                   'on the campus of Wheeling Jesuit '
                                   'University in Wheeling, West Virginia. The '
                                   'building was constructed thanks to a gift '
                                   'from Alma Grace McDonough, whom the '
                                   'building is named after.',
                 'title': 'Alma Grace McDonough Health and Recreation Center'},
                {'idx': 19,
                 'is_supporting': False,
                 'paragraph_text': 'Émile Bertrand (1844–1909) was a French '
                                   'mineralogist, in honour of whom '
                                   'bertrandite was named by Alexis Damour. He '
                                   'also gave his name to the "Bertrand lens" '
                                   'or phase telescope.',
                 'title': 'Émile Bertrand'}],
 'question': 'What is the country where Nissedal is located named after?',
 'question_decomposition': [{'answer': 'Norway',
                             'id': 269805,
                             'paragraph_support_idx': 10,
                             'question': 'Nissedal &gt;&gt; country'},
                            {'answer': 'north',
                             'id': 135710,
                             'paragraph_support_idx': 6,
                             'question': 'The #1 was named for whom?'}]}</code></pre>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Line Example</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
</div>
</div>
</div>
<p>Looking at a snippet of the predictions below, we see that <em>only</em> four factors are necessary, the id - which matches the question id, the answer - which is the answer to the question, the answerable flag - which is a boolean indicating whether the question can be answered, and the supporting facts - which are the paragraphs that support the answer.</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-16">
<div id="cell-16" class="cell" data-tags="[&quot;prediction_format&quot;]" data-execution_count="102">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Examples of predictions**'</span>))</span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> jsonlines.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(musique_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predictions/musique_ans_v1.0_dev_end2end_model_predictions.jsonl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb4-4">        display(pprint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Examples of predictions</strong></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'id': '2hop__460946_294723',
 'predicted_answer': 'Jennifer Garner',
 'predicted_answerable': True,
 'predicted_support_idxs': [0, 10]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'id': '2hop__252311_366220',
 'predicted_answer': 'Steven Spielberg',
 'predicted_answerable': True,
 'predicted_support_idxs': [10, 18]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'id': '2hop__701895_752697',
 'predicted_answer': 'Cypriot part was merged into the Bank of Cyprus '
                     '(including insured deposits under 100,000 Euro) and the '
                     "'bad' part or legacy entity holds all the overseas "
                     'operations as well as uninsured deposits above 100,000 '
                     'Euro, old shares and bonds. The uninsured depositors '
                     'were subject to a bail-in and became the new '
                     'shareholders of the legacy entity. As at May 2017, the '
                     'legacy entity is one of the largest shareholders of Bank '
                     'of Cyprus with 4.8% but does not hold a board seat. All '
                     'the overseas operations, of the now defunct Cyprus '
                     'Popular Bank, are also held by the legacy entity, until '
                     'they are sold by the Special Administrator, at first Ms '
                     'Andri Antoniadou, who ran the legacy entity for two '
                     'years, from March 2013 until 3 March 2015. She tendered '
                     'her resignation due to disagreements, with the Governor '
                     'of the Central Bank of Cyprus and the Central Bank Board '
                     'members, who amended the lawyers of the legacy entity, '
                     'without consulting her. Veteran banker Chris [[PP]] The '
                     'Ciudad Deportiva ("Sports City") is a sports complex in '
                     'Nuevo Laredo, Mexico. It is home to the Tecolotes de '
                     'Nuevo Laredo Mexican Baseball League team and the Toros '
                     'de Nuevo Laredo Mexican professional basketball team '
                     'from the Liga Nacional de Baloncesto Profesional. The '
                     "Ciudad Deportiva's Estadio Nuevo Laredo (baseball park) "
                     'can seat up to 12,000 fans at a baseball game and the '
                     'Nuevo Laredo Multidisciplinary Gymnasium can seat 4,000 '
                     'fans at a basketball game. [[PP]] Juan Carlos Espinoza '
                     'Mercado (born 23 July 1987 in Machala) is an Ecuadorian '
                     'professional football player who has played for '
                     'Ecuadorian club Liga Deportiva Universitaria de Loja and '
                     'in 2010 he joined Peruvian club Juan Aurich. [[PP]] '
                     'Estadio Unión Tarma is a multi-use stadium in Tarma, '
                     'Peru. It is currently used mostly for football matches '
                     'and is the home stadium of Asociación Deportiva Tarma of '
                     'the Copa Perú. The stadium holds 9,000 spectators. '
                     '[[PP]] A Nigerian State is a federated political entity, '
                     'which shares sovereignty with the Federal Government of '
                     'Nigeria, There are 36 States in Nigeria, which are bound '
                     'together by a federal agreement. There is also a '
                     'territory called the Federal Capital Territory (FCT), '
                     'which is not a state, but a territory, under the direct '
                     'control of the Federal Government. The States are '
                     'further divided into a total of 774 Local Government '
                     'Areas. Under the Nigerian Constitution, states have the '
                     'power to ratify constitutional amendments. [[PP]] Ofu '
                     'Airport is a public airport located one mile (2 km) '
                     'southeast of the village of Ofu on the island of Ofu in '
                     'American Samoa, an unincorporated territory of the '
                     'United States. This airport is publicly owned by '
                     'Government of American Samoa. [[PP]] The Díaz '
                     'administration made political decisions and took legal '
                     'measures that allowed the elite throughout Mexico',
 'predicted_answerable': True,
 'predicted_support_idxs': [11, 16, 18]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'id': '2hop__259228_793698',
 'predicted_answer': 'Fairfield, Connecticut. Its main offices are located at '
                     '30 Rockefeller Plaza at Rockefeller Center in New York '
                     'City, known now as the Comcast Building. It was formerly '
                     'known as the GE Building for the prominent GE logo on '
                     "the roof; NBC's headquarters and main studios are also "
                     'located in the building. Through its RCA subsidiary, it '
                     'has been associated with the center since its '
                     'construction in the 1930s. GE moved its corporate '
                     'headquarters from the GE Building on Lexington Avenue to '
                     'Fairfield in 1974. [[PP]] The lander is named after the '
                     'Philae obelisk, which bears a bilingual inscription and '
                     'was used along with the Rosetta Stone to decipher '
                     'Egyptian hieroglyphs. "Philae" was monitored and '
                     "operated from DLR's Lander Control Center in Cologne",
 'predicted_answerable': True,
 'predicted_support_idxs': [2, 10, 14]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'id': '2hop__481349_302087',
 'predicted_answer': 'Bombardier Inc. the former CRJ100 and CRJ200 series are '
                     'no longer in production but still in active airline '
                     'service, while the more recent CRJ700, CRJ900 and '
                     'CRJ1000 series are in production and in service. [[PP]] '
                     'Products offered through the Great Value brand are often '
                     'claimed to be as good as national brand offerings, but '
                     'are typically sold at a lower price because of lower '
                     'marketing and advertising expense. As a house or store '
                     'brand, the Great Value line does not consist of goods '
                     'produced by Walmart, but is a labeling system for items '
                     'manufactured and packaged by a number of agricultural '
                     'and food corporations, such as ConAgra, Sara Lee which, '
                     'in addition to releasing products under its own brands '
                     'and exclusively for Walmart, also manufactures and '
                     'brands foods for a variety of other chain stores. Often, '
                     'this labeling system, to the dismay of consumers, does '
                     'not list location of manufacture of the product. Wal - '
                     'Mart contends that all Great Value products are produced '
                     'in the United States. Otherwise, the country of origin '
                     'would be listed. [[PP]] On June 11, 2006, the British '
                     'tabloid The Mail on Sunday reported that iPods are '
                     'mainly manufactured by workers who earn no more than '
                     'US$50 per month and work 15-hour shifts. Apple '
                     'investigated the case with independent auditors and '
                     "found that, while some of the plant's labour practices "
                     "met Apple's Code of Conduct, others did not: employees "
                     'worked over 60 hours a week for 35% of the time, and '
                     'worked more than six consecutive days for 25% of the '
                     'time. [[PP]] The EMD E6 was a , A1A-A1A, passenger train '
                     'locomotive manufactured by Electro-Motive Corporation, '
                     'and its corporate successor, General Motors',
 'predicted_answerable': True,
 'predicted_support_idxs': [5, 10]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="inputs-and-outputs" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="inputs-and-outputs"><span class="header-section-number">1.2</span> Inputs and Outputs</h2>
<p>In essence, our pipeline primarily needs to take the question and the paragraphs and spit out:</p>
<ol type="1">
<li><p>Whether the question is answerable.</p></li>
<li><p>Which paragraphs contribute to the question’s answer.</p></li>
<li><p>The answer.</p></li>
</ol>
<p>Now we’re beginning to see why this is a difficult task. Nevertheless – onwards.</p>
</section>
</section>
<section id="tokens-and-tokens-and-more-tokens" class="level1 page-columns page-full" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Tokens and Tokens and <em>More</em> Tokens</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
These are the values as of this writing. They may change in the future.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>There has been a lot of hype regarding enormous <em>input</em> context windows, which has led to articles such as <a href="https://qdrant.tech/articles/rag-is-dead/">RAG is dead, long live RAG</a>. When we refer to these huge context windows, we’re primarily referring to the input and not the output. <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models#gemini-models">Google Gemini 1.5</a> has a 1 million context window, however, the allowed output is only 8192 tokens. Similarly, <a href="https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4">OpenAI’s GPT-4</a> models have a 128k context window and only a 4096 token output.</p>
<div id="fig-gpt4-gemini-tokens" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-gpt4-gemini-tokens-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/gemini-gpt4-tokens.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Figure&nbsp;1: Context Sizes of GPT-4 and Gemini 1.5 and their max output sizes"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/gemini-gpt4-tokens.png" class="img-fluid figure-img" width="805"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-gpt4-gemini-tokens-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Context Sizes of GPT-4 and Gemini 1.5 and their max output sizes
</figcaption>
</figure>
</div>
<p>Initially, large context windows were untenable as they ate resources like fat kids eat cake – they were also unreliable, where the model would only remember the beginning and end of the input, while generally ‘forgetting’ the middle. This has improved over time, to the point of near perfect performance with these enormous context windows. From the <a href="https://storage.googleapis.com/deepmind-media/gemini/gemini_v1_5_report.pdf">Gemini 1.5 whitepaper</a>, we see their <strong>needle-in-a-haystack(NiaH)</strong> performance to be stellar. It is able to locate key phrases and words within huge contexts. They use a 10 million token context window for their stress testing.</p>
<div id="fig-gemini-needle" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-gemini-needle-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/gemini-needle.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Figure&nbsp;2: Gemini 1.5 Needle in a Haystack Performance (It is a multimodal model, so it is able to take audio and video as inputs as well)"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/gemini-needle.png" class="img-fluid figure-img" width="642"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-gemini-needle-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Gemini 1.5 Needle in a Haystack Performance (It is a multimodal model, so it is able to take audio and video as inputs as well)
</figcaption>
</figure>
</div>
<p>While very impressive, many argue that NiaH is purely a vanity metric and that it in order to test the context window, you need real-world evaluations and the ability to test reasoning across this mass of data.</p>
<p>For shits and giggles, we’ll see how many tokens we’re working with here.</p>
<p>But first…</p>
<section id="tokens" class="level3 page-columns page-full" data-number="2.0.1">
<h3 data-number="2.0.1" class="anchored" data-anchor-id="tokens"><span class="header-section-number">2.0.1</span> Tokens?</h3>
<p>What the heck is a token anyways? Please skip this section if you’re a token master – or don’t if you fancy my prose, up to you.</p>
<p>I’m not going to describe <strong>byte-pair encodings(BPE)</strong> at length, but I will try to prime your intuition a bit. All current performant foundational models use BPE for their model inputs, so this should be relevant for maybe another, y’know, three hours(I jest). OpenAI offers a fun little <a href="https://platform.openai.com/tokenizer">token visualizer tool</a>.</p>
<div id="fig-tokenization-example" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-tokenization-example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="images/openai-tokenization.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;3: OpenAI Tokenization Example"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/openai-tokenization.png" class="img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-tokenization-example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: OpenAI Tokenization Example
</figcaption>
</figure>
</div>
<p>Essentially, the tokens are determined by feeding a large corpus of data into an algorithm that is meant to extract a set amount of unique tokens by taking the most common sequences of words and iterating over them until the uniqueness constraint is satisfied. If we look at Fig.&nbsp;3, we see that <code>*****</code> is a single token, while <code>[</code> is also a single token with its own unique numerical designation within the LLM. Some sequences of characters are commonly used, and so it makes sense to treat them as one token. Also, notice that the preceding spaces around the words are treated as part of the word token. Smiley faces are common enough that they also have earned their own token(at least that’s my interpretation of it). You can also see that token strings can be part of larger token strings as we see between <code>**</code> and <code>*****</code>. Both are completely unique tokens to the model.</p>
<p>When you’re feeding strings into the model, they are split off into numbered segments, which are then matched to their bit-encoding(e.g.&nbsp;<code>1010101111000</code>), which goes into the model.</p>
</section>
<section id="token-measurement" class="level3" data-number="2.0.2">
<h3 data-number="2.0.2" class="anchored" data-anchor-id="token-measurement"><span class="header-section-number">2.0.2</span> Token Measurement</h3>
<p>Different models use different tokenization strategies(but the same technique) with varying datasets, so we’ll focus on the publicly available algorithms. <a href="https://github.com/openai/tiktoken">tiktoken</a> is an OpenAI tool you can use to determine the token-representation existing within any string of text.</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-11">
<div id="cell-11" class="cell" data-tags="[&quot;tokenizer&quot;]" data-execution_count="98">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tiktoken</span>
<span id="cb15-2"></span>
<span id="cb15-3">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Token models**'</span>), tiktoken.model.MODEL_TO_ENCODING)</span>
<span id="cb15-4">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiktoken.encoding_for_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt-3.5-turbo'</span>)</span>
<span id="cb15-5">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Tokenizer we are using**'</span>), tokenizer)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Token models</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>{'gpt-4': 'cl100k_base',
 'gpt-3.5-turbo': 'cl100k_base',
 'gpt-3.5': 'cl100k_base',
 'gpt-35-turbo': 'cl100k_base',
 'davinci-002': 'cl100k_base',
 'babbage-002': 'cl100k_base',
 'text-embedding-ada-002': 'cl100k_base',
 'text-embedding-3-small': 'cl100k_base',
 'text-embedding-3-large': 'cl100k_base',
 'text-davinci-003': 'p50k_base',
 'text-davinci-002': 'p50k_base',
 'text-davinci-001': 'r50k_base',
 'text-curie-001': 'r50k_base',
 'text-babbage-001': 'r50k_base',
 'text-ada-001': 'r50k_base',
 'davinci': 'r50k_base',
 'curie': 'r50k_base',
 'babbage': 'r50k_base',
 'ada': 'r50k_base',
 'code-davinci-002': 'p50k_base',
 'code-davinci-001': 'p50k_base',
 'code-cushman-002': 'p50k_base',
 'code-cushman-001': 'p50k_base',
 'davinci-codex': 'p50k_base',
 'cushman-codex': 'p50k_base',
 'text-davinci-edit-001': 'p50k_edit',
 'code-davinci-edit-001': 'p50k_edit',
 'text-similarity-davinci-001': 'r50k_base',
 'text-similarity-curie-001': 'r50k_base',
 'text-similarity-babbage-001': 'r50k_base',
 'text-similarity-ada-001': 'r50k_base',
 'text-search-davinci-doc-001': 'r50k_base',
 'text-search-curie-doc-001': 'r50k_base',
 'text-search-babbage-doc-001': 'r50k_base',
 'text-search-ada-doc-001': 'r50k_base',
 'code-search-babbage-code-001': 'r50k_base',
 'code-search-ada-code-001': 'r50k_base',
 'gpt2': 'gpt2',
 'gpt-2': 'gpt2'}</code></pre>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Tokenizer we are using</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Encoding 'cl100k_base'&gt;</code></pre>
</div>
</div>
</div>
</div>
<p>We observe that the latest models are using the <code>cl100k_base</code> tokenization model, which we can assume uses ~100,000 unique tokens. Prior to this, a 50,000 unique token model was used. Also, we instantiate our tokenizer for the next step. Choosing the <code>gpt-4</code> or <code>gpt-3.5-turbo</code> tokenizer makes no material difference, as they use the same exact tokenization model.</p>
<p>The tokenizer can be used on one of the paragraphs we have to illustrate its token composition.</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-12">
<div id="cell-12" class="cell" data-tags="[&quot;paragraph_tokens&quot;]" data-execution_count="99">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">test_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-2">test_paragraphs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_line[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraphs'</span>]</span>
<span id="cb18-3"></span>
<span id="cb18-4">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Paragraph Example**'</span>), test_paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-5">test_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(test_paragraphs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>])</span>
<span id="cb18-6">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Tokens**'</span>), test_tokens)</span>
<span id="cb18-7">display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**Number of Tokens**'</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_tokens))</span>
<span id="cb18-8"></span></code></pre></div>
</details>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Paragraph Example</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>{'idx': 0,
 'title': 'Milton F. Pavlic',
 'paragraph_text': 'Milton F. Pavlic (1909–1942) was a United States Navy officer killed in action during World War II for whom a U.S. Navy high-speed transport was named.',
 'is_supporting': False}</code></pre>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Tokens</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>[44,
 16695,
 435,
 13,
 43856,
 416,
 320,
 7028,
 24,
 4235,
 6393,
 17,
 8,
 574,
 264,
 3723,
 4273,
 19574,
 9640,
 7577,
 304,
 1957,
 2391,
 4435,
 5111,
 8105,
 369,
 8884,
 264,
 549,
 815,
 13,
 19574,
 1579,
 30699,
 7710,
 574,
 7086,
 13]</code></pre>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><strong>Number of Tokens</strong></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>39</code></pre>
</div>
</div>
</div>
</div>
<p>Only 39 tokens – nice.</p>
<p>Is this something we can expect from the provided paragraphs in our dataset?</p>
<div style="max-height: 280px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-1\notebooks\kg_build.ipynb" data-notebook-title="Explore" data-notebook-cellid="cell-13">
<div id="cell-13" class="cell" data-tags="[&quot;paragraphs_tokens&quot;]" data-execution_count="100">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> paragraph <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_paragraphs:</span>
<span id="cb22-2">    paragraph_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> paragraph[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraph_text'</span>]</span>
<span id="cb22-3">    paragraph_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(paragraph_text)</span>
<span id="cb22-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of tokens in paragraph: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(paragraph_tokens)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Number of tokens in paragraph: 39
Number of tokens in paragraph: 68
Number of tokens in paragraph: 45
Number of tokens in paragraph: 64
Number of tokens in paragraph: 59
Number of tokens in paragraph: 131
Number of tokens in paragraph: 176
Number of tokens in paragraph: 59
Number of tokens in paragraph: 71
Number of tokens in paragraph: 86
Number of tokens in paragraph: 42
Number of tokens in paragraph: 36
Number of tokens in paragraph: 102
Number of tokens in paragraph: 61
Number of tokens in paragraph: 58
Number of tokens in paragraph: 57
Number of tokens in paragraph: 39
Number of tokens in paragraph: 35
Number of tokens in paragraph: 59
Number of tokens in paragraph: 48</code></pre>
</div>
</div>
</div>
</div>
<p>Not exactly, but the max length is roughly 176 tokens, so it’s still a fairly small token amount.</p>
</section>
</section>
<section id="motivation-for-rag-over-large-context-windows" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Motivation for RAG over Large Context Windows</h1>
<p>If you’re thinking what I’m thinking, you’ve probably done the head-math and figured that ~2000 tokens can easily fit into a 1.5M token context window with ease, with the only remaining task being some clever prompt engineering.</p>
<p>While this is true, we have to think of cost and scale, as well as veracity. RAG systems tend to be substantially cheaper than context stuffing. <a href="https://ai88.substack.com/p/rag-vs-context-window-in-gpt4-accuracy-cost">This entry</a> by Atai Barkai, illustrates the cost of RAG compared to context stuffing when it comes to a simple benchmark like the previously mentioned NiaH. Context stuffing ends up being 2500% more expensive. According to my calculations, which you can totally trust, that’s a lot of 🥑avocado toast.</p>
<p>On top of the cost-benefit, when we include knowledge graphs, we also gain the power of symbolic representational knowledge as a memory, which neither context stuffing nor vanilla RAG does.</p>
</section>
<section id="choosing-a-model" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Choosing a Model</h1>
<p>When selecting a model, we are often in the shoes of Goldilocks, we don’t want it to be too expensive, but we also don’t want it to lack in critical performance where it matters – we usually want that golden middle ground. To obtain that middle ground, combinations of models are usually used. For instance, a GPT-4 level model would be used for the abstract and high-level thinking, while the lower GPT 3.5 level models would be used for simpler processes that don’t require very high levels of abstraction.</p>
<section id="jean-claude-van-damme-tell-me-a-haiku" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="jean-claude-van-damme-tell-me-a-haiku"><span class="header-section-number">4.1</span> Jean-<em>Claude</em> Van Damme, tell me a <em>Haiku</em></h2>
<p>What. Just kidding. We’ll be talking about <a href="https://www.anthropic.com/news/claude-3-family">Anthropic’s Claude 3 models</a>. The following chart is from the <a href="https://chat.lmsys.org">LMSYS Chatbot Arena</a> where models go head to head in answering questions which are then chosen by users.</p>
<div id="fig-lmsys" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-lmsys-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/lmsys-compare.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Figure&nbsp;4: Comparison of performance and cost among top models"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/lmsys-compare.jpg" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-lmsys-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Comparison of performance and cost among top models
</figcaption>
</figure>
</div>
<p>On the far right, we have GPT-4 and Claude 3 Opus neck to neck as the highest performing models. As of this writing, the latest GPT-4 Turbo model actually overtook Claude 3 Opus. At the very top, we see Claude Haiku, which performs slightly below one of the GPT-4 models, but at an incredibly low cost. All of the Claude 3 models have a 200,000 token window and a 4096 token output – this is comparable to the 128,000 GPT-4 token window with a 8196 token output. Claude 3 Haiku will be model we’ll be using. If there are any hurdles with that particular model, it will not be too difficult to pivot by simply changing the endpoint to GPT 3.5 or GPT 4.</p>
<p>Here is Claude 3 Haiku writing a haiku about itself:</p>
<pre><code>Artificial mind,
Seeking to understand, learn,
Serve with empathy.</code></pre>
<p>Are you impressed yet? <sup><sub>Maybe a <em>little</em> scared?</sub></sup></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Although Claude had the very large context window months before GPT-4, the jury is out on whether it has been useful and robust enough for production.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="claude-tokenization" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="claude-tokenization"><span class="header-section-number">4.1.1</span> Claude Tokenization</h3>
<p>Unfortunately, Anthropic has not released a tokenizer that we can use, however, it is generally safe(famous last words lol) to assume that it is quite similar to the OpenAI one. <a href="https://github.com/javirandor/anthropic-tokenizer">Here</a>, someone has attempted to reverse engineer it by counting the token amounts of the generations streamed to you.</p>
<p><a href="images/claude_tokenizer.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/claude_tokenizer.jpg" class="img-fluid" width="569"></a></p>
<p>But we’re not going to do that.</p>
</section>
</section>
</section>
<section id="creating-a-knowledge-graph" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Creating a Knowledge Graph</h1>
<p>From the <a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#rag-knowledge-graphs">previous post</a>, you may remember that we spoke of combining a vector store along with a knowledge graph in order to take advantage of the specific multiplicity of that combination. Because generating a workflow for knowledge graph creation is an undertaking in its own right, we’ll first want to build a knowledge graph, and then attach the logic for using it along with a vector store. For descriptive purposes, this is much easier and less convoluted than it would be.</p>
<section id="strategy" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="strategy"><span class="header-section-number">5.1</span> Strategy</h2>
<section id="sliding-windows" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="sliding-windows"><span class="header-section-number">5.1.1</span> Sliding Windows</h3>
<p>To answer the questions asked in the MuSiQue benchmark, we will create a unique knowledge graph for every individual question, consisting out of the twenty provided paragraphs. Each paragraph can be arbitrarily divided into multiple chunks of text which the LLM can take as input into its context.</p>
<div id="fig-text-chunks" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-text-chunks-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/paragraph-chunks.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Figure&nbsp;5: Each question contains multiple paragraphs, and each paragraph is made out of multiple text chunks."><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/paragraph-chunks.png" class="img-fluid figure-img" width="652"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-text-chunks-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Each question contains multiple paragraphs, and each paragraph is made out of multiple text chunks.
</figcaption>
</figure>
</div>
<p>We can use a sliding window to process the chunks of text that the paragraphs are composed of. There are numerous ways to insert variable amounts of text into the context of an LLM, but I’ll introduce the two basic approaches. You can do so with a sliding window that takes in one chunk of text after the other, or you can use a sliding window with some overlap. We’ll use the latter strategy, as it may help with continuity of the model’s understanding of the text. As the window slides across the text, we want to generate the <strong>nodes</strong> and <strong>edges</strong> of the knowledge graph.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
When I say ‘nodes and edges’, I also mean any attributes thereof
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<div id="fig-sliding-window" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-sliding-window-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/sliding-window.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Figure&nbsp;6: Sliding window with overlap tends to be the standard approach when inserting text into LLMs"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/sliding-window.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sliding-window-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Sliding window with overlap tends to be the standard approach when inserting text into LLMs
</figcaption>
</figure>
</div>
</section>
<section id="knowledge-stuffing" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="knowledge-stuffing"><span class="header-section-number">5.1.2</span> Knowledge-Stuffing</h3>
<p>Connections are the bread and butter of knowledge graphs. If our LLM is producing nodes and edges only from our limited context window, it appears that we’re missing out on the connectivity benefit of knowledge graphs. To increase the connectivity of our knowledge graph, we can inform our LLM of previous nodes and edges it has created by passing them into the context of the LLM. Conveniently, this gives me the opportunity to introduce our composition of the context we’ll be using.</p>
<div id="fig-llm-context" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-llm-context-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/context.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Figure&nbsp;7: We provide the LLM with the system prompt, text chunks, and previously generated nodes and edges"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/context.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-llm-context-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: We provide the LLM with the system prompt, text chunks, and previously generated nodes and edges
</figcaption>
</figure>
</div>
<p>Inside of the prompt we have our:</p>
<ul>
<li><p>System prompt: Contains the necessary instructions for priming the model(e.g.&nbsp;“you are a brave and beautiful graph creator”), as well as formatting in the case where we want JSON returned to us that represents the nodes and edges, and anything else we’ll need.</p></li>
<li><p>Previously generated nodes and edges: By knowing the previously generated nodes and edges, we can use them to update or create new nodes and edges that may or may not be related.</p></li>
<li><p>Text chunks: The text from the paragraphs which the LLM will be converting to nodes and edges.</p></li>
</ul>
<p>Unless we’ll be including all of the nodes and edges into the prompt, it still feels a bit limited. Technically, we can just shove all of those connections into the prompt, as there’s ample space with our huge 200,000 token limit, but we want this method to generalize and scale to tasks outside of this particular dataset.</p>
</section>
<section id="letting-the-llm-loose" class="level3" data-number="5.1.3">
<h3 data-number="5.1.3" class="anchored" data-anchor-id="letting-the-llm-loose"><span class="header-section-number">5.1.3</span> Letting the LLM Loose</h3>
<p>Consider the knowledge graph obtained after we process the 20 paragraphs pertaining to one question using the previously discussed method. We’d get something like:</p>
<div id="fig-sparse" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-sparse-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/sparse_connectivity.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="Figure&nbsp;8: Sparsely Connected Knowledge Graph"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/sparse_connectivity.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sparse-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Sparsely Connected Knowledge Graph
</figcaption>
</figure>
</div>
<p>The facts we obtain from the text chunks will likely be connected in fairly atomic clusters as there wouldn’t be great continuity, even with passing some of the previously computed nodes and edges into our context window. One way to fix this would be to feed random sets of nodes(and/or edges) to the LLM and let it generate new connections between the nodes.</p>
<div id="fig-new-connections" class="preview-image quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-new-connections-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/connection-building.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Figure&nbsp;9: Building New Connections"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/images/connection-building.png" class="preview-image img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-new-connections-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Building New Connections
</figcaption>
</figure>
</div>
<p>This can be done in one of two ways(more, actually):</p>
<ol type="1">
<li>Push the nodes and edges(and attributes) into the context window and tell the model to blindly make associations based on that information alone.</li>
<li>Along with the nodes and edges, push the segments of text that contributed to the creation of the nodes and edges alongside them. This gives the LLM more grounding and reduces hallucinations.</li>
</ol>
<p>We’ll focus on the latter, as it pairs well with the vector store approach we will be discussing later.</p>
</section>
</section>
</section>
<section id="wrapping-up" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Wrapping up</h1>
<p>To be perfectly honest, I was intending to get into coding the knowledge graph creation pipeline in this post, I even had to change the title and abstract before publishing. Fortunately, there’s plenty here to mull over.</p>
<p>That’ll be happening in the next one – pinky promise. I’m hoping that this was a good amount of background and theory behind what we’ll be doing next.</p>
<p>You can reach out to me if you have any questions via X or email.</p>
<p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html"><strong>Part Deux &gt;&gt;</strong></a></p>


</section>

 ]]></description>
  <category>knowledge-graphs</category>
  <category>rag</category>
  <category>benchmarking</category>
  <guid>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/</guid>
  <pubDate>Fri, 12 Apr 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero</title>
  <dc:creator>Dmitriy Leybel</dc:creator>
  <link>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/</link>
  <description><![CDATA[ 





<p>It’s finally happening. <em>It</em>, being me writing a blog entry. (I’m editing this at 10k words. I guess it’s more of an article and less of a blog entry)</p>
<p><br></p>
<p>The motivation behind this series of posts is twofold, to run a basic knowledge graph <em>Retrieval Augmented Generation</em>(RAG) benchmark I can build off of and iteratively improve, and secondarily, to give the reader a ride-along of the process, from choosing a benchmark, creating a knowledge graph, connecting the knowledge graph to a vector store, and so forth. I am going to break down the components of not only a RAG system, but also introduce the necessary parts of any LLM workflow - so there will certainly be something for everyone. You are free to use the table of contents to skip around to what interests you most, or embark on an end-to-end marathon read.</p>
<p>I fully believe in <strong>democratizing</strong> the ability to build and test your own LLM tools, as they are a critical frontier of artificial intelligence. That is the path towards progress and away from the centralization of these fantastic technologies.</p>
<section id="background" class="level1 page-columns page-full" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Background</h1>
<section id="rag" class="level2 page-columns page-full" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="rag"><span class="header-section-number">1.1</span> RAG</h2>
<p><em>Large Language Models</em>(LLMs) are fantastic…that is, until you attempt to verify their output.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[70, 60]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 53.9%;justify-content: flex-start;">
<p>For this reason, RAG has been a fundamental component of truthiness. It also allows you to augment the LLM output through context-stuffing. The amount of tokens you can stuff into your context is not limitless, and so you can’t merely stuff all of your documents and tables into it. Out of this limit emerge dozens of RAG techniques which try to <a href="https://twitter.com/jxnlco/status/1757938871843651858">hydrate</a> the prompt. The fine folks at <a href="https://python.langchain.com/docs/get_started/introduction">Langchain</a> have illustrated a small portion of these techniques here(Fig&nbsp;1). Even with the promise of a <a href="https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/">10 million token context window</a>, there is no abatement of upcoming RAG techniques and companies built around it.</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 46.2%;justify-content: flex-start;">
<div id="fig-rag_techniques_langchain" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rag_techniques_langchain-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/paste-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Figure&nbsp;1: Soiree of RAG techniques (Click to enlarge) Source: Langchain blog"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/paste-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="437"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rag_techniques_langchain-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Soiree of RAG techniques<br>
(Click to enlarge)<br>
Source: Langchain blog
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>An <a href="https://github.com/hymie122/RAG-Survey">ever-growing survey</a> of these techniques exists - and even that is not fully exhaustive. P.S. <a href="https://exa.ai/search?c=all">exa.ai</a> is a fantastic source for research. <img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/exaai.png" class="img-fluid"></p>
<p>For reference, here(Fig&nbsp;2) is a diagram of one of the simplest versions of RAG being implemented.</p>
<div id="fig-simple-rag" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-simple-rag-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="images/simple rag.drawio.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-2" title="Figure&nbsp;2: Basic RAG Example"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/simple rag.drawio.png" class="img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-simple-rag-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Basic RAG Example
</figcaption>
</figure>
</div>
</section>
<section id="knowledge-graphs" class="level2 page-columns page-full" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="knowledge-graphs"><span class="header-section-number">1.2</span> Knowledge Graphs</h2>
<p>It’s much easier to illustrate than explicate what a knowledge graph is(Fig&nbsp;3). Below, we have a knowledge graph that represents places, people, and things along with their relationships to one another. This is a directed graph, in the sense that the connections flow in one direction - this generally makes it easier to specify the relationships between entities. There are many names for the entities within a knowledge graph as well as the connections between them; one of the most common naming conventions for them are <strong>nodes</strong> for the entities such as “Bob” or “The Louvre” and <strong>edges</strong> for the connections between the nodes such as “was created by” or “is located in”. Additionally, these nodes and edges can both have properties or <strong>attributes</strong> - for instance, the ‘Museum’ node can have attributes that enrich it such as “capacity: 2,000” and the edge ‘visited’ can be assigned a date attribute “date: March 28th, 2005”. You’ll often hear the word <strong>triple</strong> in reference to two nodes connected by an edge(<code>Node A</code>, <code>Edge</code>, <code>Node B</code>)</p>
<div id="fig-basic-knowledege-graph-example" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-basic-knowledege-graph-example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/paste-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;3: An example of a basic knowledge graph."><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/paste-1.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-basic-knowledege-graph-example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: An example of a basic knowledge graph.
</figcaption>
</figure>
</div>
<p>Knowledge graphs are often created within <em>graph databases</em> such as Neo4j, memgraph, or Amazon Neptune. They are often used within enterprises to integrate data from structured and unstructured databases alike to enable a single source of truth or knowledge. In theory, they are fantastic tools for information storage and retrieval, however, in practice they have a lot of quirks that prevent many companies from using them. The distillation of a company’s data into a neat set of nodes and edges is a complex task that requires knowledge graph experts, as well as alignment from all corners of the organization.</p>
<p>While the appeal of knowledge graphs is immense because it appeals to our intuitive sense of informational organization and structure, you can see for yourself how difficult the task is by trying to organize the things on your desk into a knowledge graph. Your brain has no problem with making sense of it all and maintaining its own knowledge representation of what’s in front of your nose, but reproducing it in a knowledge graph is not as straightforward as our intuition leads us to believe.</p>
<p>“Are you done sh*tting on knowledge graphs, Dmitriy?”</p>
<section id="llm-synergy" class="level3 page-columns page-full" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="llm-synergy"><span class="header-section-number">1.2.1</span> LLM Synergy</h3>
<p>Yes. In fact, here I am proudly generating a knowledge graph for the world to see.</p>
<blockquote class="twitter-tweet blockquote" data-theme="dark"><p lang="en" dir="ltr">Real-time knowledge graph creation with GPT-3.5 Turbo <br><br>Using:<a href="https://twitter.com/LangChainAI?ref_src=twsrc%5Etfw">@LangChainAI</a> <a href="https://twitter.com/visjs?ref_src=twsrc%5Etfw">@visjs</a><br>Panel from <a href="https://twitter.com/HoloViz_org?ref_src=twsrc%5Etfw">@HoloViz_org</a> for handling interpreter/browser bidirectional communication <a href="https://t.co/P4mtAZDMaP">pic.twitter.com/P4mtAZDMaP</a></p>— dmitriy (@DmitriyLeybel) <a href="https://twitter.com/DmitriyLeybel/status/1759302451923189899?ref_src=twsrc%5Etfw">February 18, 2024</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>It may seem like this is the start of an all-hands meeting that’s 45 minutes too long, but I promise you that it’s not(unless you want it to be?). The word ‘synergy’ is perfect for describing the relationship between LLMs and knowledge graphs. The lowest hanging fruit for this match made in heaven was writing queries. Given a schema, an LLM can query a graph database to retrieve information.</p>
<p>Some graph databases can be queried with Cypher(a graph querying language):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1">MATCH (n:Person)-[r:KNOWS]-&gt;(m:Person)</span>
<span id="cb1-2">WHERE n.name = 'Alice'</span>
<span id="cb1-3">RETURN n, r, m</span></code></pre></div>
<p>If you’re familiar with SQL, you immediately see the similarities. This query returns the person node <code>n</code> with the name Alice and all of the people(<code>m</code>) she knows(<code>r</code>). Fortunately, LLMs are superb at query languages, so your Cypher prowess can be minimal to nonexistent in order to compose this masterpiece:</p>
<blockquote class="blockquote">
<p>yo chatgpt, this is my graph db’s schema:<code>schema here</code> I need you to write a Cypher query that returns all of the people Alice knows</p>
</blockquote>
<p>Cool. Now we can fire all of these data analysts, right? Maybe next year. <strong>(DISCLAIMER: this is a joke, not business advice)</strong></p>
<p>Query generation turns out to be fairly popular, with frameworks like <a href="https://python.langchain.com/docs/use_cases/graph/integrations/graph_cypher_qa">Langchain</a> and <a href="https://docs.llamaindex.ai/en/stable/examples/query_engine/knowledge_graph_query_engine/">LlamaIndex</a> creating modules to do just that. Turns out, using LLMs, we can not only build queries, but we can build the knowledge graph itself. I will later go over this at length, so to be brief, you can have a LLM go over a set of documents chunk by chunk and output these triplets of nodes and edges iteratively. After loading them into a graph database, you can end the process there and trot along with your newly minted database, or you can now let the LLM create queries against that database as described earlier.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="https://python.langchain.com/docs/use_cases/graph/constructing">Langchain</a> and <a href="https://docs.llamaindex.ai/en/stable/examples/index_structs/knowledge_graph/KnowledgeGraphDemo/">LlamaIndex</a> also have their own plug-n-play knowledge graph creation modules.</p>
</div></div><p>At this point, like any rational human being, you may be asking, can this get any better? I mean, you’ve lasted this long, so I imagine that you already know the answer.</p>
</section>
</section>
<section id="rag-knowledge-graphs" class="level2 page-columns page-full" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="rag-knowledge-graphs"><span class="header-section-number">1.3</span> RAG + Knowledge Graphs</h2>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember, there is more than one way you can skin a cat. The examples provided are merely the ones I believe are most illustrative of the main components. The extent of the composability is only limited by your imagination.</p>
</div>
</div>
<p>When you combine RAG with knowledge graphs, you get the best of both worlds. On one hand, you get a fuzzy(probabalistic) semantic layer which can be used to compare the essence of sentences or paragraphs to via embeddings. On the other, you have a discrete and symbolic representation of knowledge. That sounds an awful lot like humans – vibes-based logical processors.</p>
<p>There are limitless ways to construct a system that exploits both modalities, so I’m going to focus on the base cases. The fundamental relationship takes place between the vector embeddings and the knowledge graph. The nodes(and in some cases, the edges) are linked to an embedding related to their source material.</p>
<p>The first objective is to use an LLM to create the knowledge graph in conjunction with the embeddings. The embeddings will be stored in a <strong>vector database</strong> or <strong>vector store</strong>, which is essentially an optimized container that allows extremely fast vector comparison operations so you can quickly find the most similar embeddings. Some vector databases live in the cloud(<a href="https://www.pinecone.io">Pinecone</a>), they can be self-hosted(<a href="https://www.trychroma.com">Chroma</a>), or they can stay in your very program’s memory(<a href="https://ai.meta.com/tools/faiss/">FAISS</a>). Fig&nbsp;4 illustrates the fundamentals of generating your knowledge graph and vector store.</p>
<section id="generating-knowledge-graphs-and-populating-vector-stores" class="level3 page-columns page-full" data-number="1.3.1">
<h3 data-number="1.3.1" class="anchored" data-anchor-id="generating-knowledge-graphs-and-populating-vector-stores"><span class="header-section-number">1.3.1</span> Generating Knowledge Graphs and Populating Vector Stores</h3>
<p>Once a corpus of documents is chunked into pieces, those pieces can be processed by the LLM and converted into triples which are then loaded into the knowledge graph. Concurrently, embeddings are created for the document chunks and loaded into the vector store. In each case, you can attach the reference for the node or embedding in its respective twin – this is where the magic lies. The text from the chunked documents can be stored in either the knowledge graph or in the vector store, or both. Once both are established, there are multiple retrieval strategies we can use to take advantage of this system.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Building the knowledge graph sounds simpler than it is, and just as the architectural design of these systems, it is open to myriads of potential options – some good, and some not so good. This will be addressed.</p>
</div>
</div>
<div id="fig-graph-gen" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-graph-gen-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="images/graph generation.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-4" title="Figure&nbsp;4: Knowledge Graph and Embedding Generation"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/graph generation.png" class="img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-graph-gen-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Knowledge Graph and Embedding Generation
</figcaption>
</figure>
</div>
</section>
<section id="retrieval-strategy-1-focused-on-embeddings-search-followed-by-knowledge-graph-adjacency" class="level3 page-columns page-full" data-number="1.3.2">
<h3 data-number="1.3.2" class="anchored" data-anchor-id="retrieval-strategy-1-focused-on-embeddings-search-followed-by-knowledge-graph-adjacency"><span class="header-section-number">1.3.2</span> Retrieval Strategy #1 Focused on Embeddings Search Followed by Knowledge Graph Adjacency</h3>
<p>With a populated vector store and knowledge graph, we are set to experiment with a wide array of retrieval strategies in pursuit of finding the best one to hydrate our prompt. Fig&nbsp;5 involves using the vector store to find the nearest matching embedding, find its reference in the knowledge graph, and then find the adjacent nodes within the knowledge graph to add to our prompt. This makes intuitive sense because concepts related to the initial node are likely to be relevant for the LLM in addressing the user’s query.</p>
<div id="fig-adjacency-strategy" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-adjacency-strategy-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="images/adjacency strategy.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-5" title="Figure&nbsp;5: One strategy of retrieval through first finding a close embedding, and then utilizing the adjacency of nodes in the knowledge graph to hydrate the prompt"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/adjacency strategy.png" class="img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-adjacency-strategy-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: One strategy of retrieval through first finding a close embedding, and then utilizing the adjacency of nodes in the knowledge graph to hydrate the prompt
</figcaption>
</figure>
</div>
</section>
<section id="retrieval-strategy-2-focused-on-graph-query-generation" class="level3 page-columns page-full" data-number="1.3.3">
<h3 data-number="1.3.3" class="anchored" data-anchor-id="retrieval-strategy-2-focused-on-graph-query-generation"><span class="header-section-number">1.3.3</span> Retrieval Strategy #2 Focused on Graph Query Generation</h3>
<p>Another retrieval strategy would switch the knowledge graph and vector store steps around. This will involve an extra call to the LLM in order to construct the query we’ll send to the knowledge graph. Once the nodes(and edges) are returned, we can trace the node to its referenced embedding, and retrieve the neighborhood of embeddings along with their text. Alternatively, we can ignore the embeddings and simply focus on the neighborhood of the returned nodes. For the example in Fig&nbsp;6, I’ll focus on the former. As much as we both love flowcharts, I have a feeling you’re getting somewhat tired of them. That said, here’s one more.</p>
<div id="fig-graph-query-retrieval" class="preview-image quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-graph-query-retrieval-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="images/nearest embedding strategy.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-6" title="Figure&nbsp;6: Another strategy for retrieval is to generate queries against the graph database containing the knowledge graph, and then."><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/nearest embedding strategy.png" class="preview-image img-fluid figure-img column-page"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-graph-query-retrieval-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Another strategy for retrieval is to generate queries against the graph database containing the knowledge graph, and then.
</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="finding-a-benchmark" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Finding a benchmark</h1>
<p>In order to benchmark the performance of this RAG + Knowledge Graph flow, we need to find a dataset or datasets that are commonly used for benchmarking RAG pipelines as well as some metrics used. We can go back to the <a href="https://github.com/hymie122/RAG-Survey">survey</a> mentioned in the section on RAG and look at its corresponding <a href="https://arxiv.org/pdf/2312.10997.pdf">arxiv.org paper</a>. Within it, there is a table of tasks as seen in Fig&nbsp;7 and a table of metrics used Fig&nbsp;8.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[30, 70]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 30.0%;justify-content: flex-start;">
<div id="fig-rag-datasets" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rag-datasets-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/paste-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Figure&nbsp;7: RAG Datasets"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/paste-2.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rag-datasets-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: RAG Datasets
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 70.0%;justify-content: flex-start;">
<div id="fig-rag-metrics" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rag-metrics-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/paste-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Figure&nbsp;8: RAG Metrics"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/paste-3.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rag-metrics-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: RAG Metrics
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>This is a perfect starting point because now we have a smorgasbord of references to peruse to gain an understanding of how to best proceed with benchmarking. The first option that comes to mind is the GraphQA subtask; however, looking into the mentioned paper on arxiv, <a href="https://arxiv.org/pdf/2402.07630.pdf">G-Retriever: Retrieval-Augmented Generation for Textual Graph Understanding and Question Answering</a>, it is evident that it is concerned with creating a graph dataset for the purpose of benchmarking the ability of an LLM to chat with graphs. Which adjacently relevant, our current goal is to use knowledge graphs as tools in retrieval, and not the main subject of a <em>question-answering</em>(QA) task.</p>
<section id="hotpot-and-beer" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="hotpot-and-beer"><span class="header-section-number">2.1</span> Hotpot and Beer?</h2>
<p>Single-hop benchmarking appears to be most popular according to the RAG survey, however, we have more faith in knowledge graphs than a measly single-hop reasoning task. A single-hop requires the information from a single document to answer a question, however a multi-hop task requires you to hop between documents in order to answer the question. HotPotQA appears to be the most popular multi-hop dataset. Mentioned immediately on the <a href="https://hotpotqa.github.io">HotPotQA website</a> is another dataset which they shout out as newer, with a more diverse set of hops required, while including the HotPotQA dataset within it - <a href="https://beerqa.github.io">BeerQA</a>(is anyone else thirsty…). It combines QA data from three datasets, being HotPotQA, SQuAD, and its own formulated questions from Wikipedia for even <strong>more</strong> hops. Upon further inspection, BeerQA specifies that it primarily focuses on a <em>fullwiki</em> evaluation, that is to say, you must use the entirety of wikipedia in the task. Due to time and resource constraints, we do not currently want to build a knowledge graph from a 24GB dataset from the get-go. We do, however, want to be able to iterate in a quick and agile manner. HotPotQA doesn’t have the same compute-heavy requirement, and neither does another amusingly named dataset.</p>
</section>
<section id="musique" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="musique"><span class="header-section-number">2.2</span> MuSiQue to my ears</h2>
<p>According to the <a href="https://arxiv.org/pdf/1809.09600.pdf">HotpotQA paper</a>, it also has the option for using the full wiki in the evaluation criterion, however, it also has a <em>distractor</em> option where you’re given 2 ‘gold’ paragraphs containing the connecting information coupled with 8 irrelevant ‘distractors’ that serve as noise. Another dataset was created as an improvement over HotpotQA as well as its successor, 2WikiMultihopQA – <a href="https://arxiv.org/pdf/2108.00573.pdf"><strong>MuSiQue</strong></a>(Multihop Questions via Single-hop QUestion Composition) improves over its predecessors and includes questions with upwards of 18 distractors and numerous <em>gold</em> paragraphs in order to create questions of up to 4 hops. In addition, it handles some cases that would’ve allowed cheating within HotPotQA(such as inferring the information that is present in the hops). In addition, MuSiQue adds <strong>answerability</strong> to the mix – roughly half of the questions are unanswerable given the data, with the breadcrumbs provided by the provided distractors being misleading.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[30,70]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 30.0%;justify-content: flex-start;">
<p>This is a great augmentation because this is the type of eval that will often be present in the real world, since we often expect real world retrieval of information retrieval to come up short.</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 70.0%;justify-content: flex-start;">
<div id="fig-mus-q" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-mus-q-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/mus_hop.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="Figure&nbsp;9: Answerable and Nonanswerable Multihop Questions"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/mus_hop.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-mus-q-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Answerable and Nonanswerable Multihop Questions
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>MuSiQue contains two evaluations, one with only answerable questions, and the other, evenly divided between non-answerable and answerable questions. If we look at the MuSiQue leaderboards in Fig&nbsp;10, we see that the F1 score(harmonic mean of precision and recall – the higher the better) is substantially better for the Answerable dataset, as it removed the option of there being unanswerable questions for the models to hallucinate on.</p>
<div id="fig-leaderboard" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-leaderboard-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="images/musique-leaderboards.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Figure&nbsp;10: MuSiQue Leaderboard Comparison"><img src="https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/images/musique-leaderboards.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-leaderboard-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: MuSiQue Leaderboard Comparison
</figcaption>
</figure>
</div>
<p>Before wrapping up, I’d like to at least share some of the dev dataset meant to be used in the development of your data pipeline, published in the <a href="https://github.com/StonyBrookNLP/musique">MuSiQue github repo</a>.</p>
<div style="max-height: 200px; overflow: auto">
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-0\notebooks\musique_eda.ipynb" data-notebook-title="Example usage" data-notebook-cellid="cell-1">
<div id="cell-1" class="cell" data-tags="[&quot;musique_entry&quot;]" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jsonlines</span>
<span id="cb2-2"></span>
<span id="cb2-3">js_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> jsonlines.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/musique_full_v1.0_dev.jsonl'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> reader:</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb2-6">        js_list.append(reader.read())</span>
<span id="cb2-7">js_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>{'id': '2hop__153573_109006',
 'paragraphs': [{'idx': 0,
   'title': 'History of the Internet',
   'paragraph_text': "Precursors to the web browser emerged in the form of hyperlinked applications during the mid and late 1980s (the bare concept of hyperlinking had by then existed for some decades). Following these, Tim Berners - Lee is credited with inventing the World Wide Web in 1989 and developing in 1990 both the first web server, and the first web browser, called WorldWideWeb (no spaces) and later renamed Nexus. Many others were soon developed, with Marc Andreessen's 1993 Mosaic (later Netscape), being particularly easy to use and install, and often credited with sparking the internet boom of the 1990s. Today, the major web browsers are Firefox, Internet Explorer, Google Chrome, Opera and Safari.",
   'is_supporting': False},
  {'idx': 1,
   'title': 'Ceville',
   'paragraph_text': "Ceville is a humorous graphic adventure video game developed by the German game studio Realmforge Studios and published by Kalypso Media. Despite the game's use of 3D environments and models, the gameplay is very true to the graphical point-and-click adventure tradition of gameplay, immortalized by game series like Monkey Island from LucasArts and the King's Quest series from Sierra Online.",
   'is_supporting': False},
  {'idx': 2,
   'title': 'Zipline Safari',
   'paragraph_text': "Zipline Safari is a zip-line course in Florida. It is the only zip-line course in the state, and is claimed to be the world's only zip-line created for flat land. Zipline Safari opened on 16 January 2009 in Forever Florida, a wildlife attraction near Holopaw, Florida. The zip-line cost $350,000 to build, and consists of nine platforms built up from the ground and traveled between by zip-lining. Forever Florida built the course to promote ecotourism and interaction with the natural environment of Florida.",
   'is_supporting': False},
  {'idx': 3,
   'title': 'Parc Safari',
   'paragraph_text': "Parc Safari is a zoo in Hemmingford, Quebec, Canada, and is one of the region's major tourist attractions; that has both African &amp; Asian species of elephant.",
   'is_supporting': False},
  {'idx': 4,
   'title': 'The Reporter (TV series)',
   'paragraph_text': 'The Reporter is an American drama series that aired on CBS from September 25 to December 18, 1964. The series was created by Jerome Weidman and developed by executive producers Keefe Brasselle and John Simon.',
   'is_supporting': False},
  {'idx': 5,
   'title': 'Earthworm Jim 4',
   'paragraph_text': 'Earthworm Jim 4 is a video game in the "Earthworm Jim" series. It was originally announced by Interplay Entertainment in 2008, and referred to by Interplay as "still in development" in May 2011. Later commentary from individual developers would claim that development hadn\'t started, though desire to create a new entry in the series remained. In May 2019, it was announced that the game was to begin development exclusively for the upcoming Intellivision Amico console.',
   'is_supporting': False},
  {'idx': 6,
   'title': 'Adobe Flash Player',
   'paragraph_text': 'Availability on desktop operating systems Platform Latest version Browser support Windows XP and later Windows Server 2003 and later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera, Internet Explorer, Microsoft Edge Windows 2000 11.1. 102.55? Windows 98 and ME 9.0. 115.0? Windows 95 and NT 4 7.0. 14.0? Mac OS X 10.6 or later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera Mac OS X 10.5 10.3. 183.90? Classic Mac OS, PowerPC 7.0. 14.0? Classic Mac OS, 68k 5.0? Linux 27.0. 0.183 Firefox, Chrome, Chromium, Opera',
   'is_supporting': False},
  {'idx': 7,
   'title': 'Apple Inc.',
   'paragraph_text': "Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, and the HomePod smart speaker. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.",
   'is_supporting': False},
  {'idx': 8,
   'title': 'Philadelphia Zoo',
   'paragraph_text': 'The Philadelphia Zoo, located in the Centennial District of Philadelphia, Pennsylvania, on the west bank of the Schuylkill River, was the first true zoo in the United States. Chartered by the Commonwealth of Pennsylvania on March 21, 1859, its opening was delayed by the American Civil War until July 1, 1874. It opened with 1,000 animals and an admission price of 25 cents. For a brief time, the zoo also housed animals brought over from safari on behalf of the Smithsonian Institution, which had not yet built the National Zoo.',
   'is_supporting': False},
  {'idx': 9,
   'title': 'Web browser',
   'paragraph_text': "Apple's Safari had its first beta release in January 2003; as of April 2011, it had a dominant share of Apple-based web browsing, accounting for just over 7% of the entire browser market.",
   'is_supporting': False},
  {'idx': 10,
   'title': 'List of The 100 episodes',
   'paragraph_text': 'The 100 (pronounced The Hundred) is an American post-apocalyptic science fiction drama television series developed by Jason Rothenberg, which premiered on March 19, 2014, on The CW. It is loosely based on a 2013 book of the same name, the first in a book series by Kass Morgan. The series follows a group of teens as they become the first people from a space habitat to return to Earth after a devastating nuclear apocalypse.',
   'is_supporting': False},
  {'idx': 11,
   'title': 'Shiira',
   'paragraph_text': 'Shiira (シイラ, Japanese for the common dolphin-fish) is a discontinued open source web browser for the Mac OS X operating system. According to its lead developer Makoto Kinoshita, the goal of Shiira was "to create a browser that is better and more useful than Safari". Shiira used WebKit for rendering and scripting. The project reached version 2.3 before it was discontinued, and by December 2011 the developer\'s website had been removed.',
   'is_supporting': False},
  {'idx': 12,
   'title': 'Traffic Department 2192',
   'paragraph_text': 'Traffic Department 2192 is a top down shooter game for IBM PC, developed by P-Squared Productions and released in 1994 by Safari Software and distributed by Epic MegaGames. The full game contains three episodes (Alpha, Beta, Gamma), each with twenty missions, in which the player pilots a "hoverskid" about a war-torn city to complete certain mission objectives. The game was released as freeware under the Creative Commons License CC BY-ND 3.0 in 2007.',
   'is_supporting': False},
  {'idx': 13,
   'title': 'Maciej Stachowiak',
   'paragraph_text': "Maciej Stachowiak (; born June 6, 1976) is a Polish American software developer currently employed by Apple Inc., where he is a leader of the development team responsible for the Safari web browser and WebKit Framework. A longtime proponent of open source software, Stachowiak was involved with the SCWM, GNOME and Nautilus projects for Linux before joining Apple. He is actively involved the development of web standards, and is a co-chair of the World Wide Web Consortium's HTML 5 working group and a member of the Web Hypertext Application Technology Working Group steering committee.",
   'is_supporting': False},
  {'idx': 14,
   'title': 'Ellery Queen (TV series)',
   'paragraph_text': 'Ellery Queen is an American TV series, developed by Richard Levinson and William Link, who based it on the fictional character of the same name. The series ran on NBC from September 11, 1975, to April 4, 1976 featuring the titular fictional sleuth. The series stars Jim Hutton as the titular character, and David Wayne as his father, Inspector Richard Queen.',
   'is_supporting': False},
  {'idx': 15,
   'title': 'Hunting',
   'paragraph_text': 'In the 19th century, southern and central European sport hunters often pursued game only for a trophy, usually the head or pelt of an animal, which was then displayed as a sign of prowess. The rest of the animal was typically discarded. Some cultures, however, disapprove of such waste. In Nordic countries, hunting for trophies was—and still is—frowned upon. Hunting in North America in the 19th century was done primarily as a way to supplement food supplies, although it is now undertaken mainly for sport.[citation needed] The safari method of hunting was a development of sport hunting that saw elaborate travel in Africa, India and other places in pursuit of trophies. In modern times, trophy hunting persists and is a significant industry in some areas.[citation needed]',
   'is_supporting': False},
  {'idx': 16,
   'title': 'Safari School',
   'paragraph_text': 'Safari School is a BBC Two reality television series presented by Dr Charlotte Uhlenbroek in which eight celebrities take part in a four-week ranger training course in the Shamwari Game Reserve in South Africa.',
   'is_supporting': False},
  {'idx': 17,
   'title': 'African Safari Wildlife Park',
   'paragraph_text': 'The African Safari Wildlife Park is a drive through wildlife park in Port Clinton, Ohio, United States. Visitors can drive through the preserve and watch and feed the animals from their car. Visitors can spend as much time in the preserve as they wish, observing and feeding the animals, before proceeding to the walk through part of the park, called Safari Junction. The park is closed during the winter.',
   'is_supporting': False},
  {'idx': 18,
   'title': 'White armored car',
   'paragraph_text': 'The White armored car was a series of armored cars developed by the White Motor Company in Cleveland, Ohio from 1915.',
   'is_supporting': False},
  {'idx': 19,
   'title': 'Blue Tea Games',
   'paragraph_text': 'The 14th game of this series. The BETA game was released in September 2017. This episode will be developed by Blue Tea Games who return to the series since 2014.',
   'is_supporting': False}],
 'question': "Who developed the eponymous character from the series that contains Mickey's Safari in Letterland?",
 'question_decomposition': [{'id': 153573,
   'question': "What series is Mickey's Safari in Letterland from?",
   'answer': 'Mickey Mouse',
   'paragraph_support_idx': None},
  {'id': 109006,
   'question': 'Who developed #1 ?',
   'answer': 'Walt Disney',
   'paragraph_support_idx': None}],
 'answer': 'Walt Disney',
 'answer_aliases': [],
 'answerable': False}</code></pre>
</div>
</div>
</div>
</div>
<p>This is but one entry in the <code>jsonl</code> file. Although it has an answer <code>'answer': 'Walt Disney'</code>, there is not enough supporting evidence within the 20 accompanying paragraph to substantiate that and so it has a label of&nbsp;<code>'answerable': False</code>. Each paragraph has a <code>is_supporting</code> label that is to be used in evaluating the pipeline’s ability to not only use the information found in these paragraphs, but to also classify these paragraphs as being supporting elements.</p>
<p>And furthermore, here are examples of a couple of gold paragraphs from another question, where <code>is_supporting == True</code>. Here you can witness for yourself the necessary connection between Lloyd Dane and the county of his birthplace. Just one of the paragraphs by itself wouldn’t be enough to make that connection:</p>
<div class="quarto-embed-nb-cell" data-notebook="C:\Users\dmley\OneDrive\Desktop\Sites\dmitriyleybel.github.io\technical_blog\knowledge-graph-rag-benchmark\knowledge-graph-rag-benchmark-0\notebooks\musique_eda.ipynb" data-notebook-title="Example usage" data-notebook-cellid="cell-8">
<div id="cell-8" class="cell" data-tags="[&quot;gold_examples&quot;]" data-execution_count="21">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">display(js_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>])</span>
<span id="cb4-2"></span>
<span id="cb4-3">p_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> paragraph <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> js_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paragraphs'</span>]:</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> paragraph.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_supporting'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb4-6">        p_list.append(paragraph)</span>
<span id="cb4-7">pprint(p_list)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<pre><code>"Which county does Lloyd Dane's birthplace belong to?"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'idx': 3,
  'is_supporting': True,
  'paragraph_text': 'Lloyd Dane (August 19, 1925 – December 11, 2015) was a '
                    'NASCAR Grand National Series driver from Eldon, Missouri. '
                    'He participated part-time in the 1951 and 1954 to 1964 '
                    'seasons, capturing four wins, all in his own car. Two of '
                    "Dane's wins came during the 1956 season, when he finished "
                    'a career best 23rd in points.',
  'title': 'Lloyd Dane'},
 {'idx': 11,
  'is_supporting': True,
  'paragraph_text': 'Eldon is a city in Miller County, Missouri, United '
                    'States, located thirty miles southwest of Jefferson City. '
                    'The population was 4,567 at the 2010 census.',
  'title': 'Eldon, Missouri'}]</code></pre>
</div>
</div>
</div>
</section>
</section>
<section id="finalemore-of-a-cliffhanger" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Finale(more of a cliffhanger)</h1>
<p>That’s it for this initial explanatory and exploratory chapter. In the next post, we’ll dive into constructing knowledge graphs from the provided paragraphs used to answer the questions or deem them unanswerable.</p>
<p><a href="../../../technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html"><strong>Onwards to part one &gt;&gt;</strong></a></p>


</section>

 ]]></description>
  <category>knowledge-graphs</category>
  <category>rag</category>
  <category>benchmarking</category>
  <guid>https://www.dmlbl.com/technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/</guid>
  <pubDate>Fri, 05 Apr 2024 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
