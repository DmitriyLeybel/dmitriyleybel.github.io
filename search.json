[
  {
    "objectID": "technical_blog.html",
    "href": "technical_blog.html",
    "title": "Technical Blog",
    "section": "",
    "text": "Thinking Out Loud \n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJun 11, 2024\n\n\nLLMs, Brains, Physical Reality. Can Large Language Models really lead to superintelligence?\n\n\nDmitriy Leybel\n\n\n\n\n\nNo matching items\n\n\n\n\nKnowledge Graph RAG Benchmarking Series \n\n\n\n\n\n\n\n\n\n\n\n\nDon’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero\n\n\n\n\n\n\nknowledge-graphs\n\n\nrag\n\n\nbenchmarking\n\n\n\nFoundational preamble to the benchmarking of knowledge graph-centric RAG flows\n\n\n\n\n\nApr 5, 2024\n\n\nDmitriy Leybel\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One\n\n\n\n\n\n\nknowledge-graphs\n\n\nrag\n\n\nbenchmarking\n\n\n\nGoing into the nitty gritty (theoretical) details and nuances of building knowledge graphs with Large Language Models\n\n\n\n\n\nApr 12, 2024\n\n\nDmitriy Leybel\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two\n\n\n\n\n\n\nknowledge-graphs\n\n\nrag\n\n\nbenchmarking\n\n\n\nBuilding a knowledge graph in Python with Claude 3 Haiku(Works for ≥ GPT 3.5 as well)\n\n\n\n\n\nApr 20, 2024\n\n\nDmitriy Leybel\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three\n\n\n\n\n\n\nknowledge-graphs\n\n\nrag\n\n\nbenchmarking\n\n\n\nHybridizing our Knowledge Graphs With Vector Databases\n\n\n\n\n\nApr 23, 2024\n\n\nDmitriy Leybel\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four\n\n\n\n\n\n\nknowledge-graphs\n\n\nrag\n\n\nbenchmarking\n\n\nvector-databases\n\n\n\nBuilding the answering segment of the QA system centering around the knowledge graph and vector db once both are populated.\n\n\n\n\n\nMay 16, 2024\n\n\nDmitriy Leybel\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four",
    "section": "",
    "text": "On the last episode of: Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three:"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#prompt-template",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#prompt-template",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four",
    "section": "3.1 Prompt Template",
    "text": "3.1 Prompt Template\nFirst, we need a system message that helps guide our model along, delivers and understanding of the input, and gently coerces it to output an aptly formatted answer.\n\n\nfrom langchain_core.messages import SystemMessage\n\nguidance_str = \\\n\"You are the best taker of tests, particularly excelling at \\\nanswering questions based on information provided to you. \\\nYou will be given nodes and edges from a knowledge graph in \\\na JSON format and you are expected to answer a question based \\\non them. The 'from_node' and 'to_node' fields in the edges correspond \\\nto the 'connecting_id' fields in the nodes. \\\nYour output will only be JSON, and nothing more. \\\nNo yapping.\\n\"\n\nclass Answer(BaseModel):\n    answerable: bool = Field(..., description=\"true or false value. Whether or not the answer is answerable based on the provided nodes and edges\")\n    answer: str = Field(..., description=\"The answer to the question. Terse and concise.\")\n    support_idxs: List[int] = Field(..., description=\"The indices of the nodes that support the answer. From 'paragraph_idx' field\")\n\nformat_str = f\"This JSON Schema is the format you will be using: {json.dumps(Answer.model_json_schema())}\"\n\nsystem_message = SystemMessage(guidance_str + format_str)\n\n\nThe guidance_str lays out what I described above. We also provide the ‘format_str’, which includes a JSON dump of the Answer class schema, brought to you by Pydantic, although this time it’s a bit less convoluted than the one used to create the nodes and edges of our knowledge graph.\nIn addition to the System message, we also need to add the Human message template to our pipeline which will allow us to pass in the question and evidence.\n\n\nhuman_str = \"Question: {question}\\n\\n Supporting Evidence:\\n {evidence}\"\nhuman_template = HumanMessagePromptTemplate.from_template(human_str)"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#transforming-the-evidence",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#transforming-the-evidence",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four",
    "section": "4.1 Transforming the Evidence",
    "text": "4.1 Transforming the Evidence\nNow that we have the nodes, we need to grab their edges, and then transform both into a format that will be easily digestible for the LLM. We will still feed the nodes and edges as JSON strings, but we’ll need to augment it to replace UUIDs with something less complex like a monotonically increasing integer. This way, the LLM can use integers like 0 and 1 instead of 5f092031-cf0d-408c-a4f1-896e7c8607be and bc1c5af9-c311-4e9f-975d-349d33d41a15 when interpreting the from_node and to_node fields of the edges.\n\n\n\nimport copy\n\nnode_hist_dict = {} # idx: obj mapping\nedge_hist_dict = {} # (from_idx, to_idx): obj mapping\nuuid_list = [] # used for dup checking\nid_counter = 0 # used for creating new easily-parseable ids\nfor top_uuid in top_uuids:\n    top_idx = node_indices[top_uuid]\n    uuid_list.append(top_uuid)\n    successor_idxs = [('s', successor) for successor in digraph.successor_indices(top_idx)]\n    predecessor_idxs = [('p', predecessor) for predecessor in digraph.predecessor_indices(top_idx)]\n    neighbor_idxs = successor_idxs + predecessor_idxs\n    if top_idx not in node_hist_dict: # Add the top node if it's not already in the node_hist_dict\n        main_node = copy.deepcopy(digraph[top_idx])\n        main_node['connecting_id'] = id_counter\n        node_hist_dict[top_idx] = main_node\n        id_counter += 1\n    else:\n        main_node = node_hist_dict[top_idx]\n    if (len(neighbor_idxs) &gt; 0):\n        for connection_type, idx in neighbor_idxs: \n            if idx in node_hist_dict:\n                secondary_connecting_id = node_hist_dict[idx]['connecting_id']\n            else:\n                secondary_connecting_id = id_counter\n                node_hist_dict[idx] = copy.deepcopy(digraph[idx])\n                node_hist_dict[idx]['connecting_id'] = secondary_connecting_id\n                id_counter += 1\n            # If the connections are already in the edge_hist_dict, skip\n            if ((connection_type == 's' and (top_idx, idx) in edge_hist_dict) or \n                (connection_type == 'p' and (idx, top_idx) in edge_hist_dict)):\n                continue\n            elif connection_type == 's':\n                edge_hist_dict[(top_idx, idx)] = copy.deepcopy(digraph.get_edge_data(top_idx, idx))\n                edge_hist_dict[(top_idx, idx)]['from_node'] = main_node['connecting_id']\n                edge_hist_dict[(top_idx, idx)]['to_node'] = secondary_connecting_id\n            elif connection_type == 'p':\n                edge_hist_dict[(idx, top_idx)] = copy.deepcopy(digraph.get_edge_data(idx, top_idx))\n                edge_hist_dict[(idx, top_idx)]['from_node'] = secondary_connecting_id\n                edge_hist_dict[(idx, top_idx)]['to_node'] = main_node['connecting_id']\n\n\n\n\n\n\n\n\n\nFor the astute reader, you may have noticed that we could’ve just used the integer values that are the indices of the nodes in the network graph. Intuitively, it makes more sense to me to use smaller integers by creating a new counter for each presentation of evidence. In practice, this may not be the case.\n\n\n\n\n\n\nLets take a look at what the evidence will look like:\n\n\n\npprint(list({**node_hist_dict, **edge_hist_dict}.values()))\n\n[{'attributes': {'definition': 'a belt of coastal waters extending at most 12 '\n                               'nautical miles (22.2 km; 13.8 mi) from the '\n                               'baseline (usually the mean low-water mark) of '\n                               'a coastal state',\n                 'name': 'territorial waters',\n                 'source': '1982 United Nations Convention on the Law of the '\n                           'Sea'},\n  'category': 'geographic_area',\n  'connecting_id': 0,\n  'paragraph_idx': 18,\n  'semantic_id': 'territorial_waters'},\n {'attributes': {'name': 'coastal state'},\n  'category': 'legal_entity',\n  'connecting_id': 1,\n  'semantic_id': 'coastal_state'},\n {'attributes': {'definition': 'usually the mean low-water mark of a coastal '\n                               'state',\n                 'name': 'baseline'},\n  'category': 'geographic_feature',\n  'connecting_id': 2,\n  'semantic_id': 'baseline'},\n {'attributes': {'definition': 'a belt of coastal waters extending at most 12 '\n                               'nautical miles (22.2 km; 13.8 mi) from the '\n                               'baseline (usually the mean low-water mark) of '\n                               'a coastal state',\n                 'foreign_ship_passage': 'innocent passage through it or '\n                                         'transit passage for straits',\n                 'jurisdiction': 'extends to airspace over and seabed below',\n                 'name': 'territorial sea',\n                 'sovereign_territory': True},\n  'category': 'geographic_area',\n  'connecting_id': 3,\n  'paragraph_idx': 18,\n  'semantic_id': 'territorial_sea'},\n {'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage '\n                         'Board',\n                 'type': 'water_management'},\n  'category': 'administrative_body',\n  'connecting_id': 4,\n  'semantic_id': 'hmwssb'},\n {'attributes': {'apolitical': True,\n                 'covers': ['ghmc_area', 'suburbs_of_ghmc_area'],\n                 'jurisdiction_size': 'largest',\n                 'name': 'Hyderabad Metropolitan Development Authority (HMDA) '\n                         'area',\n                 'type': 'urban_planning_agency'},\n  'category': 'administrative_district',\n  'connecting_id': 5,\n  'paragraph_idx': 6,\n  'semantic_id': 'hmda_area'},\n {'category': 'belongs_to', 'from_node': 0, 'to_node': 1},\n {'category': 'extends_from', 'from_node': 0, 'to_node': 2},\n {'category': 'extends_from', 'from_node': 3, 'to_node': 2},\n {'category': 'belongs_to', 'from_node': 3, 'to_node': 1},\n {'category': 'manages', 'from_node': 5, 'to_node': 4}]\n\n\n\n\nYou can now see the nodes have connecting_ids 0-4 which are then used in the from_node and to_node fields of the edges."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#moment-of-truth",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#moment-of-truth",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four",
    "section": "5.1 Moment of truth",
    "text": "5.1 Moment of truth\nWe can now instantiate the pipeline, pass in the question and evidence, then run it.\n\n\nanswer_pipe = combined_template | chat_model | output_parser\n\nevidence = str(list({**node_hist_dict, **edge_hist_dict}.values()))\nquestion = lines[-2]['question']\nans = answer_pipe.invoke({'question': question, 'evidence': evidence})\n\n\n\n\nquestion, ans, lines[-2]['answer']\n\n('What is the body of water by the city where Zvezda stadium is located?',\n Answer(answerable=True, answer='The Hussain Sagar lake', support_idxs=[5, 6]),\n 'Kama River')\n\n\n\n\n\n\nIt’s okay to feel all sorts of things when you don’t get your expected result.\n\n\n\nWhat\n\nThe supporting evidence makes no mention of The Hussain Sagar lake, however I did look it up, and found that it is located in Hyderabad, which is in our evidence. Here, we see the model looking into its own trained knowledgebase and ignoring the evidence."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#copingdeal-with-it",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-4/index.html#copingdeal-with-it",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Combining Knowledge Graphs and Vector DBs to Answer Questions(With Sourcing) – Part Four",
    "section": "5.2 Coping(Deal with it)",
    "text": "5.2 Coping(Deal with it)\nI’m not going to lie to you; I was not expecting the correct answer on the first trial run. Once we have an end-to-end pipeline established, it needs to be tuned to the task at hand. In order to tune a model, the best practice is to understand where its deficiencies lie.\nAccording to the dataset, the supporting evidence comes from paragraphs 10 and 11, neither of which made it to our evidence.\n10:\n   Perm (;) is a city and the administrative centre of Perm Krai, Russia, located on\n   the banks of the Kama River in the European part of Russia near the Ural Mountains.\n11:\n   Star (Zvezda) Stadium (), until 1991 Lenin Komsomol Stadium (), is a multi-use stadium in\n   Perm, Russia. It is currently used mostly for football matches and is the home ground of FC\n   Amkar Perm. The stadium holds 17,000 people and was opened on June 5, 1969.\nNot only was the answer wrong, but the LLM believed that the question was answerable given the available evidence.\n\n5.2.1 Is a more potent model the answer?\nGiven that the evidence does not contribute to the correct answer, we can say that our model is hallucinating due to it marking it as answerable and giving us the wrong answer. Weak models tend to hallucinate often. Could this be the case here? Lets use a more powerful model to test out our hypothesis.\n\n\nchat_model_adv = ChatAnthropic(model_name=\"claude-3-opus-20240229\")\nanswer_pipe = combined_template | chat_model_adv | output_parser\n\nevidence = str(list({**node_hist_dict, **edge_hist_dict}.values()))\nquestion = lines[-2]['question']\nans_adv = answer_pipe.invoke({'question': question, 'evidence': evidence})\n\n\nThis is a more sensible answer, using the evidence correctly; no good evidence, not answerable. As things should be.\nIt will be useful to outline the problems and their corresponding potential solutions to explore.\nProblem 1: The LLM believes the question is answerable, when it is not and the model hallucinates information.\nSolution 1a: Use a more powerful model. This isn’t a hard ask, given the exponential improvement and falling costs.\nSolution 1b: Add a chain-of-thought step. e.g. add a field to the output template that produces the reasoning behind the answer. This may be an acceptable solution when combined with a weak model.\n\n\n5.2.2 Graph Woes\nThe evidence returned by our pipeline is inadequate. We can look through the knowledge graph carefully and see that the nodes and edges present in the knowledge graphs contain information that IS capable of answering the question.\nThe following nodes are present within the knowledge graph:\n{'semantic_id': 'star_stadium',\n                'category': 'stadium',\n                'attributes': {'name': 'Star (Zvezda) Stadium',\n                 'former_name': 'Lenin Komsomol Stadium',\n                 'location': {'city': 'Perm', 'country': 'Russia'},\n                 'usage': 'football matches',\n                 'home_team': 'FC Amkar Perm',\n                 'capacity': 17000,\n                 'opened': '1969-06-05'}}})\n{'semantic_id': 'perm',\n                'category': 'city',\n                'attributes': {'name': 'Perm',\n                 'location': {'river': 'Kama River',\n                  'region': 'Perm Krai',\n                  'country': 'Russia',\n                  'geography': 'European part of Russia near the Ural Mountains'},\n                 'administrative_status': 'administrative centre'}}})\nAs is the connection between them:\n{'from_node': UUID('08f207c1-6915-4237-ac4e-902815d9cfae'),\n                'to_node': UUID('5be79bf7-cd2a-487f-8833-36ae11257df8'),\n                'category': 'located_in'}})\nWe’ve found a limitation of the semantic search. The semantics/vibes of the question matched the incorrect evidence. We can’t say exactly why, but it could simply be the amount of water-adjaced terminology found in the question and the answer. Or it could be something else entirely. This sort of latent space analysis is tough, and sometimes impossible to do well.\nProblem 2: Searching our vector store for the correct nodes is inadequate. We need more than merely capture the gist of the passage based on the encoding.\nSolution 2a: Use a HyDE approach where we can use an LLM to generate hypothetical questions to accompany the node information dump, so that the vector search is more likely to match the embedding of the question to the node.\nSolution 2b: Hybrid search. By combining a sparse search(word-matching) and a dense search(embedding-based), we can capture the exact terminology of the question better. “Svezda stadium” would be a more likely match in that case. Also, because ‘svezda’ is a Russian word for ‘star’, the dense/semantic search would be more likely to capture the node if someone asks about “Star Stadium”, even though ‘Svezda’ isn’t part of the question."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "",
    "text": "On the last episode of: Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One:\nFinally, we’re getting to the fun part. Like many, I thought this day would never come, but here we are.\nI’m going to introduce the numerous components we’ll be using, and then combine them into our knowledge graph creation pipeline."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#graph_analyst_template",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#graph_analyst_template",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "2.1 graph_analyst_template",
    "text": "2.1 graph_analyst_template\nThis is the main system prompt template. It’s going to inform the LLM of its purpose, the format we expect it to return to us, the format of what we send to it, and any history we want it to take into account when generating its response.\n\n2.1.1 Instructions (Pydantic and JSON Schema Magic)\nTo programatically build a knowledge graph, the output of the LLM will have to be very specific and in a format we can easily process. Foundational models like Claude 3 excel at processing code and various formatted specifications. The specification that’s of interest to us is the JSON Schema, which is designed to describe the structure of JSON data. Here are some examples of this specification. It describes the fields, their types, and any particular data structures you need in your JSON.\nI trust you’ve perused the examples and are not too stoked to write all of that out yourself. Well, you won’t have to because we can express the same thing in a cleaner pythonic format using the Pydantic library – it makes structured outputs a breeze. In fact, there are entire libraries, like Instructor that are centered on using Pydantic to generate structured output from LLMs that help you validate the output against the schema specification.\nThe nodes and edges we need to construct for the knowledge graph aren’t overly complex, but they do have their nuances and enough moving parts to warrant a systemic approach to their production.\n\n\n\n\n\n\nFigure 2: The node-edge structure we construct from the outputs.\n\n\n\nEach individual node has an identifier, a category, a variable number of attributes, the source text it was created from, and an identifier of the paragraph it was created from taken from the dataset itself. The LLM won’t have to generate all of the properties, as the paragraph ID is simply taken from the paragraph that creates it; in fact, it can probably be a list of IDs where that particular node is referenced. The edges are a degree simpler, as they just need a category, some attributes, and the nodes which they connect.\n\n\n\n\n\n\nPydantic, along with a similar sort of workflow can be generalized for structured extraction of any sort with LLMs. You define the JSON structure, feed the LLM a passage, and it extracts the fields you specified. This is a complete game-changer for machine learning and feature generation(much more exciting than chatbots, IMO).\n\n\n\n\n\n\nBelow, you’ll see each class represent a distinct JSON object, with the fields and instructions that the model will receive. By using the BaseModel superclass😎, we can create Pydantic classes with the following syntax:\n\n\n\nfrom pydantic import BaseModel, Field\nfrom typing import Dict, List, Union, Tuple, Optional\nimport json\n\nclass Node(BaseModel):\n    semantic_id: str = Field(..., description=\"The unique identifier of the node that is \\\n                             a reference to create edges between different nodes.\")\n    category: str = Field(..., description=\"The category of the node\")\n    attributes: Optional[Dict[str, Union[str, int, bool]]] = Field(None, description=\"Additional properties of the node\")\n\nclass Edge(BaseModel):\n    from_node: str = Field(..., description=\"The id of the node from which the edge originates. Only previously generated semantic_ids belong here, nothing else.\")\n    to_node: str = Field(..., description=\"The id of the node to which the edge connects. Only previously generated semantic_ids belong here, nothing else.\")\n    category: str = Field(..., description=\"The type of the relationship\")\n    attributes: Optional[Dict[str, Union[str, int, bool]]] = Field(None, description=\"Additional properties of the edge\")\n\nclass Graph(BaseModel):\n    nodes: List[Node] = Field(...,description=\"A list of nodes in the graph\")\n    edges: List[Edge] = Field(...,description=\"A list of edges in the graph\")\n\nGraph.model_json_schema()\n\n{'$defs': {'Edge': {'properties': {'from_node': {'description': 'The id of the node from which the edge originates. Only previously generated semantic_ids belong here, nothing else.',\n     'title': 'From Node',\n     'type': 'string'},\n    'to_node': {'description': 'The id of the node to which the edge connects. Only previously generated semantic_ids belong here, nothing else.',\n     'title': 'To Node',\n     'type': 'string'},\n    'category': {'description': 'The type of the relationship',\n     'title': 'Category',\n     'type': 'string'},\n    'attributes': {'anyOf': [{'additionalProperties': {'anyOf': [{'type': 'string'},\n         {'type': 'integer'},\n         {'type': 'boolean'}]},\n       'type': 'object'},\n      {'type': 'null'}],\n     'default': None,\n     'description': 'Additional properties of the edge',\n     'title': 'Attributes'}},\n   'required': ['from_node', 'to_node', 'category'],\n   'title': 'Edge',\n   'type': 'object'},\n  'Node': {'properties': {'semantic_id': {'description': 'The unique identifier of the node that is                              a reference to create edges between different nodes.',\n     'title': 'Semantic Id',\n     'type': 'string'},\n    'category': {'description': 'The category of the node',\n     'title': 'Category',\n     'type': 'string'},\n    'attributes': {'anyOf': [{'additionalProperties': {'anyOf': [{'type': 'string'},\n         {'type': 'integer'},\n         {'type': 'boolean'}]},\n       'type': 'object'},\n      {'type': 'null'}],\n     'default': None,\n     'description': 'Additional properties of the node',\n     'title': 'Attributes'}},\n   'required': ['semantic_id', 'category'],\n   'title': 'Node',\n   'type': 'object'}},\n 'properties': {'nodes': {'description': 'A list of nodes in the graph',\n   'items': {'$ref': '#/$defs/Node'},\n   'title': 'Nodes',\n   'type': 'array'},\n  'edges': {'description': 'A list of edges in the graph',\n   'items': {'$ref': '#/$defs/Edge'},\n   'title': 'Edges',\n   'type': 'array'}},\n 'required': ['nodes', 'edges'],\n 'title': 'Graph',\n 'type': 'object'}\n\n\n\n\nThe Graph class is the ultimate class we’re using to generate the JSON schema. It combines the Node and Edge classes into lists, as we want the final output to be a collection of nodes and the edges that connect them. model_json_schema() outputs the JSON schema of the format we want the LLM to return.\nIt may be worthwhile to read through the fields and their descriptions carefully, and mind the semantic_id in the Node class; its purpose is to allow the LLM to use that identifier in the from_node and to_node fields of the edges.\n\n\n\n\n\n\nYou can probably use Pydantic classes to describe the JSON output we need without even generating the JSON schema. Such is the magic of LLMs.\n\n\n\n\n\n\nIn addition to our fancy JSON schema generated with Pydantic, which already includes some descriptions of the fields, we need to pass in some instructions.\n\n\n\njson_rules = \\\n\"\"\"We need to create a JSON object that contains a list of nodes and edges that connect the nodes.\nBoth, nodes and edges, have optional attributes.\nYour goal is to extract as much pertinent information from the passage as possible and create nodes and edges with the extracted information.\nIf history is provided, it will be in the JSON schema you are given. You may create new connections between the nodes and edges in the history and the new nodes you are producing.\nIf you wish to change/update any of the node attributes in the provided history based on newly gathered information, simply reuse the semantic_ids of the nodes you wish to change.\nIf you wish to modify/update the edge attributes in the history, reuse the semantic_ids of the 'from' and 'to' nodes of any edge you wish to change.\nUse the following schema and make sure to read the descriptions:\n\"\"\" \n\njson_prompt_instructions = \\\n    json_rules + \\\n    json.dumps(Graph.model_json_schema()) + \\\n    \"\\n-----\\n\"\n\npprint(json_prompt_instructions)\n\n('We need to create a JSON object that contains a list of nodes and edges that '\n 'connect the nodes.\\n'\n 'Both, nodes and edges, have optional attributes.\\n'\n 'Your goal is to extract as much pertinent information from the passage as '\n 'possible and create nodes and edges with the extracted information.\\n'\n 'If history is provided, it will be in the JSON schema you are given. You may '\n 'create new connections between the nodes and edges in the history and the '\n 'new nodes you are producing.\\n'\n 'If you wish to change/update any of the node attributes in the provided '\n 'history based on newly gathered information, simply reuse the semantic_ids '\n 'of the nodes you wish to change.\\n'\n 'If you wish to modify/update the edge attributes in the history, reuse the '\n \"semantic_ids of the 'from' and 'to' nodes of any edge you wish to change.\\n\"\n 'Use the following schema and make sure to read the descriptions:\\n'\n '{\"$defs\": {\"Edge\": {\"properties\": {\"from_node\": {\"description\": \"The id of '\n 'the node from which the edge originates. Only previously generated '\n 'semantic_ids belong here, nothing else.\", \"title\": \"From Node\", \"type\": '\n '\"string\"}, \"to_node\": {\"description\": \"The id of the node to which the edge '\n 'connects. Only previously generated semantic_ids belong here, nothing '\n 'else.\", \"title\": \"To Node\", \"type\": \"string\"}, \"category\": {\"description\": '\n '\"The type of the relationship\", \"title\": \"Category\", \"type\": \"string\"}, '\n '\"attributes\": {\"anyOf\": [{\"additionalProperties\": {\"anyOf\": [{\"type\": '\n '\"string\"}, {\"type\": \"integer\"}, {\"type\": \"boolean\"}]}, \"type\": \"object\"}, '\n '{\"type\": \"null\"}], \"default\": null, \"description\": \"Additional properties of '\n 'the edge\", \"title\": \"Attributes\"}}, \"required\": [\"from_node\", \"to_node\", '\n '\"category\"], \"title\": \"Edge\", \"type\": \"object\"}, \"Node\": {\"properties\": '\n '{\"semantic_id\": {\"description\": \"The unique identifier of the node that '\n 'is                              a reference to create edges between '\n 'different nodes.\", \"title\": \"Semantic Id\", \"type\": \"string\"}, \"category\": '\n '{\"description\": \"The category of the node\", \"title\": \"Category\", \"type\": '\n '\"string\"}, \"attributes\": {\"anyOf\": [{\"additionalProperties\": {\"anyOf\": '\n '[{\"type\": \"string\"}, {\"type\": \"integer\"}, {\"type\": \"boolean\"}]}, \"type\": '\n '\"object\"}, {\"type\": \"null\"}], \"default\": null, \"description\": \"Additional '\n 'properties of the node\", \"title\": \"Attributes\"}}, \"required\": '\n '[\"semantic_id\", \"category\"], \"title\": \"Node\", \"type\": \"object\"}}, '\n '\"properties\": {\"nodes\": {\"description\": \"A list of nodes in the graph\", '\n '\"items\": {\"$ref\": \"#/$defs/Node\"}, \"title\": \"Nodes\", \"type\": \"array\"}, '\n '\"edges\": {\"description\": \"A list of edges in the graph\", \"items\": {\"$ref\": '\n '\"#/$defs/Edge\"}, \"title\": \"Edges\", \"type\": \"array\"}}, \"required\": [\"nodes\", '\n '\"edges\"], \"title\": \"Graph\", \"type\": \"object\"}\\n'\n '-----\\n')\n\n\n\n\nThis prompt states that if a history of nodes and edges is provided, then the LLM is at liberty to reuse those semantic ids in order to modify their respective nodes and edges. Doing this allows for the knowledge graph to grow more dynamically as it processes more information.\nFor example, if we have two separate chunks of text that the LLM is exposed to at different times, considering that there is some adjacency between the processing of the passages, since we won’t keep the entire history of nodes and edges in the context window.\n\nFido ran over the bridge\n\nand\n\nFido was hungry and stole a donut.\n\nThe semantic_id that identifies Fido would persist, so that the particular entity wouldn’t be duplicated.\n\n\n\n\n\n\nFigure 3: The semantic id allows for continuity of the entity ‘Fido’\n\n\n\n\n\n2.1.2 Content\nIn addition to the JSON formatting instructions, we give the model some high-level guidance. The placeholders are included as {instructions} where the previously constructed JSON instructions will go, and history where past nodes and edges will be inserted – the format isn’t critical, but we’ll stick to the JSON schema we’re using for the output.\n\n\ngraph_creator_content = \\\n\"\"\"You are a brilliant and efficient creator of JSON objects that capture the essence of passages and who follows instructions unbelievably well.\nYou will be first given instructions and a json schema, then you will be provided a passage to extract the information from.\nYou will only respond with valid JSON, nothing else.\nYour instructions are:\n{instructions}\nHistory:\n{history}\n\"\"\""
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#pass_passage_template",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#pass_passage_template",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "2.2 pass_passage_template",
    "text": "2.2 pass_passage_template\nThe human message portion of this template consists of something as simple as:\n\n\npass_passage_content = \"Below is the passage to extract the values from.\\n*****\\nPassage:\\n{passage}\"\n\n\nwhere {passage] is our placeholder for the chunk(s) of text we grab from our paragraphs."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#combining-the-prompt-templates",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#combining-the-prompt-templates",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "2.3 Combining the Prompt Templates",
    "text": "2.3 Combining the Prompt Templates\nTo create our Langchain pipeline, we wrap the templates we created in SystemMessagePromptTemplate and HumanMessagePromptTemplate classes, and then combine them into gen_template.\n\n\nfrom langchain_core.prompts import (\n    HumanMessagePromptTemplate,\n    SystemMessagePromptTemplate,\n)\n\ngraph_analyst_template = SystemMessagePromptTemplate.from_template(template=graph_creator_content,\n                                                                   input_variables=['history', 'instructions'])\npass_passage_template = HumanMessagePromptTemplate.from_template(pass_passage_content, input_variables=['passage'])\n\ngen_template = graph_analyst_template + pass_passage_template\n\ngen_template.invoke({'passage': paragraphs[0]['paragraph_text'],\n                     'history': '',\n                     'instructions': json_prompt_instructions})\n\n\nChatPromptValue(messages=[SystemMessage(content='You are a brilliant and efficient creator of JSON objects that capture the essence of passages and who follows instructions unbelievably well.\\nYou will be first given instructions and a json schema, then you will be provided a passage to extract the information from.\\nYou will only respond with valid JSON, nothing else.\\nYour instructions are:\\nWe need to create a JSON object that contains a list of nodes and edges that connect the nodes.\\nBoth, nodes and edges, have optional attributes.\\nYour goal is to extract as much pertinent information from the passage as possible and create nodes and edges with the extracted information.\\nIf history is provided, it will be in the JSON schema you are given. You may create new connections between the nodes and edges in the history and the new nodes you are producing.\\nIf you wish to change/update any of the node attributes in the provided history based on newly gathered information, simply reuse the semantic_ids of the nodes you wish to change.\\nIf you wish to modify/update the edge attributes in the history, reuse the semantic_ids of the \\'from\\' and \\'to\\' nodes of any edge you wish to change.\\nUse the following schema and make sure to read the descriptions:\\n{\"$defs\": {\"Edge\": {\"properties\": {\"from_node\": {\"description\": \"The id of the node from which the edge originates. Only previously generated semantic_ids belong here, nothing else.\", \"title\": \"From Node\", \"type\": \"string\"}, \"to_node\": {\"description\": \"The id of the node to which the edge connects. Only previously generated semantic_ids belong here, nothing else.\", \"title\": \"To Node\", \"type\": \"string\"}, \"category\": {\"description\": \"The type of the relationship\", \"title\": \"Category\", \"type\": \"string\"}, \"attributes\": {\"anyOf\": [{\"additionalProperties\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}, {\"type\": \"boolean\"}]}, \"type\": \"object\"}, {\"type\": \"null\"}], \"default\": null, \"description\": \"Additional properties of the edge\", \"title\": \"Attributes\"}}, \"required\": [\"from_node\", \"to_node\", \"category\"], \"title\": \"Edge\", \"type\": \"object\"}, \"Node\": {\"properties\": {\"semantic_id\": {\"description\": \"The unique identifier of the node that is                              a reference to create edges between different nodes.\", \"title\": \"Semantic Id\", \"type\": \"string\"}, \"category\": {\"description\": \"The category of the node\", \"title\": \"Category\", \"type\": \"string\"}, \"attributes\": {\"anyOf\": [{\"additionalProperties\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}, {\"type\": \"boolean\"}]}, \"type\": \"object\"}, {\"type\": \"null\"}], \"default\": null, \"description\": \"Additional properties of the node\", \"title\": \"Attributes\"}}, \"required\": [\"semantic_id\", \"category\"], \"title\": \"Node\", \"type\": \"object\"}}, \"properties\": {\"nodes\": {\"description\": \"A list of nodes in the graph\", \"items\": {\"$ref\": \"#/$defs/Node\"}, \"title\": \"Nodes\", \"type\": \"array\"}, \"edges\": {\"description\": \"A list of edges in the graph\", \"items\": {\"$ref\": \"#/$defs/Edge\"}, \"title\": \"Edges\", \"type\": \"array\"}}, \"required\": [\"nodes\", \"edges\"], \"title\": \"Graph\", \"type\": \"object\"}\\n-----\\n\\nHistory:\\n\\n'), HumanMessage(content=\"Below is the passage to extract the values from.\\n*****\\nPassage:\\nThe Commonwealth of the Philippines (; ) was the administrative body that governed the Philippines from 1935 to 1946, aside from a period of exile in the Second World War from 1942 to 1945 when Japan occupied the country. It replaced the Insular Government, a United States territorial government, and was established by the Tydings–McDuffie Act. The Commonwealth was designed as a transitional administration in preparation for the country's full achievement of independence.\")])\n\n\n\ninvoke is a generic command in Langchain’s expression language(LCEL) which can be applied to many of the Langchain elements in order to ‘trigger’ them. This makes the interface quite simple when building chains of elements and extending the types of elements that are available to your custom chains by implementing your own classes that contain the invoke method(and others).\n\n\n\n\n\n\nGenerally, we can use partial_variables within the prompt templates in order to not have to pass in the json_prompt_instructions on each invocation – but a recent Langchain update(langchain == 0.1.16) did us wrong and broke that for quite a few templates."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#visualization-with-rustworkx",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#visualization-with-rustworkx",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "3.1 Visualization with rustworkx",
    "text": "3.1 Visualization with rustworkx\nThe easiest way to visualize our newly-formed knowledge graph is by using a network graph library; in our case, I’ve chosen rustworkx. It’s a Python library that allows for the creation, manipulation, and rendering of directed graphs. If you’re familiar with networkx, then the syntax will be very similar, however the performance is a magnitude faster given that all of the internal goodies are written in Rust.\n\n\nimport rustworkx as rx\nfrom rustworkx.visualization import mpl_draw\n\n# Create a directed graph\ndigraph = rx.PyDiGraph()\n\n# Add nodes to the graph\nnode_indices = {}\nfor node in nodes_edges_json[\"nodes\"]:\n    idx = digraph.add_node(node)\n    node_indices[node[\"semantic_id\"]] = idx\n\n# Add edges to the graph\nfor edge in nodes_edges_json[\"edges\"]:\n    from_idx = node_indices[edge[\"from_node\"]]\n    to_idx = node_indices[edge[\"to_node\"]]\n    digraph.add_edge(from_idx, to_idx, edge)\n\n# Visualize the graph with labels based on node and edge categories\nmpl_draw(digraph, with_labels=True,\n         labels=lambda node: f'{node[\"category\"]}\\n{node.get(\"attributes\", \"\")}',\n         edge_labels=lambda edge: f'{edge[\"category\"]}\\n{edge.get(\"attributes\", \"\")}',\n         font_size=9)\n\n\n\n\n\n\n\n\n\nIt ain’t pretty, but it’s honest work.\nTo create the graph, we use a dictionary to map the node semantic_id to the generated node index which is output when we create a new node. Then to create edges, that mapping is used to convert the semantic_id to the index."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#history-management",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#history-management",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "4.1 History Management",
    "text": "4.1 History Management\nWhen it comes to managing the history of nodes and edges, there is a tiny bit of overhead involved. We need to:\n\nKeep track of the generated nodes and edges and thusly provide them with unique identifiers\nAdd new edges and nodes to the history\nUpdate edges and nodes if the LLM makes changes to them\nReturn a string representation of the nodes and edges to our pipeline using a specified token limit dependent on the context size\n\nTo do this, we will create a magnificent GraphHistory class that manages this storage and retrieval.\n(Unfolding the code not for the faint of heart)\n\n\n\nCode\nimport logging\nimport logging.config\nimport param\nfrom collections import OrderedDict\nfrom copy import deepcopy\nfrom uuid import uuid4\nimport json\nfrom typing import Union, List, Dict\n\nwith open('../logs/logging_config.json', 'r') as f:\n    config = json.load(f)\nlogging.config.dictConfig(config)\nlogger = logging.getLogger('root')\n\nclass GraphHistory(param.Parameterized):\n    nodes_alias = param.String('nodes')\n    edges_alias = param.String('edges')\n    history = param.Dict(default=OrderedDict())\n    latest_history = param.Dict(default=OrderedDict(),\n        doc=\"Generated when get_history_str is run; contains {uuid: {nodes|edges: {object}} mapping. \\\n            Meant to be used for managing the current history window and modifications\")\n    latest_history_mapping = param.Dict(default=OrderedDict(),\n        doc=\"Maps semantic_id to uuid for the latest history items as well as the node pairs to an edge uuid\")\n    token_max = param.Integer(default=400)\n    \n    def add_history(self, new_items: Union[List, Dict], return_with_uuid: bool = True):\n        \"\"\"\n        Nodes are added directly to the history with their UUIDs. \n        Edges are added only after their 'from_node' and 'to_node' fields are set to the corresponding\n        node UUIDs. This ensures that edges reference the correct nodes in the graph.\n        \"\"\"\n        new_items = deepcopy(new_items)\n        if isinstance(new_items, dict):\n            new_items = [new_items]  # Ensure new_items is always a list for consistency\n        history_list = []\n        for item in new_items:\n            item_type = self.nodes_alias if self.nodes_alias in item else self.edges_alias\n            # Makes it easier to work with the inner dict of {nodes|edges: {*inner_dict*}}\n            item_dict = item[item_type]\n            if item_type == self.nodes_alias:  # Handling nodes\n                # If node exists in latest_history, we want to modify it and move it to the bottom in history\n                # No need to add to latest_history, since it won't be used since item exists in it already, and will be reset on next get_history_str call\n                if item_dict['semantic_id'] in self.latest_history_mapping:\n                    uuid_gen = self.latest_history_mapping[item_dict['semantic_id']]\n                    self.history[uuid_gen] = item\n                    self.history.move_to_end(uuid_gen)\n                    logger.debug(f\"Node exists in latest_history, moving to end of history: {uuid_gen}: {item}\")\n                else:\n                    uuid_gen = uuid4()\n                    self.history[uuid_gen] = item\n                    logger.debug(f\"Added node to history: {str(uuid_gen)}: {item}\")\n                    self.latest_history[uuid_gen] = item\n                    self.latest_history_mapping[item_dict['semantic_id']] = uuid_gen\n                if return_with_uuid:\n                    history_list.append((str(uuid_gen), item))\n                else:\n                    history_list.append(item)\n            else:  # Handling edges\n                from_semantic_id = item_dict['from_node']\n                to_semantic_id = item_dict['to_node']\n                # Ensure 'from_node' and 'to_node' reference the correct UUIDs from the recently added nodes\n                # TODO Add exception handling for when the LLM thinks that a node exists when it doesn't. Try, except\n                try:\n                    item_dict['from_node'] = self.latest_history_mapping[from_semantic_id]\n                    item_dict['to_node'] = self.latest_history_mapping[to_semantic_id]\n                except KeyError:\n                    print(f\"KeyError: {from_semantic_id} or {to_semantic_id} not found in latest_history_mapping\")\n                    continue\n                # If the edge is in the latest history according to its from and to nodes, then we update it\n                if (from_to_tuple:=(item_dict['from_node'], item_dict['to_node'])) in self.latest_history_mapping:\n                    uuid_gen = self.latest_history_mapping[from_to_tuple]\n                    self.history[uuid_gen] = item\n                    self.history.move_to_end(uuid_gen)\n                    logger.debug(f\"Edge exists in latest_history_mapping, moving to end of history: {uuid_gen}: {item}\")\n                else:\n                    uuid_gen = uuid4()\n                    self.history[uuid_gen] = item\n                    logger.debug(f\"Added edge to history: {str(uuid_gen)}: {item}\")\n                if return_with_uuid:\n                    history_list.append((str(uuid_gen), item))\n                else:\n                    history_list.append(item)\n        return deepcopy(history_list[0]) if len(history_list) == 1 else deepcopy(history_list)\n    \n    def get_history_window(self, token_max: int = None):\n        if token_max is None:\n            token_max = self.token_max  # Use default token_max if not specified\n        self.latest_history.clear()  # Clear the latest history for a fresh start\n        self.latest_history_mapping.clear()  # Also clear the latest history mapping\n        logger.debug(f\"Cleared latest_history_mapping and latest_history\")\n        token_tracking = 0\n        for uuid, item in reversed(self.history.items()):\n            item_type = self.nodes_alias if self.nodes_alias in item else self.edges_alias\n            item_dict = item[item_type]\n            token_tracking += token_len(self._item_to_json_str(deepcopy(item)))\n            if token_tracking &lt; token_max:\n                self.latest_history[uuid] = item  # Update latest_history with the current item\n                if item_type == self.nodes_alias:\n                    self.latest_history_mapping[item_dict['semantic_id']] = uuid  # Update latest_history_mapping\n                    logger.debug(f\"Added node to latest_history_mapping: {item_dict['semantic_id']}: {uuid}\")\n                elif item_type == self.edges_alias:\n                    self.latest_history_mapping[(item_dict['from_node'], item_dict['to_node'])] = uuid\n                    logger.debug(f\"Added edge to latest_history_mapping: ({item_dict['from_node']}, {item_dict['to_node']}): {uuid}\")\n            else:\n                break  # Stop adding items if token_max is reached\n        return deepcopy(self.latest_history)  # Return the history as a string\n\n    def _item_to_json_str(self, item):\n        item_type = self.nodes_alias if self.nodes_alias in item else self.edges_alias\n        item_dict = item[item_type]\n        if item_type == self.edges_alias:\n            item_dict['from_node'] = self.history[item_dict['from_node']][self.nodes_alias]['semantic_id']\n            item_dict['to_node'] = self.history[item_dict['to_node']][self.nodes_alias]['semantic_id']\n        return json.dumps(item_dict)\n            \n    def get_history_str(self, token_max: int = None):\n        \"\"\"\n        Returns a history string based on the token length specification and updates the latest_history\n        \"\"\"\n        latest_history = self.get_history_window(token_max)\n        json_list = []\n        for uuid, item in latest_history.items():\n            json_list.append(self._item_to_json_str(item))\n        if json_list:\n            json_str = \"\\n\".join(json_list)\n            logger.debug(f\"JSON History string created: {json_str}\")\n            return json_str\n\n\n\nThe code above addresses the bullets representing our requirements, however, there are some messy workarounds where we skip creating edges when it imagines node names. The ideal handling of this would involve rerunning the generation and feeding it the error, but we’re going to wing it and skip this for better or worse. The mistaken identity shouldn’t be very common, but it can occur."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#show-me-the-money",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-2/index.html#show-me-the-money",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Finally Building a Knowledge Graph – Part Two",
    "section": "5.1 Show Me the Money",
    "text": "5.1 Show Me the Money\nOr the knowledge graph. Back to rustworkx we go. Some minor tweaks were made to the visualization code we saw earlier in order for all of the nodes and edges to not be concealed by the massive amounts of text we’ve generated. I’ve left the node categories visible. The graph generation code was modified to work with the the history stored within our graph_history object.\n\n\nimport rustworkx as rx\nfrom rustworkx.visualization import mpl_draw\n\ndigraph = rx.PyDiGraph()\n\nnode_indices = {}\n# Iterate through the history to add nodes and edges\nfor uuid, data in graph_history.history.items():\n    if 'nodes' in data:\n        # Add node to the graph and store the index with its UUID\n        node_index = digraph.add_node(data['nodes'])\n        node_indices[uuid] = node_index\n\nfor uuid, data in graph_history.history.items():\n    if 'edges' in data:\n        # Retrieve indices of the from and to nodes using their UUIDs\n        from_index = node_indices.get(data['edges']['from_node'])\n        to_index = node_indices.get(data['edges']['to_node'])\n        if from_index is not None and to_index is not None:\n            # Add edge to the graph\n            digraph.add_edge(from_index, to_index, data['edges'])\n\n# Visualize the graph with labels based on node and edge categories\nlayout = rx.digraph_spring_layout(digraph, repulsive_exponent=50, num_iter=200)\nmpl_draw(digraph, with_labels=True, pos=layout,\n         labels=lambda node: f'{node[\"category\"]}',\n        #  edge_labels=lambda edge: f'{edge[\"category\"]}',\n         font_size=9, node_size=50)\n\n\n\n\n\n\n\n\n\nMessy, but you get the idea.\nWe can do a little graph analytics to find the most connected nodes(nodes with the most connections). incident_edges(n) identifies the edges of a node with index n, so all we have to do is get the length of the edge list returned and then sort it.\n\n\n\nlen_list = [len(digraph.incident_edges(n, all_edges=True)) for n in range(len(digraph.node_indices()))]\nlen_list.sort(reverse=True)\nlen_list[:]\n\n[9,\n 5,\n 5,\n 4,\n 4,\n 3,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 2,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 0,\n 0,\n 0,\n 0,\n 0,\n 0,\n 0]\n\n\n\n\nThe most connections a single node has is 9, while most nodes merely have a single connection, and a minority of nodes have no connections. Here is said node:\n\n\n\nCode\nimport rustworkx as rx\nfrom rustworkx.visualization import mpl_draw\n\n# Assuming 'graph' is your existing PyDiGraph object\nnode_index = 35  # Example node index\n\n# Get predecessors and successors\npredecessors = list(digraph.predecessor_indices(node_index))\nsuccessors = list(digraph.successor_indices(node_index))\n\n# Include the original node and ensure uniqueness of nodes\nsubgraph_nodes = list(set([node_index] + predecessors + successors))\n\n# Create the subgraph\nsubgraph = digraph.subgraph(subgraph_nodes)\n\n\n# Visualize the graph with labels based on node and edge categories\nmpl_draw(subgraph, with_labels=True,\n         labels=lambda node: f'{node[\"category\"]}\\n{node.get(\"attributes\", \"\")}',\n         edge_labels=lambda edge: f'{edge[\"category\"]}',\n         font_size=9)\n\n\n\n\n\n\n\n\n\n\nDo recall, our token window is fairly small, with all of 70 tokens, however, we’re using 600 tokens to store the history of generated nodes and edges which are fed back to the model. Perhaps this a good amount of connectivity given these parameters and the fact that only a few paragraphs should have a connection between them, or perhaps not. The lack of quantifiable best practices in a bleeding edge field is 😢sad but expected.\nTo jog your memory a bit, here is what 70 tokens looks like:\n\n\n\n\n\n\nFigure 4: An example text consisting of 70 tokens"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One",
    "section": "",
    "text": "On the last episode of: Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero:"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#data-and-prediction-datasets",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#data-and-prediction-datasets",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One",
    "section": "1.1 Data and Prediction Datasets",
    "text": "1.1 Data and Prediction Datasets\n\n\n\n\n\n\nBy ‘predictions’, we mean ‘the answers’ and any other expected outputs. It’s a vestige of machine learning vernacular.\n\n\n\n\n\n\nFortunately for us, the fine folks who’ve created the MuSiQue benchmark have made it simple. They’ve ran several models on the dataset and used them for evaluations. We can find the generated predictions in their github repo; this will give us the starting point we need. Lets first look at an example of the input, provided in the data folder(again, from the repo). Note that there is a question, an answer, an answerable flag and a bunch of paragraphs marked whether they support the answer.\n\n\n\n\nCode\nwith jsonlines.open(musique_dir + '/data/musique_full_v1.0_train.jsonl') as reader:\n    lines = [reader.read() for _ in range(1000)]\ndisplay(Markdown('**Line Example**'), pprint(lines[1]))\n\n\n{'answer': 'north',\n 'answer_aliases': ['North', 'N'],\n 'answerable': True,\n 'id': '2hop__269805_135710',\n 'paragraphs': [{'idx': 0,\n                 'is_supporting': False,\n                 'paragraph_text': 'Milton F. Pavlic (1909–1942) was a United '\n                                   'States Navy officer killed in action '\n                                   'during World War II for whom a U.S. Navy '\n                                   'high-speed transport was named.',\n                 'title': 'Milton F. Pavlic'},\n                {'idx': 1,\n                 'is_supporting': False,\n                 'paragraph_text': 'Osmund Holm-Hansen (also known as Oz '\n                                   'Holm-Hansen) is a Norwegian-born American '\n                                   'scientist, for whom Mount Holm-Hansen, in '\n                                   'Antarctica is named. A plant physiologist '\n                                   'by training, from 1962 Holm-Hansen was the '\n                                   'head of polar research at the Scripps '\n                                   'Institution of Oceanography.',\n                 'title': 'Osmund Holm-Hansen'},\n                {'idx': 2,\n                 'is_supporting': False,\n                 'paragraph_text': '\"Sapphire Princess\" was built in Japan by '\n                                   'Mitsubishi Heavy Industries, the second '\n                                   'Princess Cruises ship to be built in a '\n                                   'Japanese shipyard. Her only sister ship is '\n                                   '\"Diamond Princess\", with whom she swapped '\n                                   'names during construction.',\n                 'title': 'Sapphire Princess'},\n                {'idx': 3,\n                 'is_supporting': False,\n                 'paragraph_text': 'Lake Pontchartrain is named for Louis '\n                                   'Phélypeaux, comte de Pontchartrain. He was '\n                                   'the French Minister of the Marine, '\n                                   'Chancellor, and Controller-General of '\n                                   \"Finances during the reign of France's \"\n                                   '\"Sun King\", Louis XIV, for whom the colony '\n                                   'of \"La Louisiane\" was named.',\n                 'title': 'Lake Pontchartrain'},\n                {'idx': 4,\n                 'is_supporting': False,\n                 'paragraph_text': 'Henry Crater is a large crater in the '\n                                   'Arabia quadrangle of Mars, located at '\n                                   '10.9° north latitude and 23.3° east '\n                                   'longitude. It is in diameter and was named '\n                                   'after the brothers Paul Henry and Prosper '\n                                   'Henry, both of whom were French telescope '\n                                   'makers and astronomers.',\n                 'title': 'Henry (Martian crater)'},\n                {'idx': 5,\n                 'is_supporting': False,\n                 'paragraph_text': 'Where Dead Voices Gather is a book by Nick '\n                                   'Tosches. It is, in part, a biography of '\n                                   'Emmett Miller, one of the last minstrel '\n                                   'singers. Just as importantly, it depicts '\n                                   \"Tosches' search for information about \"\n                                   'Miller, about whom he initially wrote in '\n                                   'his book \"Country: The Twisted Roots of '\n                                   'Rock and Roll\". It is also a study of '\n                                   'minstrelsy and its connection to American '\n                                   'folk music, country music, the blues and '\n                                   'ultimately, rock and roll. In that way, it '\n                                   'is a companion volume to his other books '\n                                   'of music journalism, \"Country\" and \"Unsung '\n                                   'Heroes of Rock N\\' Roll\".',\n                 'title': 'Where Dead Voices Gather'},\n                {'idx': 6,\n                 'is_supporting': True,\n                 'paragraph_text': 'Norway has a total area of and a '\n                                   'population of 5,312,300 (as of August '\n                                   '2018). The country shares a long eastern '\n                                   'border with Sweden (1,619 km or 1,006\\xa0'\n                                   'mi long). Norway is bordered by Finland '\n                                   'and Russia to the north-east, and the '\n                                   'Skagerrak strait to the south, with '\n                                   'Denmark on the other side. Norway has an '\n                                   'extensive coastline, facing the North '\n                                   'Atlantic Ocean and the Barents Sea. The '\n                                   \"maritime influence also dominates Norway's \"\n                                   'climate with mild lowland temperatures on '\n                                   'the sea coasts, whereas the interior, '\n                                   'while colder, also is a lot milder than '\n                                   'areas elsewhere in the world on such '\n                                   'northerly latitudes. Even during polar '\n                                   'night in the north, temperatures above '\n                                   'freezing are commonplace on the coastline. '\n                                   'The maritime influence brings high '\n                                   'rainfall and snowfall to some areas of the '\n                                   'country.',\n                 'title': 'Norway'},\n                {'idx': 7,\n                 'is_supporting': False,\n                 'paragraph_text': 'The Hireling Shepherd (1851) is a painting '\n                                   'by the Pre-Raphaelite artist William '\n                                   'Holman Hunt. It represents a shepherd '\n                                   'neglecting his flock in favour of an '\n                                   'attractive country girl to whom he shows a '\n                                   \"death's-head hawkmoth. The meaning of the \"\n                                   'image has been much debated.',\n                 'title': 'The Hireling Shepherd'},\n                {'idx': 8,\n                 'is_supporting': False,\n                 'paragraph_text': 'Naissa Mosque is a mosque in Qardaha, '\n                                   'along the Syrian coast. It was built in '\n                                   '1989 by architect Abdul Rahman Naassan, '\n                                   'and funded by the mother of former '\n                                   'president Hafez al-Assad, Naissa '\n                                   'Assad—after whom the mosque was named. The '\n                                   'state funeral of Hafez al-Assad was '\n                                   'observed at the mosque.',\n                 'title': 'Naissa Mosque'},\n                {'idx': 9,\n                 'is_supporting': False,\n                 'paragraph_text': 'The quick German victory over the French '\n                                   'stunned neutral observers, many of whom '\n                                   'had expected a French victory and most of '\n                                   'whom had expected a long war. The '\n                                   'strategic advantages possessed by the '\n                                   'Germans were not appreciated outside '\n                                   'Germany until after hostilities had '\n                                   'ceased. Other countries quickly discerned '\n                                   'the advantages given to the Germans by '\n                                   'their military system, and adopted many of '\n                                   'their innovations, particularly the '\n                                   'General Staff, universal conscription and '\n                                   'highly detailed mobilization systems.',\n                 'title': 'Franco-Prussian War'},\n                {'idx': 10,\n                 'is_supporting': True,\n                 'paragraph_text': 'Tveitsund is a village in Nissedal '\n                                   'municipality, Norway. The urban area '\n                                   'Tveitsund, which consists of Tveitsund and '\n                                   'Treungen, has a population of 361.',\n                 'title': 'Tveitsund'},\n                {'idx': 11,\n                 'is_supporting': False,\n                 'paragraph_text': 'John Francis Sheehan (1910–1942) was a '\n                                   'United States Navy sailor killed in action '\n                                   'during World War II for whom a destroyer '\n                                   'escort was named during the war.',\n                 'title': 'John Francis Sheehan'},\n                {'idx': 12,\n                 'is_supporting': False,\n                 'paragraph_text': 'Holmes Summit is a peak rising to , the '\n                                   'highest elevation in the Read Mountains of '\n                                   'the Shackleton Range in Antarctica. It was '\n                                   'photographed from the air by the U.S. Navy '\n                                   'in 1967 and was surveyed by the British '\n                                   'Antarctic Survey in the period 1968–71. In '\n                                   'association with the names of geologists '\n                                   'grouped in this area, it was named by the '\n                                   'UK Antarctic Place-Names Committee in 1971 '\n                                   'after Professor Arthur Holmes, after whom '\n                                   'the Holmes Hills in Palmer Land were also '\n                                   'named.',\n                 'title': 'Holmes Summit'},\n                {'idx': 13,\n                 'is_supporting': False,\n                 'paragraph_text': ', better known by her pen name is a '\n                                   'Japanese manga artist. She is married to '\n                                   'fellow manga artist Tatsuneko, from whom '\n                                   'he took the name of . She is a graduate of '\n                                   'Mita Senior High School, Tokyo. She '\n                                   'currently lives in Setagaya, Tokyo with '\n                                   'her husband and daughter.',\n                 'title': 'Yun Kōga'},\n                {'idx': 14,\n                 'is_supporting': False,\n                 'paragraph_text': 'The Book of Proper Names () is a Belgian '\n                                   'novel by Amélie Nothomb. It was first '\n                                   'published in 2002. It is a romanticized '\n                                   'account of the life of the singer RoBERT, '\n                                   'whom Nothomb became acquainted with as an '\n                                   'avid admirer of her songs.',\n                 'title': 'The Book of Proper Names'},\n                {'idx': 15,\n                 'is_supporting': False,\n                 'paragraph_text': '653 Berenike is a main-belt asteroid '\n                                   'discovered on November 27, 1907, by Joel '\n                                   'Hastings Metcalf at Taunton, '\n                                   'Massachusetts. It is named after Berenice '\n                                   'II of Egypt, after whom the constellation '\n                                   'Coma Berenices is also named.',\n                 'title': '653 Berenike'},\n                {'idx': 16,\n                 'is_supporting': False,\n                 'paragraph_text': 'orbiting the Sun. It was discovered on 21 '\n                                   'February 1906 by August Kopff from '\n                                   'Heidelberg. Kopff named the asteroid after '\n                                   'a female English student with whom he was '\n                                   'acquainted.',\n                 'title': '596 Scheila'},\n                {'idx': 17,\n                 'is_supporting': False,\n                 'paragraph_text': 'William M. Hobby (1899–1942), was a United '\n                                   'States Navy officer killed in action '\n                                   'during World War II for whom a U.S. Navy '\n                                   'ship was named.',\n                 'title': 'William M. Hobby'},\n                {'idx': 18,\n                 'is_supporting': False,\n                 'paragraph_text': 'The Alma Grace McDonough Health and '\n                                   'Recreation Center is a 2,200 seat '\n                                   'multipurpose arena and recreation facility '\n                                   'on the campus of Wheeling Jesuit '\n                                   'University in Wheeling, West Virginia. The '\n                                   'building was constructed thanks to a gift '\n                                   'from Alma Grace McDonough, whom the '\n                                   'building is named after.',\n                 'title': 'Alma Grace McDonough Health and Recreation Center'},\n                {'idx': 19,\n                 'is_supporting': False,\n                 'paragraph_text': 'Émile Bertrand (1844–1909) was a French '\n                                   'mineralogist, in honour of whom '\n                                   'bertrandite was named by Alexis Damour. He '\n                                   'also gave his name to the \"Bertrand lens\" '\n                                   'or phase telescope.',\n                 'title': 'Émile Bertrand'}],\n 'question': 'What is the country where Nissedal is located named after?',\n 'question_decomposition': [{'answer': 'Norway',\n                             'id': 269805,\n                             'paragraph_support_idx': 10,\n                             'question': 'Nissedal &gt;&gt; country'},\n                            {'answer': 'north',\n                             'id': 135710,\n                             'paragraph_support_idx': 6,\n                             'question': 'The #1 was named for whom?'}]}\n\n\nLine Example\n\n\nNone\n\n\n\n\nLooking at a snippet of the predictions below, we see that only four factors are necessary, the id - which matches the question id, the answer - which is the answer to the question, the answerable flag - which is a boolean indicating whether the question can be answered, and the supporting facts - which are the paragraphs that support the answer.\n\n\n\n\nCode\ndisplay(Markdown('**Examples of predictions**'))\nwith jsonlines.open(musique_dir + 'predictions/musique_ans_v1.0_dev_end2end_model_predictions.jsonl', 'r') as file:\n    for i in range(5):\n        display(pprint(file.read()))\n\n\nExamples of predictions\n\n\n{'id': '2hop__460946_294723',\n 'predicted_answer': 'Jennifer Garner',\n 'predicted_answerable': True,\n 'predicted_support_idxs': [0, 10]}\n{'id': '2hop__252311_366220',\n 'predicted_answer': 'Steven Spielberg',\n 'predicted_answerable': True,\n 'predicted_support_idxs': [10, 18]}\n{'id': '2hop__701895_752697',\n 'predicted_answer': 'Cypriot part was merged into the Bank of Cyprus '\n                     '(including insured deposits under 100,000 Euro) and the '\n                     \"'bad' part or legacy entity holds all the overseas \"\n                     'operations as well as uninsured deposits above 100,000 '\n                     'Euro, old shares and bonds. The uninsured depositors '\n                     'were subject to a bail-in and became the new '\n                     'shareholders of the legacy entity. As at May 2017, the '\n                     'legacy entity is one of the largest shareholders of Bank '\n                     'of Cyprus with 4.8% but does not hold a board seat. All '\n                     'the overseas operations, of the now defunct Cyprus '\n                     'Popular Bank, are also held by the legacy entity, until '\n                     'they are sold by the Special Administrator, at first Ms '\n                     'Andri Antoniadou, who ran the legacy entity for two '\n                     'years, from March 2013 until 3 March 2015. She tendered '\n                     'her resignation due to disagreements, with the Governor '\n                     'of the Central Bank of Cyprus and the Central Bank Board '\n                     'members, who amended the lawyers of the legacy entity, '\n                     'without consulting her. Veteran banker Chris [[PP]] The '\n                     'Ciudad Deportiva (\"Sports City\") is a sports complex in '\n                     'Nuevo Laredo, Mexico. It is home to the Tecolotes de '\n                     'Nuevo Laredo Mexican Baseball League team and the Toros '\n                     'de Nuevo Laredo Mexican professional basketball team '\n                     'from the Liga Nacional de Baloncesto Profesional. The '\n                     \"Ciudad Deportiva's Estadio Nuevo Laredo (baseball park) \"\n                     'can seat up to 12,000 fans at a baseball game and the '\n                     'Nuevo Laredo Multidisciplinary Gymnasium can seat 4,000 '\n                     'fans at a basketball game. [[PP]] Juan Carlos Espinoza '\n                     'Mercado (born 23 July 1987 in Machala) is an Ecuadorian '\n                     'professional football player who has played for '\n                     'Ecuadorian club Liga Deportiva Universitaria de Loja and '\n                     'in 2010 he joined Peruvian club Juan Aurich. [[PP]] '\n                     'Estadio Unión Tarma is a multi-use stadium in Tarma, '\n                     'Peru. It is currently used mostly for football matches '\n                     'and is the home stadium of Asociación Deportiva Tarma of '\n                     'the Copa Perú. The stadium holds 9,000 spectators. '\n                     '[[PP]] A Nigerian State is a federated political entity, '\n                     'which shares sovereignty with the Federal Government of '\n                     'Nigeria, There are 36 States in Nigeria, which are bound '\n                     'together by a federal agreement. There is also a '\n                     'territory called the Federal Capital Territory (FCT), '\n                     'which is not a state, but a territory, under the direct '\n                     'control of the Federal Government. The States are '\n                     'further divided into a total of 774 Local Government '\n                     'Areas. Under the Nigerian Constitution, states have the '\n                     'power to ratify constitutional amendments. [[PP]] Ofu '\n                     'Airport is a public airport located one mile (2 km) '\n                     'southeast of the village of Ofu on the island of Ofu in '\n                     'American Samoa, an unincorporated territory of the '\n                     'United States. This airport is publicly owned by '\n                     'Government of American Samoa. [[PP]] The Díaz '\n                     'administration made political decisions and took legal '\n                     'measures that allowed the elite throughout Mexico',\n 'predicted_answerable': True,\n 'predicted_support_idxs': [11, 16, 18]}\n{'id': '2hop__259228_793698',\n 'predicted_answer': 'Fairfield, Connecticut. Its main offices are located at '\n                     '30 Rockefeller Plaza at Rockefeller Center in New York '\n                     'City, known now as the Comcast Building. It was formerly '\n                     'known as the GE Building for the prominent GE logo on '\n                     \"the roof; NBC's headquarters and main studios are also \"\n                     'located in the building. Through its RCA subsidiary, it '\n                     'has been associated with the center since its '\n                     'construction in the 1930s. GE moved its corporate '\n                     'headquarters from the GE Building on Lexington Avenue to '\n                     'Fairfield in 1974. [[PP]] The lander is named after the '\n                     'Philae obelisk, which bears a bilingual inscription and '\n                     'was used along with the Rosetta Stone to decipher '\n                     'Egyptian hieroglyphs. \"Philae\" was monitored and '\n                     \"operated from DLR's Lander Control Center in Cologne\",\n 'predicted_answerable': True,\n 'predicted_support_idxs': [2, 10, 14]}\n{'id': '2hop__481349_302087',\n 'predicted_answer': 'Bombardier Inc. the former CRJ100 and CRJ200 series are '\n                     'no longer in production but still in active airline '\n                     'service, while the more recent CRJ700, CRJ900 and '\n                     'CRJ1000 series are in production and in service. [[PP]] '\n                     'Products offered through the Great Value brand are often '\n                     'claimed to be as good as national brand offerings, but '\n                     'are typically sold at a lower price because of lower '\n                     'marketing and advertising expense. As a house or store '\n                     'brand, the Great Value line does not consist of goods '\n                     'produced by Walmart, but is a labeling system for items '\n                     'manufactured and packaged by a number of agricultural '\n                     'and food corporations, such as ConAgra, Sara Lee which, '\n                     'in addition to releasing products under its own brands '\n                     'and exclusively for Walmart, also manufactures and '\n                     'brands foods for a variety of other chain stores. Often, '\n                     'this labeling system, to the dismay of consumers, does '\n                     'not list location of manufacture of the product. Wal - '\n                     'Mart contends that all Great Value products are produced '\n                     'in the United States. Otherwise, the country of origin '\n                     'would be listed. [[PP]] On June 11, 2006, the British '\n                     'tabloid The Mail on Sunday reported that iPods are '\n                     'mainly manufactured by workers who earn no more than '\n                     'US$50 per month and work 15-hour shifts. Apple '\n                     'investigated the case with independent auditors and '\n                     \"found that, while some of the plant's labour practices \"\n                     \"met Apple's Code of Conduct, others did not: employees \"\n                     'worked over 60 hours a week for 35% of the time, and '\n                     'worked more than six consecutive days for 25% of the '\n                     'time. [[PP]] The EMD E6 was a , A1A-A1A, passenger train '\n                     'locomotive manufactured by Electro-Motive Corporation, '\n                     'and its corporate successor, General Motors',\n 'predicted_answerable': True,\n 'predicted_support_idxs': [5, 10]}\n\n\nNone\n\n\nNone\n\n\nNone\n\n\nNone\n\n\nNone"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#inputs-and-outputs",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#inputs-and-outputs",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One",
    "section": "1.2 Inputs and Outputs",
    "text": "1.2 Inputs and Outputs\nIn essence, our pipeline primarily needs to take the question and the paragraphs and spit out:\n\nWhether the question is answerable.\nWhich paragraphs contribute to the question’s answer.\nThe answer.\n\nNow we’re beginning to see why this is a difficult task. Nevertheless – onwards."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#jean-claude-van-damme-tell-me-a-haiku",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#jean-claude-van-damme-tell-me-a-haiku",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One",
    "section": "4.1 Jean-Claude Van Damme, tell me a Haiku",
    "text": "4.1 Jean-Claude Van Damme, tell me a Haiku\nWhat. Just kidding. We’ll be talking about Anthropic’s Claude 3 models. The following chart is from the LMSYS Chatbot Arena where models go head to head in answering questions which are then chosen by users.\n\n\n\n\n\n\nFigure 4: Comparison of performance and cost among top models\n\n\n\nOn the far right, we have GPT-4 and Claude 3 Opus neck to neck as the highest performing models. As of this writing, the latest GPT-4 Turbo model actually overtook Claude 3 Opus. At the very top, we see Claude Haiku, which performs slightly below one of the GPT-4 models, but at an incredibly low cost. All of the Claude 3 models have a 200,000 token window and a 4096 token output – this is comparable to the 128,000 GPT-4 token window with a 8196 token output. Claude 3 Haiku will be model we’ll be using. If there are any hurdles with that particular model, it will not be too difficult to pivot by simply changing the endpoint to GPT 3.5 or GPT 4.\nHere is Claude 3 Haiku writing a haiku about itself:\nArtificial mind,\nSeeking to understand, learn,\nServe with empathy.\nAre you impressed yet? Maybe a little scared?\n\n\n\n\n\n\nAlthough Claude had the very large context window months before GPT-4, the jury is out on whether it has been useful and robust enough for production.\n\n\n\n\n\n\n\n4.1.1 Claude Tokenization\nUnfortunately, Anthropic has not released a tokenizer that we can use, however, it is generally safe(famous last words lol) to assume that it is quite similar to the OpenAI one. Here, someone has attempted to reverse engineer it by counting the token amounts of the generations streamed to you.\n\nBut we’re not going to do that."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#strategy",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/index.html#strategy",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Theory behind using an LLM to Build Knowledge Graphs – Part One",
    "section": "5.1 Strategy",
    "text": "5.1 Strategy\n\n5.1.1 Sliding Windows\nTo answer the questions asked in the MuSiQue benchmark, we will create a unique knowledge graph for every individual question, consisting out of the twenty provided paragraphs. Each paragraph can be arbitrarily divided into multiple chunks of text which the LLM can take as input into its context.\n\n\n\n\n\n\nFigure 5: Each question contains multiple paragraphs, and each paragraph is made out of multiple text chunks.\n\n\n\nWe can use a sliding window to process the chunks of text that the paragraphs are composed of. There are numerous ways to insert variable amounts of text into the context of an LLM, but I’ll introduce the two basic approaches. You can do so with a sliding window that takes in one chunk of text after the other, or you can use a sliding window with some overlap. We’ll use the latter strategy, as it may help with continuity of the model’s understanding of the text. As the window slides across the text, we want to generate the nodes and edges of the knowledge graph.\n\n\n\n\n\n\nWhen I say ‘nodes and edges’, I also mean any attributes thereof\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Sliding window with overlap tends to be the standard approach when inserting text into LLMs\n\n\n\n\n\n5.1.2 Knowledge-Stuffing\nConnections are the bread and butter of knowledge graphs. If our LLM is producing nodes and edges only from our limited context window, it appears that we’re missing out on the connectivity benefit of knowledge graphs. To increase the connectivity of our knowledge graph, we can inform our LLM of previous nodes and edges it has created by passing them into the context of the LLM. Conveniently, this gives me the opportunity to introduce our composition of the context we’ll be using.\n\n\n\n\n\n\nFigure 7: We provide the LLM with the system prompt, text chunks, and previously generated nodes and edges\n\n\n\nInside of the prompt we have our:\n\nSystem prompt: Contains the necessary instructions for priming the model(e.g. “you are a brave and beautiful graph creator”), as well as formatting in the case where we want JSON returned to us that represents the nodes and edges, and anything else we’ll need.\nPreviously generated nodes and edges: By knowing the previously generated nodes and edges, we can use them to update or create new nodes and edges that may or may not be related.\nText chunks: The text from the paragraphs which the LLM will be converting to nodes and edges.\n\nUnless we’ll be including all of the nodes and edges into the prompt, it still feels a bit limited. Technically, we can just shove all of those connections into the prompt, as there’s ample space with our huge 200,000 token limit, but we want this method to generalize and scale to tasks outside of this particular dataset.\n\n\n5.1.3 Letting the LLM Loose\nConsider the knowledge graph obtained after we process the 20 paragraphs pertaining to one question using the previously discussed method. We’d get something like:\n\n\n\n\n\n\nFigure 8: Sparsely Connected Knowledge Graph\n\n\n\nThe facts we obtain from the text chunks will likely be connected in fairly atomic clusters as there wouldn’t be great continuity, even with passing some of the previously computed nodes and edges into our context window. One way to fix this would be to feed random sets of nodes(and/or edges) to the LLM and let it generate new connections between the nodes.\n\n\n\n\n\n\nFigure 9: Building New Connections\n\n\n\nThis can be done in one of two ways(more, actually):\n\nPush the nodes and edges(and attributes) into the context window and tell the model to blindly make associations based on that information alone.\nAlong with the nodes and edges, push the segments of text that contributed to the creation of the nodes and edges alongside them. This gives the LLM more grounding and reduces hallucinations.\n\nWe’ll focus on the latter, as it pairs well with the vector store approach we will be discussing later."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/notebooks/cross_test.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/notebooks/cross_test.html",
    "title": "Doc Load",
    "section": "",
    "text": "import os\nfrom collections import OrderedDict\nfrom collections.abc import Collection\nfrom uuid import uuid4\nfrom functools import partial\nimport json\nimport logging\nimport logging.config\nfrom copy import deepcopy\n\nimport param\n\nimport panel as pn\nfrom panel.chat import ChatMessage, ChatInterface, ChatFeed\nfrom panel.theme import Material\nfrom panel.reactive import ReactiveHTML\n\nfrom langchain_openai import ChatOpenAI\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.embeddings import OpenAIEmbeddings\nfrom langchain_core.prompts import (\n    ChatPromptTemplate,\n    HumanMessagePromptTemplate,\n    SystemMessagePromptTemplate,\n    MessagesPlaceholder,\n)\nfrom langchain.schema.runnable import RunnableLambda\nfrom langchain_core.messages import SystemMessage, HumanMessage\nfrom langchain_core.output_parsers import (\n    StrOutputParser,\n    JsonOutputParser,\n    BaseTransformOutputParser,\n)\nfrom langchain_core.memory import BaseMemory\nfrom langchain_core.runnables import RunnablePassthrough\n\nfrom typing import Dict, List, Union, Tuple, Optional\nfrom pydantic.v1 import BaseModel, Field\n\n\nfrom neo4j import GraphDatabase\n\nimport tiktoken\n\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nimport asyncio\nfrom dotenv import load_dotenv\nimport re\nimport time\nfrom pprint import pprint\n\nfrom ui_helpers import DraggableList\nfrom langchain_helpers import token_len, JsonNodesEdgesStreamParser, initialize_nb, VisJSHandler, GraphHistory\n\nfrom IPython.display import clear_output, display\n\n\npn.extension()\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nwith open('logs/logging_config.json', 'r') as f:\n    config = json.load(f)\nlogging.config.dictConfig(config)\nlogger = logging.getLogger('root')\n\n\nwith open(\"lean_startup_article.txt\", \"r\") as f:\n    txt = f.read()\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=260, chunk_overlap=20, length_function=token_len\n)\nsplit = text_splitter.create_documents([txt])\npprint(split[5].page_content)\n\n('When it comes time to grow your team, Jeff Jordan and Eric pointed out three '\n 'hiring mistakes to avoid.\\n'\n 'First, do not hire someone just because they have the domain expertise. You '\n 'want to be sure that they can work with the resources you can provide in '\n 'terms of staff size and budgets. In other words, be sure they are ready to '\n 'work at a startup. Jeff elaborated, “You want to tee [your hires] to the '\n 'state of the company.” For example, don’t court public-ready CFOs when your '\n 'financials aren’t even on QuickBooks yet.\\n'\n 'Second, don’t simply hire your buddies. “You’re kind of looking for '\n 'founders,” not friends, remarked Jeff. “If you know the true story of any '\n '[startup], the early employees are every bit as entrepreneurial, every bit '\n 'as dedicated … as the true founder,” Eric seconded.')\n\n\n\nPrompting\n\nclass Node(BaseModel):\n    semantic_id: str = Field(..., description=\"The unique identifier of the node that is reference to create edges between different nodes.\")\n    category: str = Field(..., description=\"The category of the node\")\n    attributes: Optional[Dict[str, Union[str, int, bool]]] = Field(None, description=\"Additional properties of the node\")\n\nclass Edge(BaseModel):\n    from_node: str = Field(..., description=\"The id of the node from which the edge originates. Only semantic_ids belong here, nothing else.\")\n    to_node: str = Field(..., description=\"The id of the node to which the edge connects. Only semantic_ids belong here, nothing else.\")\n    category: str = Field(..., description=\"The type of the relationship\")\n    attributes: Optional[Dict[str, Union[str, int, bool]]] = Field(None, description=\"Additional properties of the edge\")\n\nclass Graph(BaseModel):\n    nodes: List[Node] = Field(...,description=\"A list of nodes in the graph\")\n    edges: List[Edge] = Field(...,description=\"A list of edges in the graph\")\n\n# json_template = json.dumps(json_template_dict)\n\njson_rules = \\\n\"\"\"We need to create a JSON object that contains a list of nodes and edges that connect the nodes.\nBoth, nodes and edges, have optional attributes.\nYour goal is to extract as much pertinent information from the passage as possible and create nodes and edges with the extracted information.\nIf history is provided, it will be in the JSON schema you are given. You may create new connections between the nodes and edges in the history and the new nodes you are producing.\nIf you wish to change/update any of the node attributes in the provided history based on newly gathered information, simply reuse the semantic_ids of the nodes you wish to change.\nIf you wish to modify/update the edge attributes in the history, reuse the semantic_ids of the 'from' and 'to' nodes of any edge you wish to change.\nUse the following schema and make sure to read the descriptions:\n\"\"\" \n\njson_prompt_instructions = json_rules + Graph.schema_json() + \"\\n-----\\n\"\n\ngraph_creator_content = \\\n\"\"\"You are a brilliant and efficient creator of json objects that capture the essence of passages and who follows instructions unbelievably well.\nYou will be first given instructions and a json schema, then you will be provided a passage to extract the information from.\nYour instructions are:\n{instructions}\nHistory:\n{history}\n\"\"\"\ngraph_analyst_prompt = SystemMessagePromptTemplate.from_template(template=graph_creator_content,\n                              partial_variables={'instructions': json_prompt_instructions})\npass_passage_content = \"Below is the passage to extract the values from.\\n*****\\nPassage:\\n{passage}\"\npass_passage_template = HumanMessagePromptTemplate.from_template(pass_passage_content)\n\ngen_template = graph_analyst_prompt + pass_passage_template\nllm35 = ChatOpenAI(model='gpt-3.5-turbo-0125')\nllm4 = ChatOpenAI(model='gpt-4-1106-preview')\n\n\n\nNetwork Viz\n\n# Working Class\nclass VisJSNetwork(ReactiveHTML):\n    nodes = param.List([])\n    edges = param.List([])\n    # Needed for adding nodes and edges without sending all nodes and edges\n    new_nodes = param.List([])\n    new_edges = param.List([])\n\n    def add_nodes(self, nodes):\n        if not isinstance(nodes, List):\n            nodes = [nodes]\n        logger.debug(f\"Adding nodes: {nodes}\")\n        self.new_nodes.extend(nodes)\n        self.nodes.extend(nodes)\n        self.param.trigger(\"new_nodes\")\n        self.new_nodes = []\n\n    def add_edges(self, edges):\n        if not isinstance(edges, List):\n            edges = [edges]\n        logger.debug(f\"Adding edges: {edges}\")\n        self.new_edges.extend(edges)\n        self.edges.extend(edges)\n        self.param.trigger(\"new_edges\")\n        self.new_edges = []\n\n    def add_item(self, item):\n        item_type = next(iter(item.keys()))\n        if item_type == 'nodes':\n            self.add_nodes(item['nodes'])\n        elif item_type == 'edges':\n            self.add_edges(item['edges'])    \n\n    _template = \"\"\"\n    &lt;div id=\"mynetwork\" class=\"mynetwork\" style=\"height: 800px; width: 1000px; background-color: #1f2455;\"&gt;&lt;/div&gt;\n    &lt;div id=\"config\"&gt;&lt;/div&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Sora:wght@300&display=swap\" rel=\"stylesheet\" /&gt;\n\n    \"\"\"\n\n    _scripts = {\n        \"add_nodes_js\": \"\"\"return function(nodes) { \nfor (var i = 0; i &lt; nodes.length; i++) {\n    var node = nodes[i];\n    var label = \"\";\n    var groupAdded = false;\n    for (var key in node) {\n        if (key != 'id' && key != 'font' && key != 'semantic_id') {  // Exclude 'id', 'font' and 'semantic_id' from the attributes\n            var keyFormatted = \"&lt;b&gt;\" + key + \"&lt;/b&gt;:\\\\n\";\n            var valueFormatted = node[key].toString();\n            // Split key to adhere to the 30 character limit per line\n            if (keyFormatted.length &gt; 30) {\n                var keySplitIndex = keyFormatted.lastIndexOf(' ', 30);\n                if (keySplitIndex == -1) keySplitIndex = 30; // Split at 30 if no spaces\n                keyFormatted = keyFormatted.substring(0, keySplitIndex) + \"\\\\n\";\n            }\n            label += keyFormatted;\n            // Split value to adhere to the 30 character limit per line\n            while (valueFormatted.length &gt; 0) {\n                if (valueFormatted.length &gt; 30) {\n                    var valueSplitIndex = valueFormatted.lastIndexOf(' ', 30);\n                    if (valueSplitIndex == -1) valueSplitIndex = 30; // Split at 30 if no spaces\n                    label += valueFormatted.substring(0, valueSplitIndex) + \"\\\\n\";\n                    valueFormatted = valueFormatted.substring(valueSplitIndex).trim();\n                } else {\n                    label += valueFormatted + \"\\\\n\";\n                    break; // Exit loop if the rest of the value fits in one line\n                }\n            }\n        }\n    }\n    // Replace special HTML characters in the label\n    node['label'] = label.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nnetwork_nodes.update(nodes);\n};\n\"\"\",\n        \n        \"add_edges_js\": \"\"\"return function(edges) { \nfor (var i = 0; i &lt; edges.length; i++) {\n    var edge = edges[i];\n    var label = \"\";\n    var fromToAdded = false;\n    for (var key in edge) {\n        if (key != 'from' && key != 'to' && key != 'id') {  // Exclude 'from', 'to' and 'id' from the attributes\n            if (key == 'label' && !fromToAdded) {\n                label += \"&lt;b&gt;\" + key + \"&lt;/b&gt;:\\\\n\" + edge[key] + \"\\\\n\";\n                fromToAdded = true;\n            } else {\n                label += \"&lt;b&gt;\" + key + \"&lt;/b&gt;:\\\\n\" + edge[key] + \"\\\\n\";\n            }\n        }\n    }\n    edge['label'] = label.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nnetwork_edges.update(edges);\n};\n\n\"\"\",\n        \"after_layout\": \"\"\"\nnetwork_nodes = new vis.DataSet();\nself.add_nodes_js()(data.nodes);\nnetwork_edges = new vis.DataSet();\nself.add_edges_js()(data.edges);\nnetwork_data = {nodes: network_nodes, edges: network_edges};\n\n// network.fit()\nvar options = {\n    nodes: {\n        shape: 'box',\n        shapeProperties: {\n            borderRadius: 6\n        },\n        font: {\n            face: 'Palatino Linotype',\n            align: 'left',\n            color: '#1f2455',\n            multi: 'html',\n            bold: {\n                face: 'Lucida Sans Unicode',\n                size: 12\n            }\n        },\n        borderWidth: 3,\n        color: {\n            border: '#b73e3d'\n        },\n        shadow: {\n            enabled: true,\n            color: '#b73e3d',\n            size: 5,\n            x: 3,\n            y: 3\n        }\n    },\n    edges: {\n        arrows: {\n            to: {enabled: true, scaleFactor:1, type:'arrow'},\n            middle: {enabled: false, scaleFactor:1, type:'arrow'},\n            from: {enabled: false, scaleFactor:1, type:'arrow'}\n        },\n        length: 350,\n        font: {\n            face: 'Palatino Linotype',\n            size: 12,\n            color: '#e9b07d',\n            strokeWidth: 0,\n            strokeColor: '#000000',\n            multi: 'html',\n            align: 'middle',\n            bold: {\n                face: 'Lucida Sans Unicode',\n                size: 12\n                }\n        },\n    }\n}\nvar network = new vis.Network(mynetwork, network_data, options)\n\"\"\",\n        \"new_nodes\": \"\"\"self.add_nodes_js()(data.new_nodes)\"\"\",\n        \"new_edges\": \"\"\"self.add_edges_js()(data.new_edges)\"\"\"\n    }\n    __javascript__ = [\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"]\n    # __javascript_modules__= ['https://cdn.jsdelivr.net/npm/cytoscape-dom-node@1.2.0/src/index.min.js']\n# TODO: Assign special colors to groups once we have a solid flow for group ID\nvisjs_network = VisJSNetwork()\ntry:\n    server.stop()\nfinally:\n    server = pn.serve(pn.Row(visjs_network), port=46582, show=True, title='Knowledge graph sheeeeeeit')\n\n\n\nLoop over pre-generated history to create nodes/edges\n\nimport pickle\nwith open('graph_history.pkl', 'rb') as f:\n    history = pickle.load(f)\n\n\nasync def async_iterable(data_list):\n    for data in data_list:\n        yield data\n\ntup_list = [(str(k), v) for k,v in history.items()]\n\nasync for dat in async_iterable(tup_list):\n    proc_item = VisJSHandler.process_item(dat)\n    await asyncio.sleep(.5)\n    visjs_network.add_item(proc_item)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dmitriy Leybel",
    "section": "",
    "text": "If you’re here, you probably know my name. If you don’t, it’s Dmitriy.\nIn any case, welcome to my page!\nBy profession, I’m a founder, consultant, and data scientist. Those are but some of the hats I’ve worn. At this point, I’ve probably worked with every part of the tech stack(including MPUs and MCUs).\nExcept for bare-metal DevOps. We don’t speak of bare-metal DevOps in these parts.\nAbove all else, I consider myself a tinkerer.\n\n\n\nI run a data consultancy, Prudent Patterns, specializing in data of all sizes, big and small alike. If you’re looking for strategic guidance around machine learning, data quality, data infrastructure, Large Language Models, statistical analysis, data visualization, or experimentation, feel free to shoot me an email, here (dmleybel at gmail dot com).\nA side project of mine and micro-startup that I’ve founded is Hippograph. The nomenclature combines hippocampus and graph, as well as a play on the word hippogriff, y’know, the mythical creature(yeah, sometimes I consider myself clever). As the name suggests, it uses knowledge graphs as a structured memory for answering questions about corpuses of data, which it first deconstructs to the fundamentals necessary for approaching the desired lines of questioning. It’s easier demo’d than said, so I’d suggest you check out the video on its site. :) Also, feel free to reach out (dmleybel at gmail dot com) if you’re interested in teaming up.\nI am also an avid enjoyer of Corgis. A corgoisseur, one may say."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I was born in Kiev, Ukraine but I moved to Los Angeles, CA at the age of 5 – where I’ve lived most of my life. After a couple of decades of unyielding sun and pleasant weather, I decided that a change of scenery was in order. So I moved to Oregon."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html",
    "title": "Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "",
    "text": "It’s finally happening. It, being me writing a blog entry. (I’m editing this at 10k words. I guess it’s more of an article and less of a blog entry)\nThe motivation behind this series of posts is twofold, to run a basic knowledge graph Retrieval Augmented Generation(RAG) benchmark I can build off of and iteratively improve, and secondarily, to give the reader a ride-along of the process, from choosing a benchmark, creating a knowledge graph, connecting the knowledge graph to a vector store, and so forth. I am going to break down the components of not only a RAG system, but also introduce the necessary parts of any LLM workflow - so there will certainly be something for everyone. You are free to use the table of contents to skip around to what interests you most, or embark on an end-to-end marathon read.\nI fully believe in democratizing the ability to build and test your own LLM tools, as they are a critical frontier of artificial intelligence. That is the path towards progress and away from the centralization of these fantastic technologies."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#rag",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#rag",
    "title": "Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "1.1 RAG",
    "text": "1.1 RAG\nLarge Language Models(LLMs) are fantastic…that is, until you attempt to verify their output.\n\n\n\n\n\n\nFor this reason, RAG has been a fundamental component of truthiness. It also allows you to augment the LLM output through context-stuffing. The amount of tokens you can stuff into your context is not limitless, and so you can’t merely stuff all of your documents and tables into it. Out of this limit emerge dozens of RAG techniques which try to hydrate the prompt. The fine folks at Langchain have illustrated a small portion of these techniques here(Fig 1). Even with the promise of a 10 million token context window, there is no abatement of upcoming RAG techniques and companies built around it.\n\n\n\n\n\n\n\n\nFigure 1: Soiree of RAG techniques\n(Click to enlarge)\nSource: Langchain blog\n\n\n\n\n\n\nAn ever-growing survey of these techniques exists - and even that is not fully exhaustive. P.S. exa.ai is a fantastic source for research. \nFor reference, here(Fig 2) is a diagram of one of the simplest versions of RAG being implemented.\n\n\n\n\n\n\nFigure 2: Basic RAG Example"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#knowledge-graphs",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#knowledge-graphs",
    "title": "Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "1.2 Knowledge Graphs",
    "text": "1.2 Knowledge Graphs\nIt’s much easier to illustrate than explicate what a knowledge graph is(Fig 3). Below, we have a knowledge graph that represents places, people, and things along with their relationships to one another. This is a directed graph, in the sense that the connections flow in one direction - this generally makes it easier to specify the relationships between entities. There are many names for the entities within a knowledge graph as well as the connections between them; one of the most common naming conventions for them are nodes for the entities such as “Bob” or “The Louvre” and edges for the connections between the nodes such as “was created by” or “is located in”. Additionally, these nodes and edges can both have properties or attributes - for instance, the ‘Museum’ node can have attributes that enrich it such as “capacity: 2,000” and the edge ‘visited’ can be assigned a date attribute “date: March 28th, 2005”. You’ll often hear the word triple in reference to two nodes connected by an edge(Node A, Edge, Node B)\n\n\n\n\n\n\nFigure 3: An example of a basic knowledge graph.\n\n\n\nKnowledge graphs are often created within graph databases such as Neo4j, memgraph, or Amazon Neptune. They are often used within enterprises to integrate data from structured and unstructured databases alike to enable a single source of truth or knowledge. In theory, they are fantastic tools for information storage and retrieval, however, in practice they have a lot of quirks that prevent many companies from using them. The distillation of a company’s data into a neat set of nodes and edges is a complex task that requires knowledge graph experts, as well as alignment from all corners of the organization.\nWhile the appeal of knowledge graphs is immense because it appeals to our intuitive sense of informational organization and structure, you can see for yourself how difficult the task is by trying to organize the things on your desk into a knowledge graph. Your brain has no problem with making sense of it all and maintaining its own knowledge representation of what’s in front of your nose, but reproducing it in a knowledge graph is not as straightforward as our intuition leads us to believe.\n“Are you done sh*tting on knowledge graphs, Dmitriy?”\n\n1.2.1 LLM Synergy\nYes. In fact, here I am proudly generating a knowledge graph for the world to see.\nReal-time knowledge graph creation with GPT-3.5 Turbo Using:@LangChainAI @visjsPanel from @HoloViz_org for handling interpreter/browser bidirectional communication pic.twitter.com/P4mtAZDMaP— dmitriy (@DmitriyLeybel) February 18, 2024 \nIt may seem like this is the start of an all-hands meeting that’s 45 minutes too long, but I promise you that it’s not(unless you want it to be?). The word ‘synergy’ is perfect for describing the relationship between LLMs and knowledge graphs. The lowest hanging fruit for this match made in heaven was writing queries. Given a schema, an LLM can query a graph database to retrieve information.\nSome graph databases can be queried with Cypher(a graph querying language):\nMATCH (n:Person)-[r:KNOWS]-&gt;(m:Person)\nWHERE n.name = 'Alice'\nRETURN n, r, m\nIf you’re familiar with SQL, you immediately see the similarities. This query returns the person node n with the name Alice and all of the people(m) she knows(r). Fortunately, LLMs are superb at query languages, so your Cypher prowess can be minimal to nonexistent in order to compose this masterpiece:\n\nyo chatgpt, this is my graph db’s schema:schema here I need you to write a Cypher query that returns all of the people Alice knows\n\nCool. Now we can fire all of these data analysts, right? Maybe next year. (DISCLAIMER: this is a joke, not business advice)\nQuery generation turns out to be fairly popular, with frameworks like Langchain and LlamaIndex creating modules to do just that. Turns out, using LLMs, we can not only build queries, but we can build the knowledge graph itself. I will later go over this at length, so to be brief, you can have a LLM go over a set of documents chunk by chunk and output these triplets of nodes and edges iteratively. After loading them into a graph database, you can end the process there and trot along with your newly minted database, or you can now let the LLM create queries against that database as described earlier.\n\n\nLangchain and LlamaIndex also have their own plug-n-play knowledge graph creation modules.\nAt this point, like any rational human being, you may be asking, can this get any better? I mean, you’ve lasted this long, so I imagine that you already know the answer."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#rag-knowledge-graphs",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#rag-knowledge-graphs",
    "title": "Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "1.3 RAG + Knowledge Graphs",
    "text": "1.3 RAG + Knowledge Graphs\n\n\n\n\n\n\nImportant\n\n\n\nRemember, there is more than one way you can skin a cat. The examples provided are merely the ones I believe are most illustrative of the main components. The extent of the composability is only limited by your imagination.\n\n\nWhen you combine RAG with knowledge graphs, you get the best of both worlds. On one hand, you get a fuzzy(probabalistic) semantic layer which can be used to compare the essence of sentences or paragraphs to via embeddings. On the other, you have a discrete and symbolic representation of knowledge. That sounds an awful lot like humans – vibes-based logical processors.\nThere are limitless ways to construct a system that exploits both modalities, so I’m going to focus on the base cases. The fundamental relationship takes place between the vector embeddings and the knowledge graph. The nodes(and in some cases, the edges) are linked to an embedding related to their source material.\nThe first objective is to use an LLM to create the knowledge graph in conjunction with the embeddings. The embeddings will be stored in a vector database or vector store, which is essentially an optimized container that allows extremely fast vector comparison operations so you can quickly find the most similar embeddings. Some vector databases live in the cloud(Pinecone), they can be self-hosted(Chroma), or they can stay in your very program’s memory(FAISS). Fig 4 illustrates the fundamentals of generating your knowledge graph and vector store.\n\n1.3.1 Generating Knowledge Graphs and Populating Vector Stores\nOnce a corpus of documents is chunked into pieces, those pieces can be processed by the LLM and converted into triples which are then loaded into the knowledge graph. Concurrently, embeddings are created for the document chunks and loaded into the vector store. In each case, you can attach the reference for the node or embedding in its respective twin – this is where the magic lies. The text from the chunked documents can be stored in either the knowledge graph or in the vector store, or both. Once both are established, there are multiple retrieval strategies we can use to take advantage of this system.\n\n\n\n\n\n\nNote\n\n\n\nBuilding the knowledge graph sounds simpler than it is, and just as the architectural design of these systems, it is open to myriads of potential options – some good, and some not so good. This will be addressed.\n\n\n\n\n\n\n\n\nFigure 4: Knowledge Graph and Embedding Generation\n\n\n\n\n\n1.3.2 Retrieval Strategy #1 Focused on Embeddings Search Followed by Knowledge Graph Adjacency\nWith a populated vector store and knowledge graph, we are set to experiment with a wide array of retrieval strategies in pursuit of finding the best one to hydrate our prompt. Fig 5 involves using the vector store to find the nearest matching embedding, find its reference in the knowledge graph, and then find the adjacent nodes within the knowledge graph to add to our prompt. This makes intuitive sense because concepts related to the initial node are likely to be relevant for the LLM in addressing the user’s query.\n\n\n\n\n\n\nFigure 5: One strategy of retrieval through first finding a close embedding, and then utilizing the adjacency of nodes in the knowledge graph to hydrate the prompt\n\n\n\n\n\n1.3.3 Retrieval Strategy #2 Focused on Graph Query Generation\nAnother retrieval strategy would switch the knowledge graph and vector store steps around. This will involve an extra call to the LLM in order to construct the query we’ll send to the knowledge graph. Once the nodes(and edges) are returned, we can trace the node to its referenced embedding, and retrieve the neighborhood of embeddings along with their text. Alternatively, we can ignore the embeddings and simply focus on the neighborhood of the returned nodes. For the example in Fig 6, I’ll focus on the former. As much as we both love flowcharts, I have a feeling you’re getting somewhat tired of them. That said, here’s one more.\n\n\n\n\n\n\nFigure 6: Another strategy for retrieval is to generate queries against the graph database containing the knowledge graph, and then."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#hotpot-and-beer",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#hotpot-and-beer",
    "title": "Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "2.1 Hotpot and Beer?",
    "text": "2.1 Hotpot and Beer?\nSingle-hop benchmarking appears to be most popular according to the RAG survey, however, we have more faith in knowledge graphs than a measly single-hop reasoning task. A single-hop requires the information from a single document to answer a question, however a multi-hop task requires you to hop between documents in order to answer the question. HotPotQA appears to be the most popular multi-hop dataset. Mentioned immediately on the HotPotQA website is another dataset which they shout out as newer, with a more diverse set of hops required, while including the HotPotQA dataset within it - BeerQA(is anyone else thirsty…). It combines QA data from three datasets, being HotPotQA, SQuAD, and its own formulated questions from Wikipedia for even more hops. Upon further inspection, BeerQA specifies that it primarily focuses on a fullwiki evaluation, that is to say, you must use the entirety of wikipedia in the task. Due to time and resource constraints, we do not currently want to build a knowledge graph from a 24GB dataset from the get-go. We do, however, want to be able to iterate in a quick and agile manner. HotPotQA doesn’t have the same compute-heavy requirement, and neither does another amusingly named dataset."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#musique",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/index.html#musique",
    "title": "Don’t RAG on Knowledge Graphs(Or Do): RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "2.2 MuSiQue to my ears",
    "text": "2.2 MuSiQue to my ears\nAccording to the HotpotQA paper, it also has the option for using the full wiki in the evaluation criterion, however, it also has a distractor option where you’re given 2 ‘gold’ paragraphs containing the connecting information coupled with 8 irrelevant ‘distractors’ that serve as noise. Another dataset was created as an improvement over HotpotQA as well as its successor, 2WikiMultihopQA – MuSiQue(Multihop Questions via Single-hop QUestion Composition) improves over its predecessors and includes questions with upwards of 18 distractors and numerous gold paragraphs in order to create questions of up to 4 hops. In addition, it handles some cases that would’ve allowed cheating within HotPotQA(such as inferring the information that is present in the hops). In addition, MuSiQue adds answerability to the mix – roughly half of the questions are unanswerable given the data, with the breadcrumbs provided by the provided distractors being misleading.\n\n\n\n\n\n\nThis is a great augmentation because this is the type of eval that will often be present in the real world, since we often expect real world retrieval of information retrieval to come up short.\n\n\n\n\n\n\n\n\nFigure 9: Answerable and Nonanswerable Multihop Questions\n\n\n\n\n\n\nMuSiQue contains two evaluations, one with only answerable questions, and the other, evenly divided between non-answerable and answerable questions. If we look at the MuSiQue leaderboards in Fig 10, we see that the F1 score(harmonic mean of precision and recall – the higher the better) is substantially better for the Answerable dataset, as it removed the option of there being unanswerable questions for the models to hallucinate on.\n\n\n\n\n\n\nFigure 10: MuSiQue Leaderboard Comparison\n\n\n\nBefore wrapping up, I’d like to at least share some of the dev dataset meant to be used in the development of your data pipeline, published in the MuSiQue github repo.\n\n\n\n\nCode\nimport jsonlines\n\njs_list = []\nwith jsonlines.open('data/musique_full_v1.0_dev.jsonl') as reader:\n    for i in range(5):\n        js_list.append(reader.read())\njs_list[0]\n\n\n{'id': '2hop__153573_109006',\n 'paragraphs': [{'idx': 0,\n   'title': 'History of the Internet',\n   'paragraph_text': \"Precursors to the web browser emerged in the form of hyperlinked applications during the mid and late 1980s (the bare concept of hyperlinking had by then existed for some decades). Following these, Tim Berners - Lee is credited with inventing the World Wide Web in 1989 and developing in 1990 both the first web server, and the first web browser, called WorldWideWeb (no spaces) and later renamed Nexus. Many others were soon developed, with Marc Andreessen's 1993 Mosaic (later Netscape), being particularly easy to use and install, and often credited with sparking the internet boom of the 1990s. Today, the major web browsers are Firefox, Internet Explorer, Google Chrome, Opera and Safari.\",\n   'is_supporting': False},\n  {'idx': 1,\n   'title': 'Ceville',\n   'paragraph_text': \"Ceville is a humorous graphic adventure video game developed by the German game studio Realmforge Studios and published by Kalypso Media. Despite the game's use of 3D environments and models, the gameplay is very true to the graphical point-and-click adventure tradition of gameplay, immortalized by game series like Monkey Island from LucasArts and the King's Quest series from Sierra Online.\",\n   'is_supporting': False},\n  {'idx': 2,\n   'title': 'Zipline Safari',\n   'paragraph_text': \"Zipline Safari is a zip-line course in Florida. It is the only zip-line course in the state, and is claimed to be the world's only zip-line created for flat land. Zipline Safari opened on 16 January 2009 in Forever Florida, a wildlife attraction near Holopaw, Florida. The zip-line cost $350,000 to build, and consists of nine platforms built up from the ground and traveled between by zip-lining. Forever Florida built the course to promote ecotourism and interaction with the natural environment of Florida.\",\n   'is_supporting': False},\n  {'idx': 3,\n   'title': 'Parc Safari',\n   'paragraph_text': \"Parc Safari is a zoo in Hemmingford, Quebec, Canada, and is one of the region's major tourist attractions; that has both African & Asian species of elephant.\",\n   'is_supporting': False},\n  {'idx': 4,\n   'title': 'The Reporter (TV series)',\n   'paragraph_text': 'The Reporter is an American drama series that aired on CBS from September 25 to December 18, 1964. The series was created by Jerome Weidman and developed by executive producers Keefe Brasselle and John Simon.',\n   'is_supporting': False},\n  {'idx': 5,\n   'title': 'Earthworm Jim 4',\n   'paragraph_text': 'Earthworm Jim 4 is a video game in the \"Earthworm Jim\" series. It was originally announced by Interplay Entertainment in 2008, and referred to by Interplay as \"still in development\" in May 2011. Later commentary from individual developers would claim that development hadn\\'t started, though desire to create a new entry in the series remained. In May 2019, it was announced that the game was to begin development exclusively for the upcoming Intellivision Amico console.',\n   'is_supporting': False},\n  {'idx': 6,\n   'title': 'Adobe Flash Player',\n   'paragraph_text': 'Availability on desktop operating systems Platform Latest version Browser support Windows XP and later Windows Server 2003 and later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera, Internet Explorer, Microsoft Edge Windows 2000 11.1. 102.55? Windows 98 and ME 9.0. 115.0? Windows 95 and NT 4 7.0. 14.0? Mac OS X 10.6 or later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera Mac OS X 10.5 10.3. 183.90? Classic Mac OS, PowerPC 7.0. 14.0? Classic Mac OS, 68k 5.0? Linux 27.0. 0.183 Firefox, Chrome, Chromium, Opera',\n   'is_supporting': False},\n  {'idx': 7,\n   'title': 'Apple Inc.',\n   'paragraph_text': \"Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, and the HomePod smart speaker. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.\",\n   'is_supporting': False},\n  {'idx': 8,\n   'title': 'Philadelphia Zoo',\n   'paragraph_text': 'The Philadelphia Zoo, located in the Centennial District of Philadelphia, Pennsylvania, on the west bank of the Schuylkill River, was the first true zoo in the United States. Chartered by the Commonwealth of Pennsylvania on March 21, 1859, its opening was delayed by the American Civil War until July 1, 1874. It opened with 1,000 animals and an admission price of 25 cents. For a brief time, the zoo also housed animals brought over from safari on behalf of the Smithsonian Institution, which had not yet built the National Zoo.',\n   'is_supporting': False},\n  {'idx': 9,\n   'title': 'Web browser',\n   'paragraph_text': \"Apple's Safari had its first beta release in January 2003; as of April 2011, it had a dominant share of Apple-based web browsing, accounting for just over 7% of the entire browser market.\",\n   'is_supporting': False},\n  {'idx': 10,\n   'title': 'List of The 100 episodes',\n   'paragraph_text': 'The 100 (pronounced The Hundred) is an American post-apocalyptic science fiction drama television series developed by Jason Rothenberg, which premiered on March 19, 2014, on The CW. It is loosely based on a 2013 book of the same name, the first in a book series by Kass Morgan. The series follows a group of teens as they become the first people from a space habitat to return to Earth after a devastating nuclear apocalypse.',\n   'is_supporting': False},\n  {'idx': 11,\n   'title': 'Shiira',\n   'paragraph_text': 'Shiira (シイラ, Japanese for the common dolphin-fish) is a discontinued open source web browser for the Mac OS X operating system. According to its lead developer Makoto Kinoshita, the goal of Shiira was \"to create a browser that is better and more useful than Safari\". Shiira used WebKit for rendering and scripting. The project reached version 2.3 before it was discontinued, and by December 2011 the developer\\'s website had been removed.',\n   'is_supporting': False},\n  {'idx': 12,\n   'title': 'Traffic Department 2192',\n   'paragraph_text': 'Traffic Department 2192 is a top down shooter game for IBM PC, developed by P-Squared Productions and released in 1994 by Safari Software and distributed by Epic MegaGames. The full game contains three episodes (Alpha, Beta, Gamma), each with twenty missions, in which the player pilots a \"hoverskid\" about a war-torn city to complete certain mission objectives. The game was released as freeware under the Creative Commons License CC BY-ND 3.0 in 2007.',\n   'is_supporting': False},\n  {'idx': 13,\n   'title': 'Maciej Stachowiak',\n   'paragraph_text': \"Maciej Stachowiak (; born June 6, 1976) is a Polish American software developer currently employed by Apple Inc., where he is a leader of the development team responsible for the Safari web browser and WebKit Framework. A longtime proponent of open source software, Stachowiak was involved with the SCWM, GNOME and Nautilus projects for Linux before joining Apple. He is actively involved the development of web standards, and is a co-chair of the World Wide Web Consortium's HTML 5 working group and a member of the Web Hypertext Application Technology Working Group steering committee.\",\n   'is_supporting': False},\n  {'idx': 14,\n   'title': 'Ellery Queen (TV series)',\n   'paragraph_text': 'Ellery Queen is an American TV series, developed by Richard Levinson and William Link, who based it on the fictional character of the same name. The series ran on NBC from September 11, 1975, to April 4, 1976 featuring the titular fictional sleuth. The series stars Jim Hutton as the titular character, and David Wayne as his father, Inspector Richard Queen.',\n   'is_supporting': False},\n  {'idx': 15,\n   'title': 'Hunting',\n   'paragraph_text': 'In the 19th century, southern and central European sport hunters often pursued game only for a trophy, usually the head or pelt of an animal, which was then displayed as a sign of prowess. The rest of the animal was typically discarded. Some cultures, however, disapprove of such waste. In Nordic countries, hunting for trophies was—and still is—frowned upon. Hunting in North America in the 19th century was done primarily as a way to supplement food supplies, although it is now undertaken mainly for sport.[citation needed] The safari method of hunting was a development of sport hunting that saw elaborate travel in Africa, India and other places in pursuit of trophies. In modern times, trophy hunting persists and is a significant industry in some areas.[citation needed]',\n   'is_supporting': False},\n  {'idx': 16,\n   'title': 'Safari School',\n   'paragraph_text': 'Safari School is a BBC Two reality television series presented by Dr Charlotte Uhlenbroek in which eight celebrities take part in a four-week ranger training course in the Shamwari Game Reserve in South Africa.',\n   'is_supporting': False},\n  {'idx': 17,\n   'title': 'African Safari Wildlife Park',\n   'paragraph_text': 'The African Safari Wildlife Park is a drive through wildlife park in Port Clinton, Ohio, United States. Visitors can drive through the preserve and watch and feed the animals from their car. Visitors can spend as much time in the preserve as they wish, observing and feeding the animals, before proceeding to the walk through part of the park, called Safari Junction. The park is closed during the winter.',\n   'is_supporting': False},\n  {'idx': 18,\n   'title': 'White armored car',\n   'paragraph_text': 'The White armored car was a series of armored cars developed by the White Motor Company in Cleveland, Ohio from 1915.',\n   'is_supporting': False},\n  {'idx': 19,\n   'title': 'Blue Tea Games',\n   'paragraph_text': 'The 14th game of this series. The BETA game was released in September 2017. This episode will be developed by Blue Tea Games who return to the series since 2014.',\n   'is_supporting': False}],\n 'question': \"Who developed the eponymous character from the series that contains Mickey's Safari in Letterland?\",\n 'question_decomposition': [{'id': 153573,\n   'question': \"What series is Mickey's Safari in Letterland from?\",\n   'answer': 'Mickey Mouse',\n   'paragraph_support_idx': None},\n  {'id': 109006,\n   'question': 'Who developed #1 ?',\n   'answer': 'Walt Disney',\n   'paragraph_support_idx': None}],\n 'answer': 'Walt Disney',\n 'answer_aliases': [],\n 'answerable': False}\n\n\n\n\nThis is but one entry in the jsonl file. Although it has an answer 'answer': 'Walt Disney', there is not enough supporting evidence within the 20 accompanying paragraph to substantiate that and so it has a label of 'answerable': False. Each paragraph has a is_supporting label that is to be used in evaluating the pipeline’s ability to not only use the information found in these paragraphs, but to also classify these paragraphs as being supporting elements.\nAnd furthermore, here are examples of a couple of gold paragraphs from another question, where is_supporting == True. Here you can witness for yourself the necessary connection between Lloyd Dane and the county of his birthplace. Just one of the paragraphs by itself wouldn’t be enough to make that connection:\n\n\n\nCode\ndisplay(js_list[-1]['question'])\n\np_list = []\nfor paragraph in js_list[-1]['paragraphs']:\n    if paragraph.get('is_supporting', False):\n        p_list.append(paragraph)\npprint(p_list)\n\n\n\"Which county does Lloyd Dane's birthplace belong to?\"\n\n\n[{'idx': 3,\n  'is_supporting': True,\n  'paragraph_text': 'Lloyd Dane (August 19, 1925 – December 11, 2015) was a '\n                    'NASCAR Grand National Series driver from Eldon, Missouri. '\n                    'He participated part-time in the 1951 and 1954 to 1964 '\n                    'seasons, capturing four wins, all in his own car. Two of '\n                    \"Dane's wins came during the 1956 season, when he finished \"\n                    'a career best 23rd in points.',\n  'title': 'Lloyd Dane'},\n {'idx': 11,\n  'is_supporting': True,\n  'paragraph_text': 'Eldon is a city in Miller County, Missouri, United '\n                    'States, located thirty miles southwest of Jefferson City. '\n                    'The population was 4,567 at the 2010 census.',\n  'title': 'Eldon, Missouri'}]"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/notebooks/musique_eda.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-0/notebooks/musique_eda.html",
    "title": "",
    "section": "",
    "text": "import panel as pn\npn.extension()\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nimport jsonlines\n\njs_list = []\nwith jsonlines.open('data/musique_full_v1.0_dev.jsonl') as reader:\n    for i in range(5):\n        js_list.append(reader.read())\njs_list[0]\n\n{'id': '2hop__153573_109006',\n 'paragraphs': [{'idx': 0,\n   'title': 'History of the Internet',\n   'paragraph_text': \"Precursors to the web browser emerged in the form of hyperlinked applications during the mid and late 1980s (the bare concept of hyperlinking had by then existed for some decades). Following these, Tim Berners - Lee is credited with inventing the World Wide Web in 1989 and developing in 1990 both the first web server, and the first web browser, called WorldWideWeb (no spaces) and later renamed Nexus. Many others were soon developed, with Marc Andreessen's 1993 Mosaic (later Netscape), being particularly easy to use and install, and often credited with sparking the internet boom of the 1990s. Today, the major web browsers are Firefox, Internet Explorer, Google Chrome, Opera and Safari.\",\n   'is_supporting': False},\n  {'idx': 1,\n   'title': 'Ceville',\n   'paragraph_text': \"Ceville is a humorous graphic adventure video game developed by the German game studio Realmforge Studios and published by Kalypso Media. Despite the game's use of 3D environments and models, the gameplay is very true to the graphical point-and-click adventure tradition of gameplay, immortalized by game series like Monkey Island from LucasArts and the King's Quest series from Sierra Online.\",\n   'is_supporting': False},\n  {'idx': 2,\n   'title': 'Zipline Safari',\n   'paragraph_text': \"Zipline Safari is a zip-line course in Florida. It is the only zip-line course in the state, and is claimed to be the world's only zip-line created for flat land. Zipline Safari opened on 16 January 2009 in Forever Florida, a wildlife attraction near Holopaw, Florida. The zip-line cost $350,000 to build, and consists of nine platforms built up from the ground and traveled between by zip-lining. Forever Florida built the course to promote ecotourism and interaction with the natural environment of Florida.\",\n   'is_supporting': False},\n  {'idx': 3,\n   'title': 'Parc Safari',\n   'paragraph_text': \"Parc Safari is a zoo in Hemmingford, Quebec, Canada, and is one of the region's major tourist attractions; that has both African & Asian species of elephant.\",\n   'is_supporting': False},\n  {'idx': 4,\n   'title': 'The Reporter (TV series)',\n   'paragraph_text': 'The Reporter is an American drama series that aired on CBS from September 25 to December 18, 1964. The series was created by Jerome Weidman and developed by executive producers Keefe Brasselle and John Simon.',\n   'is_supporting': False},\n  {'idx': 5,\n   'title': 'Earthworm Jim 4',\n   'paragraph_text': 'Earthworm Jim 4 is a video game in the \"Earthworm Jim\" series. It was originally announced by Interplay Entertainment in 2008, and referred to by Interplay as \"still in development\" in May 2011. Later commentary from individual developers would claim that development hadn\\'t started, though desire to create a new entry in the series remained. In May 2019, it was announced that the game was to begin development exclusively for the upcoming Intellivision Amico console.',\n   'is_supporting': False},\n  {'idx': 6,\n   'title': 'Adobe Flash Player',\n   'paragraph_text': 'Availability on desktop operating systems Platform Latest version Browser support Windows XP and later Windows Server 2003 and later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera, Internet Explorer, Microsoft Edge Windows 2000 11.1. 102.55? Windows 98 and ME 9.0. 115.0? Windows 95 and NT 4 7.0. 14.0? Mac OS X 10.6 or later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera Mac OS X 10.5 10.3. 183.90? Classic Mac OS, PowerPC 7.0. 14.0? Classic Mac OS, 68k 5.0? Linux 27.0. 0.183 Firefox, Chrome, Chromium, Opera',\n   'is_supporting': False},\n  {'idx': 7,\n   'title': 'Apple Inc.',\n   'paragraph_text': \"Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, and the HomePod smart speaker. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.\",\n   'is_supporting': False},\n  {'idx': 8,\n   'title': 'Philadelphia Zoo',\n   'paragraph_text': 'The Philadelphia Zoo, located in the Centennial District of Philadelphia, Pennsylvania, on the west bank of the Schuylkill River, was the first true zoo in the United States. Chartered by the Commonwealth of Pennsylvania on March 21, 1859, its opening was delayed by the American Civil War until July 1, 1874. It opened with 1,000 animals and an admission price of 25 cents. For a brief time, the zoo also housed animals brought over from safari on behalf of the Smithsonian Institution, which had not yet built the National Zoo.',\n   'is_supporting': False},\n  {'idx': 9,\n   'title': 'Web browser',\n   'paragraph_text': \"Apple's Safari had its first beta release in January 2003; as of April 2011, it had a dominant share of Apple-based web browsing, accounting for just over 7% of the entire browser market.\",\n   'is_supporting': False},\n  {'idx': 10,\n   'title': 'List of The 100 episodes',\n   'paragraph_text': 'The 100 (pronounced The Hundred) is an American post-apocalyptic science fiction drama television series developed by Jason Rothenberg, which premiered on March 19, 2014, on The CW. It is loosely based on a 2013 book of the same name, the first in a book series by Kass Morgan. The series follows a group of teens as they become the first people from a space habitat to return to Earth after a devastating nuclear apocalypse.',\n   'is_supporting': False},\n  {'idx': 11,\n   'title': 'Shiira',\n   'paragraph_text': 'Shiira (シイラ, Japanese for the common dolphin-fish) is a discontinued open source web browser for the Mac OS X operating system. According to its lead developer Makoto Kinoshita, the goal of Shiira was \"to create a browser that is better and more useful than Safari\". Shiira used WebKit for rendering and scripting. The project reached version 2.3 before it was discontinued, and by December 2011 the developer\\'s website had been removed.',\n   'is_supporting': False},\n  {'idx': 12,\n   'title': 'Traffic Department 2192',\n   'paragraph_text': 'Traffic Department 2192 is a top down shooter game for IBM PC, developed by P-Squared Productions and released in 1994 by Safari Software and distributed by Epic MegaGames. The full game contains three episodes (Alpha, Beta, Gamma), each with twenty missions, in which the player pilots a \"hoverskid\" about a war-torn city to complete certain mission objectives. The game was released as freeware under the Creative Commons License CC BY-ND 3.0 in 2007.',\n   'is_supporting': False},\n  {'idx': 13,\n   'title': 'Maciej Stachowiak',\n   'paragraph_text': \"Maciej Stachowiak (; born June 6, 1976) is a Polish American software developer currently employed by Apple Inc., where he is a leader of the development team responsible for the Safari web browser and WebKit Framework. A longtime proponent of open source software, Stachowiak was involved with the SCWM, GNOME and Nautilus projects for Linux before joining Apple. He is actively involved the development of web standards, and is a co-chair of the World Wide Web Consortium's HTML 5 working group and a member of the Web Hypertext Application Technology Working Group steering committee.\",\n   'is_supporting': False},\n  {'idx': 14,\n   'title': 'Ellery Queen (TV series)',\n   'paragraph_text': 'Ellery Queen is an American TV series, developed by Richard Levinson and William Link, who based it on the fictional character of the same name. The series ran on NBC from September 11, 1975, to April 4, 1976 featuring the titular fictional sleuth. The series stars Jim Hutton as the titular character, and David Wayne as his father, Inspector Richard Queen.',\n   'is_supporting': False},\n  {'idx': 15,\n   'title': 'Hunting',\n   'paragraph_text': 'In the 19th century, southern and central European sport hunters often pursued game only for a trophy, usually the head or pelt of an animal, which was then displayed as a sign of prowess. The rest of the animal was typically discarded. Some cultures, however, disapprove of such waste. In Nordic countries, hunting for trophies was—and still is—frowned upon. Hunting in North America in the 19th century was done primarily as a way to supplement food supplies, although it is now undertaken mainly for sport.[citation needed] The safari method of hunting was a development of sport hunting that saw elaborate travel in Africa, India and other places in pursuit of trophies. In modern times, trophy hunting persists and is a significant industry in some areas.[citation needed]',\n   'is_supporting': False},\n  {'idx': 16,\n   'title': 'Safari School',\n   'paragraph_text': 'Safari School is a BBC Two reality television series presented by Dr Charlotte Uhlenbroek in which eight celebrities take part in a four-week ranger training course in the Shamwari Game Reserve in South Africa.',\n   'is_supporting': False},\n  {'idx': 17,\n   'title': 'African Safari Wildlife Park',\n   'paragraph_text': 'The African Safari Wildlife Park is a drive through wildlife park in Port Clinton, Ohio, United States. Visitors can drive through the preserve and watch and feed the animals from their car. Visitors can spend as much time in the preserve as they wish, observing and feeding the animals, before proceeding to the walk through part of the park, called Safari Junction. The park is closed during the winter.',\n   'is_supporting': False},\n  {'idx': 18,\n   'title': 'White armored car',\n   'paragraph_text': 'The White armored car was a series of armored cars developed by the White Motor Company in Cleveland, Ohio from 1915.',\n   'is_supporting': False},\n  {'idx': 19,\n   'title': 'Blue Tea Games',\n   'paragraph_text': 'The 14th game of this series. The BETA game was released in September 2017. This episode will be developed by Blue Tea Games who return to the series since 2014.',\n   'is_supporting': False}],\n 'question': \"Who developed the eponymous character from the series that contains Mickey's Safari in Letterland?\",\n 'question_decomposition': [{'id': 153573,\n   'question': \"What series is Mickey's Safari in Letterland from?\",\n   'answer': 'Mickey Mouse',\n   'paragraph_support_idx': None},\n  {'id': 109006,\n   'question': 'Who developed #1 ?',\n   'answer': 'Walt Disney',\n   'paragraph_support_idx': None}],\n 'answer': 'Walt Disney',\n 'answer_aliases': [],\n 'answerable': False}\n\n\n\njs_list[0].keys()\n\n\npn.pane.JSON(js_list[-1])\n\n\nfrom pprint import pprint\n\n\nsupporting_paragraphs = [paragraph for paragraph in js_list[-1]['paragraphs'] if paragraph.get('is_supporting', False)]\n\npprint(supporting_paragraphs)\n\n[{'idx': 3,\n  'is_supporting': True,\n  'paragraph_text': 'Lloyd Dane (August 19, 1925 – December 11, 2015) was a '\n                    'NASCAR Grand National Series driver from Eldon, Missouri. '\n                    'He participated part-time in the 1951 and 1954 to 1964 '\n                    'seasons, capturing four wins, all in his own car. Two of '\n                    \"Dane's wins came during the 1956 season, when he finished \"\n                    'a career best 23rd in points.',\n  'title': 'Lloyd Dane'},\n {'idx': 11,\n  'is_supporting': True,\n  'paragraph_text': 'Eldon is a city in Miller County, Missouri, United '\n                    'States, located thirty miles southwest of Jefferson City. '\n                    'The population was 4,567 at the 2010 census.',\n  'title': 'Eldon, Missouri'}]\n\n\n\njs_list[0]\n\n\ndisplay(js_list[-1]['question'])\n\np_list = []\nfor paragraph in js_list[-1]['paragraphs']:\n    if paragraph.get('is_supporting', False):\n        p_list.append(paragraph)\npprint(p_list)\n\n\"Which county does Lloyd Dane's birthplace belong to?\"\n\n\n[{'idx': 3,\n  'is_supporting': True,\n  'paragraph_text': 'Lloyd Dane (August 19, 1925 – December 11, 2015) was a '\n                    'NASCAR Grand National Series driver from Eldon, Missouri. '\n                    'He participated part-time in the 1951 and 1954 to 1964 '\n                    'seasons, capturing four wins, all in his own car. Two of '\n                    \"Dane's wins came during the 1956 season, when he finished \"\n                    'a career best 23rd in points.',\n  'title': 'Lloyd Dane'},\n {'idx': 11,\n  'is_supporting': True,\n  'paragraph_text': 'Eldon is a city in Miller County, Missouri, United '\n                    'States, located thirty miles southwest of Jefferson City. '\n                    'The population was 4,567 at the 2010 census.',\n  'title': 'Eldon, Missouri'}]\n\n\n\ndef count_supporting_paragraphs(json_obj):\n    count = 0\n    for paragraph in json_obj['paragraphs']:\n        if paragraph.get('is_supporting', False):\n            count += 1\n    return count\n\n# Example usage\nnum_supporting_paragraphs = count_supporting_paragraphs(js_list[-1])\nprint(f\"Number of supporting paragraphs: {num_supporting_paragraphs}\")\n\nNumber of supporting paragraphs: 2"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/notebooks/kg_build.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/notebooks/kg_build.html",
    "title": "Explore",
    "section": "",
    "text": "from langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom jsonlines import jsonlines\n\nfrom IPython.display import display, Markdown\nfrom pprint import pprint\n\nfrom langchain_anthropic import ChatAnthropic\nfrom dotenv import load_dotenv\nmusique_dir = '../musique/musique/'\nimport panel as pn\npn.extension()"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/notebooks/kg_build.html#prediction-prompts",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/notebooks/kg_build.html#prediction-prompts",
    "title": "Explore",
    "section": "Prediction prompts",
    "text": "Prediction prompts\n\nfrom pydantic import BaseModel\nfrom langchain_core.messages import SystemMessage\nfrom pydantic import Field\nfrom typing import List\n\n\nfrom langchain_core.messages import SystemMessage\n\nguidance_str = \\\n\"You are the best taker of tests, particularly excelling at \\\nanswering questions based on information provided to you. \\\nYou will be given nodes and edges from a knowledge graph in \\\na JSON format and you are expected to answer a question based \\\non them. The 'from_node' and 'to_node' fields in the edges correspond \\\nto the 'connecting_id' fields in the nodes. \\\nYour output will only be JSON, and nothing more. \\\nNo yapping.\\n\"\n\nclass Answer(BaseModel):\n    answerable: bool = Field(..., description=\"true or false value. Whether or not the answer is answerable based on the provided nodes and edges\")\n    answer: str = Field(..., description=\"The answer to the question. Terse and concise.\")\n    support_idxs: List[int] = Field(..., description=\"The indices of the nodes that support the answer. From 'paragraph_idx' field\")\n\nformat_str = f\"This JSON Schema is the format you will be using: {json.dumps(Answer.model_json_schema())}\"\n\nsystem_message = SystemMessage(guidance_str + format_str)\n\n\nsystem_message\n\nSystemMessage(content='You are the best taker of tests, particularly excelling at answering questions based on information provided to you. You will be given nodes and edges from a knowledge graph in a JSON format and you are expected to answer a question based on them. The \\'from_node\\' and \\'to_node\\' fields in the edges correspond to the \\'connecting_id\\' fields in the nodes. Your output will only be JSON, and nothing more. No yapping.\\nThis JSON Schema is the format you will be using: {\"properties\": {\"answerable\": {\"description\": \"true or false value. Whether or not the answer is answerable based on the provided nodes and edges\", \"title\": \"Answerable\", \"type\": \"boolean\"}, \"answer\": {\"description\": \"The answer to the question. Terse and concise.\", \"title\": \"Answer\", \"type\": \"string\"}, \"support_idxs\": {\"description\": \"The indices of the nodes that support the answer. From \\'paragraph_idx\\' field\", \"items\": {\"type\": \"integer\"}, \"title\": \"Support Idxs\", \"type\": \"array\"}}, \"required\": [\"answerable\", \"answer\", \"support_idxs\"], \"title\": \"Answer\", \"type\": \"object\"}')\n\n\n\njson.dumps(Answer.model_json_schema())\n\n'{\"properties\": {\"answerable\": {\"description\": \"true or false value. Whether or not the answer is answerable based on the provided nodes and edges\", \"title\": \"Answerable\", \"type\": \"boolean\"}, \"answer\": {\"description\": \"The answer to the question. Terse and concise.\", \"title\": \"Answer\", \"type\": \"string\"}, \"support_idxs\": {\"description\": \"The indices of the nodes that support the answer. From \\'paragraph_idx\\' field\", \"items\": {\"type\": \"integer\"}, \"title\": \"Support Idxs\", \"type\": \"array\"}}, \"required\": [\"answerable\", \"answer\", \"support_idxs\"], \"title\": \"Answer\", \"type\": \"object\"}'\n\n\n\nfrom langchain_core.prompts import (\n    HumanMessagePromptTemplate,\n    SystemMessagePromptTemplate,\n)\n\n\nhuman_str = \"Question: {question}\\n\\n Supporting Evidence:\\n {evidence}\"\nhuman_template = HumanMessagePromptTemplate.from_template(human_str)\n\n\nfrom langchain.output_parsers import PydanticOutputParser, OutputFixingParser\n\n_output_parser = PydanticOutputParser(pydantic_object=Answer)\noutput_parser = OutputFixingParser.from_llm(parser=_output_parser, llm=chat_model, max_retries=3)\n\n\nlines[-2]['question']\n\n'What is the body of water by the city where Zvezda stadium is located?'\n\n\n\ngraph_components0\n\n[{'nodes': [{'semantic_id': 'commonwealth_of_the_philippines',\n    'category': 'political_entity',\n    'attributes': {'name': 'Commonwealth of the Philippines',\n     'years_active': '1935 to 1946',\n     'description': 'The administrative body that governed the Philippines during this period, except for a period of exile from 1942 to 1945 when Japan occupied the country.'},\n    'paragraph_idx': 0},\n   {'semantic_id': 'insular_government',\n    'category': 'political_entity',\n    'attributes': {'name': 'Insular Government',\n     'description': 'A United States territorial government that was replaced by the Commonwealth of the Philippines.'},\n    'paragraph_idx': 0}],\n  'edges': [{'from_node': 'insular_government',\n    'to_node': 'commonwealth_of_the_philippines',\n    'category': 'replaced'}]},\n {'nodes': [{'semantic_id': 'insular_government',\n    'category': 'political_entity',\n    'attributes': {'name': 'Insular Government',\n     'description': 'A United States territorial government that was replaced by the Commonwealth of the Philippines.'},\n    'paragraph_idx': 0},\n   {'semantic_id': 'commonwealth_of_the_philippines',\n    'category': 'political_entity',\n    'attributes': {'name': 'Commonwealth of the Philippines',\n     'years_active': '1935 to 1946',\n     'description': 'The administrative body that governed the Philippines during this period, except for a period of exile from 1942 to 1945 when Japan occupied the country.'},\n    'paragraph_idx': 0},\n   {'semantic_id': 'tydings_mcduffie_act',\n    'category': 'legal_document',\n    'attributes': {'name': 'Tydings–McDuffie Act',\n     'description': \"The act that established the Commonwealth of the Philippines as a transitional administration in preparation for the country's full achievement of independence.\"},\n    'paragraph_idx': 0}],\n  'edges': [{'from_node': 'insular_government',\n    'to_node': 'commonwealth_of_the_philippines',\n    'category': 'replaced'},\n   {'from_node': 'tydings_mcduffie_act',\n    'to_node': 'commonwealth_of_the_philippines',\n    'category': 'established'}]},\n {'nodes': [{'semantic_id': 'lake_oesa',\n    'category': 'natural_feature',\n    'attributes': {'name': 'Lake Oesa',\n     'elevation': 2267,\n     'elevation_unit': 'm',\n     'location': {'park': 'Yoho National Park',\n      'city': 'Field',\n      'province': 'British Columbia',\n      'country': 'Canada'}},\n    'paragraph_idx': 1}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'arafura_swamp',\n    'category': 'natural_feature',\n    'attributes': {'name': 'Arafura Swamp',\n     'type': 'inland freshwater wetland',\n     'location': {'region': 'Arnhem Land',\n      'territory': 'Northern Territory',\n      'country': 'Australia'},\n     'size': {'area': {'value': None, 'unit': 'km2'},\n      'expansion_during_wet_season': True},\n     'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia'},\n    'paragraph_idx': 2}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'arafura_swamp',\n    'category': 'natural_feature',\n    'attributes': {'name': 'Arafura Swamp',\n     'type': 'inland freshwater wetland',\n     'location': {'region': 'Arnhem Land',\n      'territory': 'Northern Territory',\n      'country': 'Australia'},\n     'size': {'area': {'value': None, 'unit': 'km2'},\n      'expansion_during_wet_season': True},\n     'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia',\n     'cultural_significance': 'of great cultural significance to the Yolngu people, in particular the Ramingining community',\n     'filming_location': 'Ten Canoes'},\n    'paragraph_idx': 2}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'wapizagonke_lake',\n    'category': 'natural_feature',\n    'attributes': {'name': 'Wapizagonke Lake',\n     'type': 'body of water',\n     'location': {'sector': 'Lac-Wapizagonke',\n      'city': 'Shawinigan',\n      'park': 'La Mauricie National Park',\n      'region': 'Mauricie',\n      'province': 'Quebec',\n      'country': 'Canada'}},\n    'paragraph_idx': 3}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'khabarovsky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Khabarovsky District',\n     'country': 'Russia',\n     'region': 'Khabarovsk Krai',\n     'area': None,\n     'area_unit': None,\n     'administrative_center': None},\n    'paragraph_idx': 4},\n   {'semantic_id': 'amursky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Amursky District',\n     'country': 'Russia',\n     'region': 'Khabarovsk Krai'},\n    'paragraph_idx': 4}],\n  'edges': [{'from_node': 'khabarovsky_district',\n    'to_node': 'amursky_district',\n    'category': 'separated_by'}]},\n {'nodes': [{'semantic_id': 'khabarovsky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Khabarovsky District',\n     'country': 'Russia',\n     'region': 'Khabarovsk Krai',\n     'area': None,\n     'area_unit': None,\n     'administrative_center': 'Khabarovsk'},\n    'paragraph_idx': 4}],\n  'edges': [{'from_node': 'khabarovsky_district',\n    'to_node': 'amursky_district',\n    'category': 'separated_by'}]},\n {'nodes': [{'semantic_id': 'silver_lake',\n    'category': 'natural_feature',\n    'attributes': {'name': 'Silver Lake',\n     'type': 'body of water',\n     'location': {'county': 'Cheshire County',\n      'state': 'New Hampshire',\n      'country': 'United States',\n      'towns': ['Harrisville', 'Nelson']},\n     'outflows': ['Minnewawa Brook', 'The Branch'],\n     'ultimate_recipient': 'Connecticut River'},\n    'paragraph_idx': 5}],\n  'edges': [{'from_node': 'silver_lake',\n    'to_node': 'minnewawa_brook',\n    'category': 'flows_via'},\n   {'from_node': 'silver_lake',\n    'to_node': 'the_branch',\n    'category': 'flows_via'},\n   {'from_node': 'minnewawa_brook',\n    'to_node': 'ashuelot_river',\n    'category': 'flows_to'},\n   {'from_node': 'the_branch',\n    'to_node': 'ashuelot_river',\n    'category': 'flows_to'},\n   {'from_node': 'ashuelot_river',\n    'to_node': 'connecticut_river',\n    'category': 'tributary_of'}]},\n {'nodes': [{'semantic_id': 'hyderabad_police_area',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Hyderabad Police area',\n     'jurisdiction_size': 'smallest'},\n    'paragraph_idx': 6},\n   {'semantic_id': 'hyderabad_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Hyderabad district',\n     'jurisdiction_size': 'second_smallest'},\n    'paragraph_idx': 6},\n   {'semantic_id': 'ghmc_area',\n    'category': 'administrative_district',\n    'attributes': {'name': 'GHMC area',\n     'jurisdiction_size': 'second_largest',\n     'alternate_name': 'Hyderabad city'},\n    'paragraph_idx': 6},\n   {'semantic_id': 'hmda_area',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area',\n     'jurisdiction_size': 'largest',\n     'type': 'urban_planning_agency',\n     'apolitical': True,\n     'covers': ['ghmc_area', 'suburbs_of_ghmc_area']},\n    'paragraph_idx': 6}],\n  'edges': [{'from_node': 'hyderabad_police_area',\n    'to_node': 'hyderabad_district',\n    'category': 'jurisdiction_size_hierarchy'},\n   {'from_node': 'hyderabad_district',\n    'to_node': 'ghmc_area',\n    'category': 'jurisdiction_size_hierarchy'},\n   {'from_node': 'ghmc_area',\n    'to_node': 'hmda_area',\n    'category': 'jurisdiction_size_hierarchy'}]},\n {'nodes': [{'semantic_id': 'hmda_area',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area',\n     'jurisdiction_size': 'largest',\n     'type': 'urban_planning_agency',\n     'apolitical': True,\n     'covers': ['ghmc_area', 'suburbs_of_ghmc_area']},\n    'paragraph_idx': 6},\n   {'semantic_id': 'ghmc_area',\n    'category': 'administrative_district',\n    'attributes': {'name': 'GHMC area',\n     'jurisdiction_size': 'second_largest',\n     'alternate_name': 'Hyderabad city'},\n    'paragraph_idx': 6},\n   {'semantic_id': 'suburbs_of_ghmc_area',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Suburbs of GHMC area',\n     'jurisdiction_size': 'medium',\n     'type': 'residential'},\n    'paragraph_idx': 6},\n   {'semantic_id': 'hmwssb',\n    'category': 'administrative_body',\n    'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage Board',\n     'type': 'water_management'},\n    'paragraph_idx': 6}],\n  'edges': [{'from_node': 'hmda_area',\n    'to_node': 'ghmc_area',\n    'category': 'jurisdiction_size_hierarchy'},\n   {'from_node': 'hmda_area',\n    'to_node': 'suburbs_of_ghmc_area',\n    'category': 'jurisdiction_size_hierarchy'},\n   {'from_node': 'hmda_area', 'to_node': 'hmwssb', 'category': 'manages'}]},\n {'nodes': [{'semantic_id': 'san_juan',\n    'category': 'city',\n    'attributes': {'name': 'San Juan',\n     'location': {'country': 'Puerto Rico', 'region': 'north-eastern coast'},\n     'borders': {'north': 'Atlantic Ocean',\n      'south': ['Caguas', 'Trujillo Alto'],\n      'east': ['Carolina'],\n      'west': ['Guaynabo']},\n     'area': {'value': 76.93, 'unit': 'square miles'}},\n    'paragraph_idx': 7}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'san_juan',\n    'category': 'city',\n    'attributes': {'name': 'San Juan',\n     'location': {'country': 'Puerto Rico', 'region': 'north-eastern coast'},\n     'borders': {'north': 'Atlantic Ocean',\n      'south': ['Caguas', 'Trujillo Alto'],\n      'east': ['Carolina'],\n      'west': ['Guaynabo']},\n     'area': {'value': 76.93, 'unit': 'square miles'},\n     'water_bodies': ['San Juan Bay', 'Condado Lagoon', 'San José Lagoon'],\n     'water_area': {'value': 29.11,\n      'unit': 'square miles',\n      'percentage': 37.83}},\n    'paragraph_idx': 7}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'landkreise_amalgamation',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Local associations of a special kind',\n     'type': 'amalgamation_of_districts',\n     'purpose': 'simplification_of_administration'},\n    'paragraph_idx': 8},\n   {'semantic_id': 'kreisfreie_stadte',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Kreisfreie Städte',\n     'type': 'district-free_city_or_town'},\n    'paragraph_idx': 8},\n   {'semantic_id': 'urban_hinterland',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Urban hinterland', 'type': 'urban_area'},\n    'paragraph_idx': 8}],\n  'edges': [{'from_node': 'landkreise_amalgamation',\n    'to_node': 'kreisfreie_stadte',\n    'category': 'comprises'},\n   {'from_node': 'landkreise_amalgamation',\n    'to_node': 'urban_hinterland',\n    'category': 'comprises'},\n   {'from_node': 'kreisfreie_stadte',\n    'to_node': 'urban_hinterland',\n    'category': 'grouping'}]},\n {'nodes': [{'semantic_id': 'urban_hinterland',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Urban hinterland', 'type': 'urban_area'},\n    'paragraph_idx': 8},\n   {'semantic_id': 'kreisfreie_stadte',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Kreisfreie Städte',\n     'type': 'district-free_city_or_town'},\n    'paragraph_idx': 8},\n   {'semantic_id': 'landkreise_amalgamation',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Local associations of a special kind',\n     'type': 'amalgamation_of_districts',\n     'purpose': 'simplification_of_administration'},\n    'paragraph_idx': 8}],\n  'edges': [{'from_node': 'kreisfreie_stadte',\n    'to_node': 'urban_hinterland',\n    'category': 'grouping'},\n   {'from_node': 'landkreise_amalgamation',\n    'to_node': 'urban_hinterland',\n    'category': 'comprises'},\n   {'from_node': 'landkreise_amalgamation',\n    'to_node': 'kreisfreie_stadte',\n    'category': 'comprises'}]},\n {'nodes': [{'semantic_id': 'norfolk_island',\n    'category': 'island',\n    'attributes': {'name': 'Norfolk Island',\n     'location': {'ocean': 'South Pacific Ocean',\n      'relative_location': 'east of Australian mainland'},\n     'coordinates': {'latitude': -29.033, 'longitude': 167.95}},\n    'paragraph_idx': 9}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'norfolk_island',\n    'category': 'island',\n    'attributes': {'name': 'Norfolk Island',\n     'location': {'ocean': 'South Pacific Ocean',\n      'relative_location': 'east of Australian mainland'},\n     'coordinates': {'latitude': -29.033, 'longitude': 167.95},\n     'area': {'value': 34.6, 'unit': 'square kilometres'},\n     'coastline': {'length': 32, 'unit': 'km'},\n     'highest_point': 'Mount Bates'},\n    'paragraph_idx': 9}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'norfolk_island',\n    'category': 'island',\n    'attributes': {'name': 'Norfolk Island',\n     'location': {'ocean': 'South Pacific Ocean',\n      'relative_location': 'east of Australian mainland'},\n     'coordinates': {'latitude': -29.033, 'longitude': 167.95},\n     'area': {'value': 34.6, 'unit': 'square kilometres'},\n     'coastline': {'length': 32, 'unit': 'km'},\n     'highest_point': 'Mount Bates'},\n    'paragraph_idx': 9},\n   {'semantic_id': 'phillip_island',\n    'category': 'island',\n    'attributes': {'name': 'Phillip Island',\n     'location': {'relation': 'second largest island of the territory'}},\n    'paragraph_idx': 9}],\n  'edges': [{'from_node': 'norfolk_island',\n    'to_node': 'phillip_island',\n    'category': 'part_of'}]},\n {'nodes': [{'semantic_id': 'phillip_island',\n    'category': 'island',\n    'attributes': {'name': 'Phillip Island',\n     'location': {'relation': 'second largest island of the territory',\n      'coordinates': {'latitude': -29.117, 'longitude': 167.95},\n      'distance_from_main_island': {'value': 7, 'unit': 'kilometres'}}},\n    'paragraph_idx': 9},\n   {'semantic_id': 'norfolk_island',\n    'category': 'island',\n    'attributes': {'name': 'Norfolk Island',\n     'location': {'ocean': 'South Pacific Ocean',\n      'relative_location': 'east of Australian mainland'},\n     'coordinates': {'latitude': -29.033, 'longitude': 167.95},\n     'area': {'value': 34.6, 'unit': 'square kilometres'},\n     'coastline': {'length': 32, 'unit': 'km'},\n     'highest_point': 'Mount Bates'},\n    'paragraph_idx': 9}],\n  'edges': [{'from_node': 'norfolk_island',\n    'to_node': 'phillip_island',\n    'category': 'part_of'}]},\n {'nodes': [{'semantic_id': 'phillip_island',\n    'category': 'island',\n    'attributes': {'name': 'Phillip Island',\n     'location': {'relation': 'second largest island of the territory',\n      'coordinates': {'latitude': -29.117, 'longitude': 167.95},\n      'distance_from_main_island': {'value': 7, 'unit': 'kilometres'}}},\n    'paragraph_idx': 9}],\n  'edges': [{'from_node': 'phillip_island',\n    'to_node': 'norfolk_island',\n    'category': 'part_of'}]},\n {'nodes': [{'semantic_id': 'perm',\n    'category': 'city',\n    'attributes': {'name': 'Perm',\n     'location': {'river': 'Kama River',\n      'region': 'Perm Krai',\n      'country': 'Russia',\n      'geography': 'European part of Russia near the Ural Mountains'},\n     'administrative_status': 'administrative centre'},\n    'paragraph_idx': 10}],\n  'edges': [{'from_node': 'perm',\n    'to_node': 'perm_krai',\n    'category': 'administrative_centre_of'},\n   {'from_node': 'perm', 'to_node': 'kama_river', 'category': 'located_on'},\n   {'from_node': 'perm', 'to_node': 'ural_mountains', 'category': 'near'},\n   {'from_node': 'perm', 'to_node': 'russia', 'category': 'located_in'},\n   {'from_node': 'perm', 'to_node': 'europe', 'category': 'located_in'}]},\n {'nodes': [{'semantic_id': 'star_stadium',\n    'category': 'stadium',\n    'attributes': {'name': 'Star (Zvezda) Stadium',\n     'former_name': 'Lenin Komsomol Stadium',\n     'location': {'city': 'Perm', 'country': 'Russia'},\n     'usage': 'football matches',\n     'home_team': 'FC Amkar Perm',\n     'capacity': 17000,\n     'opened': '1969-06-05'},\n    'paragraph_idx': 11},\n   {'semantic_id': 'perm',\n    'category': 'city',\n    'attributes': {'name': 'Perm',\n     'location': {'river': 'Kama River',\n      'region': 'Perm Krai',\n      'country': 'Russia',\n      'geography': 'European part of Russia near the Ural Mountains'},\n     'administrative_status': 'administrative centre'},\n    'paragraph_idx': 11}],\n  'edges': [{'from_node': 'star_stadium',\n    'to_node': 'perm',\n    'category': 'located_in'}]},\n {'nodes': [{'semantic_id': 'paea',\n    'category': 'municipality',\n    'attributes': {'name': 'Paea',\n     'location': {'island': 'Tahiti',\n      'subdivision': 'Windward Islands',\n      'region': 'Society Islands',\n      'country': 'French Polynesia',\n      'territory': 'France'},\n     'population': 16282},\n    'paragraph_idx': 12}],\n  'edges': [{'from_node': 'paea',\n    'to_node': 'papeete',\n    'category': 'located_in'},\n   {'from_node': 'paea', 'to_node': 'tahiti', 'category': 'located_on'},\n   {'from_node': 'paea', 'to_node': 'windward_islands', 'category': 'part_of'},\n   {'from_node': 'paea', 'to_node': 'society_islands', 'category': 'part_of'},\n   {'from_node': 'paea',\n    'to_node': 'french_polynesia',\n    'category': 'located_in'},\n   {'from_node': 'paea', 'to_node': 'france', 'category': 'administered_by'}]},\n {'nodes': [{'semantic_id': 'paea',\n    'category': 'municipality',\n    'attributes': {'name': 'Paea',\n     'location': {'island': 'Tahiti',\n      'subdivision': 'Windward Islands',\n      'region': 'Society Islands',\n      'country': 'French Polynesia',\n      'territory': 'France'},\n     'population': 13021},\n    'paragraph_idx': 12}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'potamogeton_amplifolius',\n    'category': 'plant',\n    'attributes': {'common_names': ['largeleaf pondweed',\n      'broad-leaved pondweed'],\n     'habitat': ['lakes', 'ponds', 'rivers'],\n     'water_depth': 'often in deep water',\n     'distribution': 'North America'},\n    'paragraph_idx': 13}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'biysky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Biysky District',\n     'location': {'region': 'Altai Krai',\n      'country': 'Russia',\n      'geography': 'east of the krai'},\n     'administrative_status': 'administrative and municipal district (raion)',\n     'bordering_districts': ['Zonalny',\n      'Tselinny',\n      'Soltonsky',\n      'Krasnogorsky',\n      'Sovetsky',\n      'Smolensky']},\n    'paragraph_idx': 14}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'soltonsky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Soltonsky District',\n     'location': {'region': 'Altai Krai', 'country': 'Russia'}},\n    'paragraph_idx': 14},\n   {'semantic_id': 'krasnogorsky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Krasnogorsky District',\n     'location': {'region': 'Altai Krai', 'country': 'Russia'}},\n    'paragraph_idx': 14},\n   {'semantic_id': 'sovetsky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Sovetsky District',\n     'location': {'region': 'Altai Krai', 'country': 'Russia'}},\n    'paragraph_idx': 14},\n   {'semantic_id': 'smolensky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Smolensky District',\n     'location': {'region': 'Altai Krai', 'country': 'Russia'}},\n    'paragraph_idx': 14},\n   {'semantic_id': 'biysky_district',\n    'category': 'administrative_district',\n    'attributes': {'name': 'Biysky District',\n     'location': {'region': 'Altai Krai',\n      'country': 'Russia',\n      'geography': 'east of the krai'},\n     'administrative_status': 'administrative and municipal district (raion)',\n     'bordering_districts': ['Soltonsky_district',\n      'Krasnogorsky_district',\n      'Sovetsky_district',\n      'Smolensky_district',\n      'City_of_Biysk']},\n    'paragraph_idx': 14},\n   {'semantic_id': 'city_of_biysk',\n    'category': 'city',\n    'attributes': {'name': 'Biysk',\n     'location': {'region': 'Altai Krai', 'country': 'Russia'},\n     'administrative_status': 'administrative center'},\n    'paragraph_idx': 14}],\n  'edges': [{'from_node': 'biysky_district',\n    'to_node': 'soltonsky_district',\n    'category': 'bordering'},\n   {'from_node': 'biysky_district',\n    'to_node': 'krasnogorsky_district',\n    'category': 'bordering'},\n   {'from_node': 'biysky_district',\n    'to_node': 'sovetsky_district',\n    'category': 'bordering'},\n   {'from_node': 'biysky_district',\n    'to_node': 'smolensky_district',\n    'category': 'bordering'},\n   {'from_node': 'biysky_district',\n    'to_node': 'city_of_biysk',\n    'category': 'bordering'}]},\n {'nodes': [{'semantic_id': 'contoocook_lake',\n    'category': 'lake',\n    'attributes': {'name': 'Contoocook Lake',\n     'location': {'county': 'Cheshire County',\n      'state': 'New Hampshire',\n      'country': 'United States',\n      'towns': ['Jaffrey', 'Rindge']},\n     'connection': {'to': 'pool_pond', 'type': 'forms_headwaters_of'},\n     'outflow': {'to': 'contoocook_river', 'direction': 'north'},\n     'outflow_destination': 'merrimack_river'},\n    'paragraph_idx': 15},\n   {'semantic_id': 'pool_pond',\n    'category': 'lake',\n    'attributes': {'name': 'Pool Pond',\n     'connection': {'to': 'contoocook_lake', 'type': 'forms_headwaters_of'}},\n    'paragraph_idx': 15},\n   {'semantic_id': 'contoocook_river',\n    'category': 'river',\n    'attributes': {'name': 'Contoocook River',\n     'flow_direction': 'north',\n     'outflow_destination': 'merrimack_river'},\n    'paragraph_idx': 15},\n   {'semantic_id': 'merrimack_river',\n    'category': 'river',\n    'attributes': {'name': 'Merrimack River',\n     'location': {'city': 'Penacook',\n      'state': 'New Hampshire',\n      'country': 'United States'}},\n    'paragraph_idx': 15}],\n  'edges': [{'from_node': 'contoocook_lake',\n    'to_node': 'pool_pond',\n    'category': 'forms_headwaters_of'},\n   {'from_node': 'contoocook_lake',\n    'to_node': 'contoocook_river',\n    'category': 'outflows_to'},\n   {'from_node': 'contoocook_river',\n    'to_node': 'merrimack_river',\n    'category': 'flows_into'}]},\n {'nodes': [{'semantic_id': 'contoocook_river',\n    'category': 'river',\n    'attributes': {'name': 'Contoocook River',\n     'flow_direction': 'north',\n     'outflow_destination': 'merrimack_river'},\n    'paragraph_idx': 15},\n   {'semantic_id': 'merrimack_river',\n    'category': 'river',\n    'attributes': {'name': 'Merrimack River',\n     'location': {'city': 'Penacook',\n      'state': 'New Hampshire',\n      'country': 'United States'}},\n    'paragraph_idx': 15}],\n  'edges': [{'from_node': 'contoocook_river',\n    'to_node': 'merrimack_river',\n    'category': 'flows_into'}]},\n {'nodes': [{'semantic_id': 'bogota',\n    'category': 'city',\n    'attributes': {'name': 'Bogotá',\n     'pronunciation': {'english': ['/ˈboʊɡətɑː/', '/ˌbɒɡəˈtɑː/', '/ˌboʊ-/'],\n      'spanish': 'boɣoˈta'},\n     'official_name': 'Bogotá'},\n    'paragraph_idx': 16}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'bogota',\n    'category': 'city',\n    'attributes': {'name': 'Bogotá',\n     'pronunciation': {'english': ['/ˈboʊɡəˌtɑː/', '/ˌboʊɡəˈtɑː/', '/ˌboɪ-/'],\n      'spanish': 'boɣoˈta'},\n     'official_name': 'Bogotá',\n     'administration': 'Capital District'},\n    'paragraph_idx': 16}],\n  'edges': []},\n {'nodes': [{'semantic_id': 'bogota',\n    'category': 'city',\n    'attributes': {'name': 'Bogotá',\n     'pronunciation': {'english': ['/ˈboʊɡəˌtɑː/', '/ˌboʊ-/', '/ˈbɔɪ-/'],\n      'spanish': 'boˈɣota'},\n     'official_name': 'Bogotá',\n     'administration': 'Capital District'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'colombia',\n    'category': 'country',\n    'attributes': {'name': 'Colombia',\n     'capital': 'Bogotá',\n     'status': 'capital and largest city'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'cundinamarca',\n    'category': 'region',\n    'attributes': {'name': 'Cundinamarca',\n     'relation_to_bogota': 'often thought of as part of'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'political_center',\n    'category': 'function',\n    'attributes': {'name': 'political center', 'location': 'Bogotá'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'economic_center',\n    'category': 'function',\n    'attributes': {'name': 'economic center', 'location': 'Bogotá'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'administrative_center',\n    'category': 'function',\n    'attributes': {'name': 'administrative center', 'location': 'Bogotá'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'industrial_center',\n    'category': 'function',\n    'attributes': {'name': 'industrial center', 'location': 'Bogotá'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'artistic_center',\n    'category': 'function',\n    'attributes': {'name': 'artistic center', 'location': 'Bogotá'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'cultural_center',\n    'category': 'function',\n    'attributes': {'name': 'cultural center', 'location': 'Bogotá'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'sports_center',\n    'category': 'function',\n    'attributes': {'name': 'sports center', 'location': 'Bogotá'},\n    'paragraph_idx': 16}],\n  'edges': [{'from_node': 'bogota',\n    'to_node': 'colombia',\n    'category': 'capital_of'},\n   {'from_node': 'bogota', 'to_node': 'cundinamarca', 'category': 'part_of'},\n   {'from_node': 'bogota',\n    'to_node': 'political_center',\n    'category': 'functions_as'},\n   {'from_node': 'bogota',\n    'to_node': 'economic_center',\n    'category': 'functions_as'},\n   {'from_node': 'bogota',\n    'to_node': 'administrative_center',\n    'category': 'functions_as'},\n   {'from_node': 'bogota',\n    'to_node': 'industrial_center',\n    'category': 'functions_as'},\n   {'from_node': 'bogota',\n    'to_node': 'artistic_center',\n    'category': 'functions_as'},\n   {'from_node': 'bogota',\n    'to_node': 'cultural_center',\n    'category': 'functions_as'},\n   {'from_node': 'bogota',\n    'to_node': 'sports_center',\n    'category': 'functions_as'}]},\n {'nodes': [{'semantic_id': 'bogota',\n    'category': 'city',\n    'attributes': {'name': 'Bogotá',\n     'functions': ['political center',\n      'economic center',\n      'administrative center',\n      'industrial center',\n      'artistic center',\n      'cultural center',\n      'sports center']},\n    'paragraph_idx': 16},\n   {'semantic_id': 'colombia',\n    'category': 'country',\n    'attributes': {'name': 'Colombia',\n     'capital': 'Bogotá',\n     'status': 'capital and largest city'},\n    'paragraph_idx': 16},\n   {'semantic_id': 'cundinamarca',\n    'category': 'region',\n    'attributes': {'name': 'Cundinamarca',\n     'relation_to_bogota': 'often thought of as part of'},\n    'paragraph_idx': 16}],\n  'edges': [{'from_node': 'bogota',\n    'to_node': 'colombia',\n    'category': 'capital_of'},\n   {'from_node': 'bogota', 'to_node': 'cundinamarca', 'category': 'part_of'}]},\n {'nodes': [{'semantic_id': 'intracellular_fluid',\n    'category': 'fluid',\n    'attributes': {'name': 'intracellular fluid',\n     'volume': '2/3 of body water',\n     'amount_in_72_kg_body': '25 litres',\n     'percentage_of_total_body_fluid': 62.5},\n    'paragraph_idx': 17},\n   {'semantic_id': 'body_fluid',\n    'category': 'fluid',\n    'attributes': {'name': 'body fluid',\n     'total_volume_in_72_kg_body': '40 litres'},\n    'paragraph_idx': 17}],\n  'edges': [{'from_node': 'intracellular_fluid',\n    'to_node': 'body_fluid',\n    'category': 'part_of'}]},\n {'nodes': [{'semantic_id': 'territorial_waters',\n    'category': 'geographic_area',\n    'attributes': {'name': 'territorial waters',\n     'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state',\n     'source': '1982 United Nations Convention on the Law of the Sea'},\n    'paragraph_idx': 18},\n   {'semantic_id': 'baseline',\n    'category': 'geographic_feature',\n    'attributes': {'name': 'baseline',\n     'definition': 'usually the mean low-water mark of a coastal state'},\n    'paragraph_idx': 18},\n   {'semantic_id': 'coastal_state',\n    'category': 'legal_entity',\n    'attributes': {'name': 'coastal state'},\n    'paragraph_idx': 18}],\n  'edges': [{'from_node': 'territorial_waters',\n    'to_node': 'baseline',\n    'category': 'extends_from'},\n   {'from_node': 'territorial_waters',\n    'to_node': 'coastal_state',\n    'category': 'belongs_to'}]},\n {'nodes': [{'semantic_id': 'territorial_sea',\n    'category': 'geographic_area',\n    'attributes': {'name': 'territorial sea',\n     'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state',\n     'sovereign_territory': True,\n     'foreign_ship_passage': 'innocent passage through it or transit passage for straits',\n     'jurisdiction': 'extends to airspace over and seabed below'},\n    'paragraph_idx': 18},\n   {'semantic_id': 'baseline',\n    'category': 'geographic_feature',\n    'attributes': {'name': 'baseline',\n     'definition': 'usually the mean low-water mark of a coastal state'},\n    'paragraph_idx': 18},\n   {'semantic_id': 'coastal_state',\n    'category': 'legal_entity',\n    'attributes': {'name': 'coastal state'},\n    'paragraph_idx': 18}],\n  'edges': [{'from_node': 'territorial_sea',\n    'to_node': 'coastal_state',\n    'category': 'belongs_to'},\n   {'from_node': 'territorial_sea',\n    'to_node': 'baseline',\n    'category': 'extends_from'}]},\n {'nodes': [{'semantic_id': 'strait',\n    'category': 'geographic_feature',\n    'attributes': {'name': 'strait',\n     'sovereign_territory': True,\n     'jurisdiction': {'airspace': True, 'seabed': True}},\n    'paragraph_idx': 18},\n   {'semantic_id': 'maritime_delimitation',\n    'category': 'legal_concept',\n    'attributes': {'name': 'maritime delimitation',\n     'definition': \"Adjustment of the boundaries of a coastal state's territorial sea, exclusive economic zone, or continental shelf\"},\n    'paragraph_idx': 18}],\n  'edges': [{'from_node': 'strait',\n    'to_node': 'coastal_state',\n    'category': 'belongs_to'},\n   {'from_node': 'strait', 'to_node': 'airspace', 'category': 'extends_to'},\n   {'from_node': 'strait', 'to_node': 'seabed', 'category': 'extends_to'},\n   {'from_node': 'maritime_delimitation',\n    'to_node': 'coastal_state',\n    'category': 'involves'}]},\n {'nodes': [{'semantic_id': 'cyprus_popular_bank',\n    'category': 'organization',\n    'attributes': {'name': 'Cyprus Popular Bank',\n     'previous_name': 'Marfin Popular Bank',\n     'status': 'shuttered in 2013',\n     'size': 'second largest banking group in Cyprus',\n     'parent': 'Bank of Cyprus'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'bank_of_cyprus',\n    'category': 'organization',\n    'attributes': {'name': 'Bank of Cyprus',\n     'size': 'largest banking group in Cyprus',\n     'relation_to_cyprus_popular_bank': \"absorbed the 'good' Cypriot part of Cyprus Popular Bank after it was shuttered\"},\n    'paragraph_idx': 19}],\n  'edges': [{'from_node': 'cyprus_popular_bank',\n    'to_node': 'bank_of_cyprus',\n    'category': 'merged_with'}]},\n {'nodes': [{'semantic_id': 'cyprus_popular_bank',\n    'category': 'organization',\n    'attributes': {'name': 'Cyprus Popular Bank',\n     'previous_name': 'Marfin Popular Bank',\n     'status': 'shuttered in 2013',\n     'size': 'second largest banking group in Cyprus',\n     'parent': 'Bank of Cyprus'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'bank_of_cyprus',\n    'category': 'organization',\n    'attributes': {'name': 'Bank of Cyprus',\n     'size': 'largest banking group in Cyprus',\n     'relation_to_cyprus_popular_bank': \"absorbed the 'good' Cypriot part of Cyprus Popular Bank after it was shuttered\"},\n    'paragraph_idx': 19},\n   {'semantic_id': 'uninsured_depositor',\n    'category': 'stakeholder',\n    'attributes': {'deposit_amount': '&gt;100,000 Euro',\n     'treatment': 'subject to a bail-in'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'legacy_entity',\n    'category': 'organization',\n    'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\"},\n    'paragraph_idx': 19}],\n  'edges': [{'from_node': 'cyprus_popular_bank',\n    'to_node': 'bank_of_cyprus',\n    'category': 'merged_with'},\n   {'from_node': 'uninsured_depositor',\n    'to_node': 'legacy_entity',\n    'category': 'holds_deposits'}]},\n {'nodes': [{'semantic_id': 'uninsured_depositor',\n    'category': 'stakeholder',\n    'attributes': {'deposit_amount': '&gt;100,000 Euro',\n     'treatment': 'subject to a bail-in',\n     'new_role': 'new shareholders of the legacy entity'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'legacy_entity',\n    'category': 'organization',\n    'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\",\n     'ownership_stake': '4.8% of Bank of Cyprus',\n     'board_representation': 'does not hold a board seat'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'bank_of_cyprus',\n    'category': 'organization',\n    'attributes': {'name': 'Bank of Cyprus',\n     'size': 'largest banking group in Cyprus',\n     'relation_to_cyprus_popular_bank': \"absorbed the 'good' Cypriot part of Cyprus Popular Bank after it was shuttered\"},\n    'paragraph_idx': 19},\n   {'semantic_id': 'cyprus_popular_bank',\n    'category': 'organization',\n    'attributes': {'name': 'Cyprus Popular Bank',\n     'previous_name': 'Marfin Popular Bank',\n     'status': 'shuttered in 2013',\n     'size': 'second largest banking group in Cyprus',\n     'parent': 'Bank of Cyprus'},\n    'paragraph_idx': 19}],\n  'edges': [{'from_node': 'uninsured_depositor',\n    'to_node': 'legacy_entity',\n    'category': 'holds_deposits'},\n   {'from_node': 'cyprus_popular_bank',\n    'to_node': 'bank_of_cyprus',\n    'category': 'merged_with'}]},\n {'nodes': [{'semantic_id': 'legacy_entity',\n    'category': 'organization',\n    'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\",\n     'ownership_stake': '4.8% of Bank of Cyprus',\n     'board_representation': 'does not hold a board seat',\n     'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'special_administrator',\n    'category': 'stakeholder',\n    'attributes': {'name': 'Andri Antoniadou',\n     'role': 'ran the legacy entity for two years, from March 2013 until 3 March 2015'},\n    'paragraph_idx': 19}],\n  'edges': [{'from_node': 'legacy_entity',\n    'to_node': 'special_administrator',\n    'category': 'managed_by'}]},\n {'nodes': [{'semantic_id': 'legacy_entity',\n    'category': 'organization',\n    'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\",\n     'ownership_stake': '4.8% of Bank of Cyprus',\n     'board_representation': 'does not hold a board seat',\n     'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'special_administrator',\n    'category': 'stakeholder',\n    'attributes': {'name': 'Andri Antoniadou',\n     'role': 'ran the legacy entity for two years, from March 2013 until 3 March 2015'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'veteran_banker',\n    'category': 'stakeholder',\n    'attributes': {'name': 'Chris Pavlou', 'expertise': 'Treasury'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'central_bank_of_cyprus',\n    'category': 'organization',\n    'attributes': {'name': 'Central Bank of Cyprus',\n     'role': 'Governor and Board members amended the lawyers of the legacy entity without consulting the special administrator'},\n    'paragraph_idx': 19}],\n  'edges': [{'from_node': 'legacy_entity',\n    'to_node': 'special_administrator',\n    'category': 'managed_by'},\n   {'from_node': 'central_bank_of_cyprus',\n    'to_node': 'legacy_entity',\n    'category': 'amended_lawyers_without_consulting'}]},\n {'nodes': [{'semantic_id': 'central_bank_of_cyprus',\n    'category': 'organization',\n    'attributes': {'name': 'Central Bank of Cyprus',\n     'role': 'Governor and Board members amended the lawyers of the legacy entity without consulting the special administrator'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'veteran_banker',\n    'category': 'stakeholder',\n    'attributes': {'name': 'Chris Pavlou', 'expertise': 'Treasury'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'special_administrator',\n    'category': 'stakeholder',\n    'attributes': {'name': 'Andri Antoniadou',\n     'role': 'ran the legacy entity for two years, from March 2013 until 3 March 2015'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'legacy_entity',\n    'category': 'organization',\n    'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\",\n     'ownership_stake': '4.8% of Bank of Cyprus',\n     'board_representation': 'does not hold a board seat',\n     'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'},\n    'paragraph_idx': 19},\n   {'semantic_id': 'marfin_investment_group',\n    'category': 'stakeholder',\n    'attributes': {'name': 'Marfin Investment Group',\n     'role': 'former major shareholder of the legacy entity'},\n    'paragraph_idx': 19}],\n  'edges': [{'from_node': 'central_bank_of_cyprus',\n    'to_node': 'legacy_entity',\n    'category': 'amended_lawyers_without_consulting'},\n   {'from_node': 'legacy_entity',\n    'to_node': 'special_administrator',\n    'category': 'managed_by'},\n   {'from_node': 'veteran_banker',\n    'to_node': 'legacy_entity',\n    'category': 'took_over_as_special_administrator'},\n   {'from_node': 'legacy_entity',\n    'to_node': 'marfin_investment_group',\n    'category': 'pursuing_legal_action_against'}]}]\n\n\n\ngraph_history.history\n\nOrderedDict([(UUID('acc73dc0-d5ae-499e-8cc4-63f70f2d935f'),\n              {'nodes': {'semantic_id': 'insular_government',\n                'category': 'political_entity',\n                'attributes': {'name': 'Insular Government',\n                 'description': 'A United States territorial government that was replaced by the Commonwealth of the Philippines.'}}}),\n             (UUID('38d26bc0-e096-4524-945a-77b9e4ae0f49'),\n              {'nodes': {'semantic_id': 'commonwealth_of_the_philippines',\n                'category': 'political_entity',\n                'attributes': {'name': 'Commonwealth of the Philippines',\n                 'years_active': '1935 to 1946',\n                 'description': 'The administrative body that governed the Philippines during this period, except for a period of exile from 1942 to 1945 when Japan occupied the country.'}}}),\n             (UUID('9555e806-1679-4bc0-99d7-55717f21bdef'),\n              {'nodes': {'semantic_id': 'tydings_mcduffie_act',\n                'category': 'legal_document',\n                'attributes': {'name': 'Tydings–McDuffie Act',\n                 'description': \"The act that established the Commonwealth of the Philippines as a transitional administration in preparation for the country's full achievement of independence.\"}}}),\n             (UUID('90d9b404-119e-4b31-a0cf-ad102105687f'),\n              {'edges': {'from_node': UUID('acc73dc0-d5ae-499e-8cc4-63f70f2d935f'),\n                'to_node': UUID('38d26bc0-e096-4524-945a-77b9e4ae0f49'),\n                'category': 'replaced'}}),\n             (UUID('2cdca930-c9f5-4d65-8da0-4fcc351ac2d0'),\n              {'edges': {'from_node': UUID('9555e806-1679-4bc0-99d7-55717f21bdef'),\n                'to_node': UUID('38d26bc0-e096-4524-945a-77b9e4ae0f49'),\n                'category': 'established'}}),\n             (UUID('c7120f30-4152-4e88-bec1-698bfdd2d5e1'),\n              {'nodes': {'semantic_id': 'lake_oesa',\n                'category': 'natural_feature',\n                'attributes': {'name': 'Lake Oesa',\n                 'elevation': 2267,\n                 'elevation_unit': 'm',\n                 'location': {'park': 'Yoho National Park',\n                  'city': 'Field',\n                  'province': 'British Columbia',\n                  'country': 'Canada'}}}}),\n             (UUID('7c83cf46-05fc-491d-9667-20acf68fe70f'),\n              {'nodes': {'semantic_id': 'arafura_swamp',\n                'category': 'natural_feature',\n                'attributes': {'name': 'Arafura Swamp',\n                 'type': 'inland freshwater wetland',\n                 'location': {'region': 'Arnhem Land',\n                  'territory': 'Northern Territory',\n                  'country': 'Australia'},\n                 'size': {'area': {'value': None, 'unit': 'km2'},\n                  'expansion_during_wet_season': True},\n                 'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia',\n                 'cultural_significance': 'of great cultural significance to the Yolngu people, in particular the Ramingining community',\n                 'filming_location': 'Ten Canoes'}}}),\n             (UUID('f39070c7-1d59-4d1b-a4a4-c8a18c222f85'),\n              {'nodes': {'semantic_id': 'wapizagonke_lake',\n                'category': 'natural_feature',\n                'attributes': {'name': 'Wapizagonke Lake',\n                 'type': 'body of water',\n                 'location': {'sector': 'Lac-Wapizagonke',\n                  'city': 'Shawinigan',\n                  'park': 'La Mauricie National Park',\n                  'region': 'Mauricie',\n                  'province': 'Quebec',\n                  'country': 'Canada'}}}}),\n             (UUID('9a8a31e6-d311-4085-845d-48ae33707b51'),\n              {'nodes': {'semantic_id': 'amursky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Amursky District',\n                 'country': 'Russia',\n                 'region': 'Khabarovsk Krai'}}}),\n             (UUID('f85fb9ae-7e0f-46b2-b039-63ee01e6ce5d'),\n              {'nodes': {'semantic_id': 'khabarovsky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Khabarovsky District',\n                 'country': 'Russia',\n                 'region': 'Khabarovsk Krai',\n                 'area': None,\n                 'area_unit': None,\n                 'administrative_center': 'Khabarovsk'}}}),\n             (UUID('21425234-233f-4f40-b6b3-98e818755151'),\n              {'edges': {'from_node': UUID('f85fb9ae-7e0f-46b2-b039-63ee01e6ce5d'),\n                'to_node': UUID('9a8a31e6-d311-4085-845d-48ae33707b51'),\n                'category': 'separated_by'}}),\n             (UUID('43464202-f216-469b-94d2-8ca7ad3d92f1'),\n              {'nodes': {'semantic_id': 'silver_lake',\n                'category': 'natural_feature',\n                'attributes': {'name': 'Silver Lake',\n                 'type': 'body of water',\n                 'location': {'county': 'Cheshire County',\n                  'state': 'New Hampshire',\n                  'country': 'United States',\n                  'towns': ['Harrisville', 'Nelson']},\n                 'outflows': ['Minnewawa Brook', 'The Branch'],\n                 'ultimate_recipient': 'Connecticut River'}}}),\n             (UUID('f938374c-ec1e-49b0-b049-91257d6ae64d'),\n              {'nodes': {'semantic_id': 'hyderabad_police_area',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Hyderabad Police area',\n                 'jurisdiction_size': 'smallest'}}}),\n             (UUID('595a2f04-abae-4845-b45c-6df6a8ed9ab5'),\n              {'nodes': {'semantic_id': 'hyderabad_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Hyderabad district',\n                 'jurisdiction_size': 'second_smallest'}}}),\n             (UUID('b3beb831-6954-4ca9-87f3-052767e60856'),\n              {'edges': {'from_node': UUID('f938374c-ec1e-49b0-b049-91257d6ae64d'),\n                'to_node': UUID('595a2f04-abae-4845-b45c-6df6a8ed9ab5'),\n                'category': 'jurisdiction_size_hierarchy'}}),\n             (UUID('252323ba-7590-4b55-ae43-e6b9da12ff9e'),\n              {'edges': {'from_node': UUID('595a2f04-abae-4845-b45c-6df6a8ed9ab5'),\n                'to_node': UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),\n                'category': 'jurisdiction_size_hierarchy'}}),\n             (UUID('723c0ccc-8f09-43ad-bbcf-97b08d5c1bd8'),\n              {'edges': {'from_node': UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),\n                'to_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),\n                'category': 'jurisdiction_size_hierarchy'}}),\n             (UUID('4c681f75-6f72-4771-831a-4aa16149195a'),\n              {'nodes': {'semantic_id': 'hmda_area',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area',\n                 'jurisdiction_size': 'largest',\n                 'type': 'urban_planning_agency',\n                 'apolitical': True,\n                 'covers': ['ghmc_area', 'suburbs_of_ghmc_area']}}}),\n             (UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),\n              {'nodes': {'semantic_id': 'ghmc_area',\n                'category': 'administrative_district',\n                'attributes': {'name': 'GHMC area',\n                 'jurisdiction_size': 'second_largest',\n                 'alternate_name': 'Hyderabad city'}}}),\n             (UUID('90c5ce53-79aa-4aaf-a27d-7400e6ac1c08'),\n              {'nodes': {'semantic_id': 'suburbs_of_ghmc_area',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Suburbs of GHMC area',\n                 'jurisdiction_size': 'medium',\n                 'type': 'residential'}}}),\n             (UUID('9a4b69f8-749a-4b7c-a3e3-e2db4f3823d1'),\n              {'nodes': {'semantic_id': 'hmwssb',\n                'category': 'administrative_body',\n                'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage Board',\n                 'type': 'water_management'}}}),\n             (UUID('c48817dd-b382-4db9-ad18-d3e2190cdcf5'),\n              {'edges': {'from_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),\n                'to_node': UUID('631d3937-3f47-4598-8f45-bdb90d5eb91f'),\n                'category': 'jurisdiction_size_hierarchy'}}),\n             (UUID('4b64fe19-941d-44ce-8cd0-8f94f503dea5'),\n              {'edges': {'from_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),\n                'to_node': UUID('90c5ce53-79aa-4aaf-a27d-7400e6ac1c08'),\n                'category': 'jurisdiction_size_hierarchy'}}),\n             (UUID('268f7e8f-a2c7-4a83-94b9-24baeca1be73'),\n              {'edges': {'from_node': UUID('4c681f75-6f72-4771-831a-4aa16149195a'),\n                'to_node': UUID('9a4b69f8-749a-4b7c-a3e3-e2db4f3823d1'),\n                'category': 'manages'}}),\n             (UUID('7956f84b-20a8-4836-ae7a-c7311d716cd1'),\n              {'nodes': {'semantic_id': 'san_juan',\n                'category': 'city',\n                'attributes': {'name': 'San Juan',\n                 'location': {'country': 'Puerto Rico',\n                  'region': 'north-eastern coast'},\n                 'borders': {'north': 'Atlantic Ocean',\n                  'south': ['Caguas', 'Trujillo Alto'],\n                  'east': ['Carolina'],\n                  'west': ['Guaynabo']},\n                 'area': {'value': 76.93, 'unit': 'square miles'},\n                 'water_bodies': ['San Juan Bay',\n                  'Condado Lagoon',\n                  'San José Lagoon'],\n                 'water_area': {'value': 29.11,\n                  'unit': 'square miles',\n                  'percentage': 37.83}}}}),\n             (UUID('75abfc38-a7ea-4db7-9c2b-5dddaf51c493'),\n              {'nodes': {'semantic_id': 'urban_hinterland',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Urban hinterland',\n                 'type': 'urban_area'}}}),\n             (UUID('6f12633f-2502-4467-a29c-ebe5b0699810'),\n              {'nodes': {'semantic_id': 'kreisfreie_stadte',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Kreisfreie Städte',\n                 'type': 'district-free_city_or_town'}}}),\n             (UUID('e7748608-55fe-4ad2-b17a-83af70f4fc73'),\n              {'nodes': {'semantic_id': 'landkreise_amalgamation',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Local associations of a special kind',\n                 'type': 'amalgamation_of_districts',\n                 'purpose': 'simplification_of_administration'}}}),\n             (UUID('0114478c-292d-43e4-940c-349f0b8d8060'),\n              {'edges': {'from_node': UUID('6f12633f-2502-4467-a29c-ebe5b0699810'),\n                'to_node': UUID('75abfc38-a7ea-4db7-9c2b-5dddaf51c493'),\n                'category': 'grouping'}}),\n             (UUID('9c504b5a-98b9-4620-9d56-0c18fe35005f'),\n              {'edges': {'from_node': UUID('e7748608-55fe-4ad2-b17a-83af70f4fc73'),\n                'to_node': UUID('75abfc38-a7ea-4db7-9c2b-5dddaf51c493'),\n                'category': 'comprises'}}),\n             (UUID('6b27c2fc-9694-4f6e-b61c-425360f1c8f7'),\n              {'edges': {'from_node': UUID('e7748608-55fe-4ad2-b17a-83af70f4fc73'),\n                'to_node': UUID('6f12633f-2502-4467-a29c-ebe5b0699810'),\n                'category': 'comprises'}}),\n             (UUID('7715b916-5807-45f4-8408-2770897a7581'),\n              {'nodes': {'semantic_id': 'norfolk_island',\n                'category': 'island',\n                'attributes': {'name': 'Norfolk Island',\n                 'location': {'ocean': 'South Pacific Ocean',\n                  'relative_location': 'east of Australian mainland'},\n                 'coordinates': {'latitude': -29.033, 'longitude': 167.95},\n                 'area': {'value': 34.6, 'unit': 'square kilometres'},\n                 'coastline': {'length': 32, 'unit': 'km'},\n                 'highest_point': 'Mount Bates'}}}),\n             (UUID('0db9008a-ae7e-4e32-a7b3-ae5c7d8f93d2'),\n              {'edges': {'from_node': UUID('7715b916-5807-45f4-8408-2770897a7581'),\n                'to_node': UUID('48a3d3e7-34c1-4a64-93ba-72a6108b3e57'),\n                'category': 'part_of'}}),\n             (UUID('48a3d3e7-34c1-4a64-93ba-72a6108b3e57'),\n              {'nodes': {'semantic_id': 'phillip_island',\n                'category': 'island',\n                'attributes': {'name': 'Phillip Island',\n                 'location': {'relation': 'second largest island of the territory',\n                  'coordinates': {'latitude': -29.117, 'longitude': 167.95},\n                  'distance_from_main_island': {'value': 7,\n                   'unit': 'kilometres'}}}}}),\n             (UUID('52ec31ee-9fc6-42a1-9e6c-daf0ea0a9390'),\n              {'edges': {'from_node': UUID('48a3d3e7-34c1-4a64-93ba-72a6108b3e57'),\n                'to_node': UUID('7715b916-5807-45f4-8408-2770897a7581'),\n                'category': 'part_of'}}),\n             (UUID('08f207c1-6915-4237-ac4e-902815d9cfae'),\n              {'nodes': {'semantic_id': 'star_stadium',\n                'category': 'stadium',\n                'attributes': {'name': 'Star (Zvezda) Stadium',\n                 'former_name': 'Lenin Komsomol Stadium',\n                 'location': {'city': 'Perm', 'country': 'Russia'},\n                 'usage': 'football matches',\n                 'home_team': 'FC Amkar Perm',\n                 'capacity': 17000,\n                 'opened': '1969-06-05'}}}),\n             (UUID('5be79bf7-cd2a-487f-8833-36ae11257df8'),\n              {'nodes': {'semantic_id': 'perm',\n                'category': 'city',\n                'attributes': {'name': 'Perm',\n                 'location': {'river': 'Kama River',\n                  'region': 'Perm Krai',\n                  'country': 'Russia',\n                  'geography': 'European part of Russia near the Ural Mountains'},\n                 'administrative_status': 'administrative centre'}}}),\n             (UUID('e9a848ba-35b3-42e4-b9e6-aa0ea8651d92'),\n              {'edges': {'from_node': UUID('08f207c1-6915-4237-ac4e-902815d9cfae'),\n                'to_node': UUID('5be79bf7-cd2a-487f-8833-36ae11257df8'),\n                'category': 'located_in'}}),\n             (UUID('57c8adca-9dcc-4257-be85-bfb48eacd310'),\n              {'nodes': {'semantic_id': 'paea',\n                'category': 'municipality',\n                'attributes': {'name': 'Paea',\n                 'location': {'island': 'Tahiti',\n                  'subdivision': 'Windward Islands',\n                  'region': 'Society Islands',\n                  'country': 'French Polynesia',\n                  'territory': 'France'},\n                 'population': 13021}}}),\n             (UUID('62866902-6285-4c38-98b0-7496dbe73fd3'),\n              {'nodes': {'semantic_id': 'potamogeton_amplifolius',\n                'category': 'plant',\n                'attributes': {'common_names': ['largeleaf pondweed',\n                  'broad-leaved pondweed'],\n                 'habitat': ['lakes', 'ponds', 'rivers'],\n                 'water_depth': 'often in deep water',\n                 'distribution': 'North America'}}}),\n             (UUID('0da6e66c-64c6-4155-bb6f-88e1b0c9a349'),\n              {'nodes': {'semantic_id': 'soltonsky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Soltonsky District',\n                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),\n             (UUID('2bdd9668-a653-4815-bcde-f43dcf5ff4a5'),\n              {'nodes': {'semantic_id': 'krasnogorsky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Krasnogorsky District',\n                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),\n             (UUID('e9620276-009f-4f5a-99b6-b41d93fbe791'),\n              {'nodes': {'semantic_id': 'sovetsky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Sovetsky District',\n                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),\n             (UUID('4bdbb329-0688-4621-9c67-e1af0e8d57fe'),\n              {'nodes': {'semantic_id': 'smolensky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Smolensky District',\n                 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}),\n             (UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),\n              {'nodes': {'semantic_id': 'biysky_district',\n                'category': 'administrative_district',\n                'attributes': {'name': 'Biysky District',\n                 'location': {'region': 'Altai Krai',\n                  'country': 'Russia',\n                  'geography': 'east of the krai'},\n                 'administrative_status': 'administrative and municipal district (raion)',\n                 'bordering_districts': ['Soltonsky_district',\n                  'Krasnogorsky_district',\n                  'Sovetsky_district',\n                  'Smolensky_district',\n                  'City_of_Biysk']}}}),\n             (UUID('a375ae9a-9282-4916-9e6b-02da8a824e3f'),\n              {'nodes': {'semantic_id': 'city_of_biysk',\n                'category': 'city',\n                'attributes': {'name': 'Biysk',\n                 'location': {'region': 'Altai Krai', 'country': 'Russia'},\n                 'administrative_status': 'administrative center'}}}),\n             (UUID('6674891e-b1e6-4c85-9821-54b4a7fd923a'),\n              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),\n                'to_node': UUID('0da6e66c-64c6-4155-bb6f-88e1b0c9a349'),\n                'category': 'bordering'}}),\n             (UUID('5f81b958-60c6-40a5-8bea-9fdacae9f671'),\n              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),\n                'to_node': UUID('2bdd9668-a653-4815-bcde-f43dcf5ff4a5'),\n                'category': 'bordering'}}),\n             (UUID('8077d42e-5e70-44dd-aade-c764087f139f'),\n              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),\n                'to_node': UUID('e9620276-009f-4f5a-99b6-b41d93fbe791'),\n                'category': 'bordering'}}),\n             (UUID('abe4eb3e-0a01-48f2-b97d-67a30519a4d3'),\n              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),\n                'to_node': UUID('4bdbb329-0688-4621-9c67-e1af0e8d57fe'),\n                'category': 'bordering'}}),\n             (UUID('a27a6ceb-536d-4dbe-9798-e5d86e9755c6'),\n              {'edges': {'from_node': UUID('d3fca76e-6cb9-47b7-8fdf-282cd0de4bee'),\n                'to_node': UUID('a375ae9a-9282-4916-9e6b-02da8a824e3f'),\n                'category': 'bordering'}}),\n             (UUID('3d2af122-d4b9-47f1-a034-c9f23e262e14'),\n              {'nodes': {'semantic_id': 'contoocook_lake',\n                'category': 'lake',\n                'attributes': {'name': 'Contoocook Lake',\n                 'location': {'county': 'Cheshire County',\n                  'state': 'New Hampshire',\n                  'country': 'United States',\n                  'towns': ['Jaffrey', 'Rindge']},\n                 'connection': {'to': 'pool_pond',\n                  'type': 'forms_headwaters_of'},\n                 'outflow': {'to': 'contoocook_river', 'direction': 'north'},\n                 'outflow_destination': 'merrimack_river'}}}),\n             (UUID('1eafa7a8-a830-4472-8b32-c071159c8140'),\n              {'nodes': {'semantic_id': 'pool_pond',\n                'category': 'lake',\n                'attributes': {'name': 'Pool Pond',\n                 'connection': {'to': 'contoocook_lake',\n                  'type': 'forms_headwaters_of'}}}}),\n             (UUID('f841df5f-a4ff-4a6b-8656-1458252aca37'),\n              {'edges': {'from_node': UUID('3d2af122-d4b9-47f1-a034-c9f23e262e14'),\n                'to_node': UUID('1eafa7a8-a830-4472-8b32-c071159c8140'),\n                'category': 'forms_headwaters_of'}}),\n             (UUID('d50d66d9-c89d-4c0a-9c61-fa4e856ab2c2'),\n              {'edges': {'from_node': UUID('3d2af122-d4b9-47f1-a034-c9f23e262e14'),\n                'to_node': UUID('56ae1a37-74f4-486b-b517-34b99027ba36'),\n                'category': 'outflows_to'}}),\n             (UUID('56ae1a37-74f4-486b-b517-34b99027ba36'),\n              {'nodes': {'semantic_id': 'contoocook_river',\n                'category': 'river',\n                'attributes': {'name': 'Contoocook River',\n                 'flow_direction': 'north',\n                 'outflow_destination': 'merrimack_river'}}}),\n             (UUID('0c92123d-fbc3-47e7-b752-65df1d6680c0'),\n              {'nodes': {'semantic_id': 'merrimack_river',\n                'category': 'river',\n                'attributes': {'name': 'Merrimack River',\n                 'location': {'city': 'Penacook',\n                  'state': 'New Hampshire',\n                  'country': 'United States'}}}}),\n             (UUID('6e9b6a2d-926e-4b20-97ab-d8bb217a5029'),\n              {'edges': {'from_node': UUID('56ae1a37-74f4-486b-b517-34b99027ba36'),\n                'to_node': UUID('0c92123d-fbc3-47e7-b752-65df1d6680c0'),\n                'category': 'flows_into'}}),\n             (UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n              {'nodes': {'semantic_id': 'bogota',\n                'category': 'city',\n                'attributes': {'name': 'Bogotá',\n                 'pronunciation': {'english': ['/ˈboʊɡəˌtɑː/',\n                   '/ˌboʊ-/',\n                   '/ˈbɔɪ-/'],\n                  'spanish': 'boˈɣota'},\n                 'official_name': 'Bogotá',\n                 'administration': 'Capital District'}}}),\n             (UUID('adc293cf-401b-49b6-928d-ada04da0e4bf'),\n              {'nodes': {'semantic_id': 'political_center',\n                'category': 'function',\n                'attributes': {'name': 'political center',\n                 'location': 'Bogotá'}}}),\n             (UUID('108added-3b0f-4b67-9e28-fce89a168e46'),\n              {'nodes': {'semantic_id': 'economic_center',\n                'category': 'function',\n                'attributes': {'name': 'economic center',\n                 'location': 'Bogotá'}}}),\n             (UUID('7fad3f22-d955-4f54-a1e2-5683bf4639e8'),\n              {'nodes': {'semantic_id': 'administrative_center',\n                'category': 'function',\n                'attributes': {'name': 'administrative center',\n                 'location': 'Bogotá'}}}),\n             (UUID('404e8a42-e9e9-4081-9890-669ba48d1b36'),\n              {'nodes': {'semantic_id': 'industrial_center',\n                'category': 'function',\n                'attributes': {'name': 'industrial center',\n                 'location': 'Bogotá'}}}),\n             (UUID('8b80ba4f-77b2-4ee6-8548-a66108963fb7'),\n              {'nodes': {'semantic_id': 'artistic_center',\n                'category': 'function',\n                'attributes': {'name': 'artistic center',\n                 'location': 'Bogotá'}}}),\n             (UUID('056f1544-f292-4506-ba8d-18d6e294d433'),\n              {'nodes': {'semantic_id': 'cultural_center',\n                'category': 'function',\n                'attributes': {'name': 'cultural center',\n                 'location': 'Bogotá'}}}),\n             (UUID('d747fcf6-5b60-4595-a127-f3e247cbb8a3'),\n              {'nodes': {'semantic_id': 'sports_center',\n                'category': 'function',\n                'attributes': {'name': 'sports center',\n                 'location': 'Bogotá'}}}),\n             (UUID('59719cce-5c68-47cf-8111-481c74e73c3b'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('8ad7ae8e-ed3a-415f-8d0e-a8984bd7717e'),\n                'category': 'capital_of'}}),\n             (UUID('0bc7053b-2183-41df-995a-faecd919ad45'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('5576789f-9306-4a82-8736-882db81abdf2'),\n                'category': 'part_of'}}),\n             (UUID('73230839-050b-4ace-9dd1-7927b1bd1034'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('adc293cf-401b-49b6-928d-ada04da0e4bf'),\n                'category': 'functions_as'}}),\n             (UUID('04b8ded0-c2c1-441f-b7f7-069b05f80338'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('108added-3b0f-4b67-9e28-fce89a168e46'),\n                'category': 'functions_as'}}),\n             (UUID('0a86d51a-bd57-4a63-b494-08075a2bcb4a'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('7fad3f22-d955-4f54-a1e2-5683bf4639e8'),\n                'category': 'functions_as'}}),\n             (UUID('58c0a891-5c05-48e5-ba2a-1c230b588997'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('404e8a42-e9e9-4081-9890-669ba48d1b36'),\n                'category': 'functions_as'}}),\n             (UUID('5bad3267-dceb-4067-8d02-bc8c748d50d3'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('8b80ba4f-77b2-4ee6-8548-a66108963fb7'),\n                'category': 'functions_as'}}),\n             (UUID('d80bed21-cd68-454d-a142-223fb30d5db6'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('056f1544-f292-4506-ba8d-18d6e294d433'),\n                'category': 'functions_as'}}),\n             (UUID('6c12a6ad-244d-4d7e-8c25-f3a6288967fb'),\n              {'edges': {'from_node': UUID('2de55d21-12b4-493e-954a-acf0b7bf4ac2'),\n                'to_node': UUID('d747fcf6-5b60-4595-a127-f3e247cbb8a3'),\n                'category': 'functions_as'}}),\n             (UUID('87517804-e5a2-44d9-82bd-23b4e33c2a40'),\n              {'nodes': {'semantic_id': 'bogota',\n                'category': 'city',\n                'attributes': {'name': 'Bogotá',\n                 'functions': ['political center',\n                  'economic center',\n                  'administrative center',\n                  'industrial center',\n                  'artistic center',\n                  'cultural center',\n                  'sports center']}}}),\n             (UUID('8ad7ae8e-ed3a-415f-8d0e-a8984bd7717e'),\n              {'nodes': {'semantic_id': 'colombia',\n                'category': 'country',\n                'attributes': {'name': 'Colombia',\n                 'capital': 'Bogotá',\n                 'status': 'capital and largest city'}}}),\n             (UUID('5576789f-9306-4a82-8736-882db81abdf2'),\n              {'nodes': {'semantic_id': 'cundinamarca',\n                'category': 'region',\n                'attributes': {'name': 'Cundinamarca',\n                 'relation_to_bogota': 'often thought of as part of'}}}),\n             (UUID('af6b4ebf-7c7c-4dd0-a58e-ab8c292eaf7c'),\n              {'edges': {'from_node': UUID('87517804-e5a2-44d9-82bd-23b4e33c2a40'),\n                'to_node': UUID('8ad7ae8e-ed3a-415f-8d0e-a8984bd7717e'),\n                'category': 'capital_of'}}),\n             (UUID('3265632a-4065-46c4-82cf-527b3d4abc13'),\n              {'edges': {'from_node': UUID('87517804-e5a2-44d9-82bd-23b4e33c2a40'),\n                'to_node': UUID('5576789f-9306-4a82-8736-882db81abdf2'),\n                'category': 'part_of'}}),\n             (UUID('d97d057d-2564-427d-9703-e77a61ff58c7'),\n              {'nodes': {'semantic_id': 'intracellular_fluid',\n                'category': 'fluid',\n                'attributes': {'name': 'intracellular fluid',\n                 'volume': '2/3 of body water',\n                 'amount_in_72_kg_body': '25 litres',\n                 'percentage_of_total_body_fluid': 62.5}}}),\n             (UUID('380f506f-c2cf-453e-879f-fb58b3f3d1db'),\n              {'nodes': {'semantic_id': 'body_fluid',\n                'category': 'fluid',\n                'attributes': {'name': 'body fluid',\n                 'total_volume_in_72_kg_body': '40 litres'}}}),\n             (UUID('1b0bebc1-49a1-419f-bfb2-d50cffeed740'),\n              {'edges': {'from_node': UUID('d97d057d-2564-427d-9703-e77a61ff58c7'),\n                'to_node': UUID('380f506f-c2cf-453e-879f-fb58b3f3d1db'),\n                'category': 'part_of'}}),\n             (UUID('6e5f08dc-fe95-4b74-884d-dcce8470290a'),\n              {'nodes': {'semantic_id': 'territorial_waters',\n                'category': 'geographic_area',\n                'attributes': {'name': 'territorial waters',\n                 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state',\n                 'source': '1982 United Nations Convention on the Law of the Sea'}}}),\n             (UUID('443e77c0-cff1-43e4-89f2-ba748d4421a1'),\n              {'edges': {'from_node': UUID('6e5f08dc-fe95-4b74-884d-dcce8470290a'),\n                'to_node': UUID('d5019515-a9d9-4d23-89cf-dac81f7d96ea'),\n                'category': 'extends_from'}}),\n             (UUID('58b64eae-e6c2-47f1-8916-eaf1dcc87e6b'),\n              {'edges': {'from_node': UUID('6e5f08dc-fe95-4b74-884d-dcce8470290a'),\n                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),\n                'category': 'belongs_to'}}),\n             (UUID('7b534168-d2e7-498e-9115-5e21d6c638f3'),\n              {'nodes': {'semantic_id': 'territorial_sea',\n                'category': 'geographic_area',\n                'attributes': {'name': 'territorial sea',\n                 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state',\n                 'sovereign_territory': True,\n                 'foreign_ship_passage': 'innocent passage through it or transit passage for straits',\n                 'jurisdiction': 'extends to airspace over and seabed below'}}}),\n             (UUID('d5019515-a9d9-4d23-89cf-dac81f7d96ea'),\n              {'nodes': {'semantic_id': 'baseline',\n                'category': 'geographic_feature',\n                'attributes': {'name': 'baseline',\n                 'definition': 'usually the mean low-water mark of a coastal state'}}}),\n             (UUID('11903999-15a7-4776-8bae-f1803429147f'),\n              {'nodes': {'semantic_id': 'coastal_state',\n                'category': 'legal_entity',\n                'attributes': {'name': 'coastal state'}}}),\n             (UUID('7a93cd6e-7f97-43fa-9054-22d3e4478ecf'),\n              {'edges': {'from_node': UUID('7b534168-d2e7-498e-9115-5e21d6c638f3'),\n                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),\n                'category': 'belongs_to'}}),\n             (UUID('4dec6036-1299-4093-ae68-3b6cecc73053'),\n              {'edges': {'from_node': UUID('7b534168-d2e7-498e-9115-5e21d6c638f3'),\n                'to_node': UUID('d5019515-a9d9-4d23-89cf-dac81f7d96ea'),\n                'category': 'extends_from'}}),\n             (UUID('d86a7f75-df06-47f1-a30d-67a921d822bf'),\n              {'nodes': {'semantic_id': 'strait',\n                'category': 'geographic_feature',\n                'attributes': {'name': 'strait',\n                 'sovereign_territory': True,\n                 'jurisdiction': {'airspace': True, 'seabed': True}}}}),\n             (UUID('1baf2bf2-6083-481f-8980-d2f9793f58e6'),\n              {'nodes': {'semantic_id': 'maritime_delimitation',\n                'category': 'legal_concept',\n                'attributes': {'name': 'maritime delimitation',\n                 'definition': \"Adjustment of the boundaries of a coastal state's territorial sea, exclusive economic zone, or continental shelf\"}}}),\n             (UUID('396cc35f-de5f-4717-9cb5-2cf511456fb2'),\n              {'edges': {'from_node': UUID('d86a7f75-df06-47f1-a30d-67a921d822bf'),\n                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),\n                'category': 'belongs_to'}}),\n             (UUID('88b88486-07be-4ae4-8d51-c2d88ca9f125'),\n              {'edges': {'from_node': UUID('1baf2bf2-6083-481f-8980-d2f9793f58e6'),\n                'to_node': UUID('11903999-15a7-4776-8bae-f1803429147f'),\n                'category': 'involves'}}),\n             (UUID('d8b37bae-dbdb-49c8-9e35-6c87c902f3f9'),\n              {'nodes': {'semantic_id': 'uninsured_depositor',\n                'category': 'stakeholder',\n                'attributes': {'deposit_amount': '&gt;100,000 Euro',\n                 'treatment': 'subject to a bail-in',\n                 'new_role': 'new shareholders of the legacy entity'}}}),\n             (UUID('7862ab2f-0f92-48af-ba10-12cdac45a10f'),\n              {'nodes': {'semantic_id': 'bank_of_cyprus',\n                'category': 'organization',\n                'attributes': {'name': 'Bank of Cyprus',\n                 'size': 'largest banking group in Cyprus',\n                 'relation_to_cyprus_popular_bank': \"absorbed the 'good' Cypriot part of Cyprus Popular Bank after it was shuttered\"}}}),\n             (UUID('1c509f8b-300e-47ac-ad62-4dcf675ca11d'),\n              {'nodes': {'semantic_id': 'cyprus_popular_bank',\n                'category': 'organization',\n                'attributes': {'name': 'Cyprus Popular Bank',\n                 'previous_name': 'Marfin Popular Bank',\n                 'status': 'shuttered in 2013',\n                 'size': 'second largest banking group in Cyprus',\n                 'parent': 'Bank of Cyprus'}}}),\n             (UUID('82b3a659-7692-4909-a812-fc247f97ed6c'),\n              {'edges': {'from_node': UUID('d8b37bae-dbdb-49c8-9e35-6c87c902f3f9'),\n                'to_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),\n                'category': 'holds_deposits'}}),\n             (UUID('a80831eb-a3c9-4ad6-a6ba-9db107876050'),\n              {'edges': {'from_node': UUID('1c509f8b-300e-47ac-ad62-4dcf675ca11d'),\n                'to_node': UUID('7862ab2f-0f92-48af-ba10-12cdac45a10f'),\n                'category': 'merged_with'}}),\n             (UUID('2d393fc3-fe9b-46dd-90f7-2fadb227fccd'),\n              {'nodes': {'semantic_id': 'central_bank_of_cyprus',\n                'category': 'organization',\n                'attributes': {'name': 'Central Bank of Cyprus',\n                 'role': 'Governor and Board members amended the lawyers of the legacy entity without consulting the special administrator'}}}),\n             (UUID('87a173a3-a32b-4a36-a1b2-6248a92eb14c'),\n              {'nodes': {'semantic_id': 'veteran_banker',\n                'category': 'stakeholder',\n                'attributes': {'name': 'Chris Pavlou',\n                 'expertise': 'Treasury'}}}),\n             (UUID('7af74b0b-30ab-44c4-8adf-8e19ecf04a14'),\n              {'nodes': {'semantic_id': 'special_administrator',\n                'category': 'stakeholder',\n                'attributes': {'name': 'Andri Antoniadou',\n                 'role': 'ran the legacy entity for two years, from March 2013 until 3 March 2015'}}}),\n             (UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),\n              {'nodes': {'semantic_id': 'legacy_entity',\n                'category': 'organization',\n                'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\",\n                 'ownership_stake': '4.8% of Bank of Cyprus',\n                 'board_representation': 'does not hold a board seat',\n                 'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'}}}),\n             (UUID('bfe012be-e584-401f-bd34-f6d147e7831c'),\n              {'nodes': {'semantic_id': 'marfin_investment_group',\n                'category': 'stakeholder',\n                'attributes': {'name': 'Marfin Investment Group',\n                 'role': 'former major shareholder of the legacy entity'}}}),\n             (UUID('14585bad-087d-4ce7-bbc2-1d89e4cd7548'),\n              {'edges': {'from_node': UUID('2d393fc3-fe9b-46dd-90f7-2fadb227fccd'),\n                'to_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),\n                'category': 'amended_lawyers_without_consulting'}}),\n             (UUID('14eb57de-1b12-42b5-8b91-945cdfd08442'),\n              {'edges': {'from_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),\n                'to_node': UUID('7af74b0b-30ab-44c4-8adf-8e19ecf04a14'),\n                'category': 'managed_by'}}),\n             (UUID('e367aa2a-74bb-426e-b17c-f4ecf2032e6f'),\n              {'edges': {'from_node': UUID('87a173a3-a32b-4a36-a1b2-6248a92eb14c'),\n                'to_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),\n                'category': 'took_over_as_special_administrator'}}),\n             (UUID('1c9504d1-c7e5-4b0b-ad7a-24a03cc9c498'),\n              {'edges': {'from_node': UUID('4845f0f8-9a9e-4bf2-b9e6-49ba7ee13b44'),\n                'to_node': UUID('bfe012be-e584-401f-bd34-f6d147e7831c'),\n                'category': 'pursuing_legal_action_against'}})])\n\n\n\n# adding paragraph idx to graph hist\n\nfor gh in graph_history.history.values():\n    if 'nodes' in gh:\n        for gc in graph_components0:\n            if 'nodes' in gc:\n                if (gh['nodes']['semantic_id'] == gc['nodes'][0]['semantic_id'] and\n                    gh['nodes']['category'] == gc['nodes'][0]['category'] and\n                    gh['nodes']['attributes'] == gc['nodes'][0]['attributes']):\n                    print(gh)\n                    gh['nodes']['paragraph_idx'] = gc['nodes'][0]['paragraph_idx']\n                    \n                                  \n\n\n{'nodes': {'semantic_id': 'insular_government', 'category': 'political_entity', 'attributes': {'name': 'Insular Government', 'description': 'A United States territorial government that was replaced by the Commonwealth of the Philippines.'}}}\n{'nodes': {'semantic_id': 'commonwealth_of_the_philippines', 'category': 'political_entity', 'attributes': {'name': 'Commonwealth of the Philippines', 'years_active': '1935 to 1946', 'description': 'The administrative body that governed the Philippines during this period, except for a period of exile from 1942 to 1945 when Japan occupied the country.'}}}\n{'nodes': {'semantic_id': 'lake_oesa', 'category': 'natural_feature', 'attributes': {'name': 'Lake Oesa', 'elevation': 2267, 'elevation_unit': 'm', 'location': {'park': 'Yoho National Park', 'city': 'Field', 'province': 'British Columbia', 'country': 'Canada'}}}}\n{'nodes': {'semantic_id': 'arafura_swamp', 'category': 'natural_feature', 'attributes': {'name': 'Arafura Swamp', 'type': 'inland freshwater wetland', 'location': {'region': 'Arnhem Land', 'territory': 'Northern Territory', 'country': 'Australia'}, 'size': {'area': {'value': None, 'unit': 'km2'}, 'expansion_during_wet_season': True}, 'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia', 'cultural_significance': 'of great cultural significance to the Yolngu people, in particular the Ramingining community', 'filming_location': 'Ten Canoes'}}}\n{'nodes': {'semantic_id': 'wapizagonke_lake', 'category': 'natural_feature', 'attributes': {'name': 'Wapizagonke Lake', 'type': 'body of water', 'location': {'sector': 'Lac-Wapizagonke', 'city': 'Shawinigan', 'park': 'La Mauricie National Park', 'region': 'Mauricie', 'province': 'Quebec', 'country': 'Canada'}}}}\n{'nodes': {'semantic_id': 'khabarovsky_district', 'category': 'administrative_district', 'attributes': {'name': 'Khabarovsky District', 'country': 'Russia', 'region': 'Khabarovsk Krai', 'area': None, 'area_unit': None, 'administrative_center': 'Khabarovsk'}}}\n{'nodes': {'semantic_id': 'silver_lake', 'category': 'natural_feature', 'attributes': {'name': 'Silver Lake', 'type': 'body of water', 'location': {'county': 'Cheshire County', 'state': 'New Hampshire', 'country': 'United States', 'towns': ['Harrisville', 'Nelson']}, 'outflows': ['Minnewawa Brook', 'The Branch'], 'ultimate_recipient': 'Connecticut River'}}}\n{'nodes': {'semantic_id': 'hyderabad_police_area', 'category': 'administrative_district', 'attributes': {'name': 'Hyderabad Police area', 'jurisdiction_size': 'smallest'}}}\n{'nodes': {'semantic_id': 'hmda_area', 'category': 'administrative_district', 'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area', 'jurisdiction_size': 'largest', 'type': 'urban_planning_agency', 'apolitical': True, 'covers': ['ghmc_area', 'suburbs_of_ghmc_area']}}}\n{'nodes': {'semantic_id': 'san_juan', 'category': 'city', 'attributes': {'name': 'San Juan', 'location': {'country': 'Puerto Rico', 'region': 'north-eastern coast'}, 'borders': {'north': 'Atlantic Ocean', 'south': ['Caguas', 'Trujillo Alto'], 'east': ['Carolina'], 'west': ['Guaynabo']}, 'area': {'value': 76.93, 'unit': 'square miles'}, 'water_bodies': ['San Juan Bay', 'Condado Lagoon', 'San José Lagoon'], 'water_area': {'value': 29.11, 'unit': 'square miles', 'percentage': 37.83}}}}\n{'nodes': {'semantic_id': 'urban_hinterland', 'category': 'administrative_district', 'attributes': {'name': 'Urban hinterland', 'type': 'urban_area'}}}\n{'nodes': {'semantic_id': 'landkreise_amalgamation', 'category': 'administrative_district', 'attributes': {'name': 'Local associations of a special kind', 'type': 'amalgamation_of_districts', 'purpose': 'simplification_of_administration'}}}\n{'nodes': {'semantic_id': 'norfolk_island', 'category': 'island', 'attributes': {'name': 'Norfolk Island', 'location': {'ocean': 'South Pacific Ocean', 'relative_location': 'east of Australian mainland'}, 'coordinates': {'latitude': -29.033, 'longitude': 167.95}, 'area': {'value': 34.6, 'unit': 'square kilometres'}, 'coastline': {'length': 32, 'unit': 'km'}, 'highest_point': 'Mount Bates'}}}\n{'nodes': {'semantic_id': 'norfolk_island', 'category': 'island', 'attributes': {'name': 'Norfolk Island', 'location': {'ocean': 'South Pacific Ocean', 'relative_location': 'east of Australian mainland'}, 'coordinates': {'latitude': -29.033, 'longitude': 167.95}, 'area': {'value': 34.6, 'unit': 'square kilometres'}, 'coastline': {'length': 32, 'unit': 'km'}, 'highest_point': 'Mount Bates'}, 'paragraph_idx': 9}}\n{'nodes': {'semantic_id': 'phillip_island', 'category': 'island', 'attributes': {'name': 'Phillip Island', 'location': {'relation': 'second largest island of the territory', 'coordinates': {'latitude': -29.117, 'longitude': 167.95}, 'distance_from_main_island': {'value': 7, 'unit': 'kilometres'}}}}}\n{'nodes': {'semantic_id': 'phillip_island', 'category': 'island', 'attributes': {'name': 'Phillip Island', 'location': {'relation': 'second largest island of the territory', 'coordinates': {'latitude': -29.117, 'longitude': 167.95}, 'distance_from_main_island': {'value': 7, 'unit': 'kilometres'}}}, 'paragraph_idx': 9}}\n{'nodes': {'semantic_id': 'star_stadium', 'category': 'stadium', 'attributes': {'name': 'Star (Zvezda) Stadium', 'former_name': 'Lenin Komsomol Stadium', 'location': {'city': 'Perm', 'country': 'Russia'}, 'usage': 'football matches', 'home_team': 'FC Amkar Perm', 'capacity': 17000, 'opened': '1969-06-05'}}}\n{'nodes': {'semantic_id': 'perm', 'category': 'city', 'attributes': {'name': 'Perm', 'location': {'river': 'Kama River', 'region': 'Perm Krai', 'country': 'Russia', 'geography': 'European part of Russia near the Ural Mountains'}, 'administrative_status': 'administrative centre'}}}\n{'nodes': {'semantic_id': 'paea', 'category': 'municipality', 'attributes': {'name': 'Paea', 'location': {'island': 'Tahiti', 'subdivision': 'Windward Islands', 'region': 'Society Islands', 'country': 'French Polynesia', 'territory': 'France'}, 'population': 13021}}}\n{'nodes': {'semantic_id': 'potamogeton_amplifolius', 'category': 'plant', 'attributes': {'common_names': ['largeleaf pondweed', 'broad-leaved pondweed'], 'habitat': ['lakes', 'ponds', 'rivers'], 'water_depth': 'often in deep water', 'distribution': 'North America'}}}\n{'nodes': {'semantic_id': 'soltonsky_district', 'category': 'administrative_district', 'attributes': {'name': 'Soltonsky District', 'location': {'region': 'Altai Krai', 'country': 'Russia'}}}}\n{'nodes': {'semantic_id': 'contoocook_lake', 'category': 'lake', 'attributes': {'name': 'Contoocook Lake', 'location': {'county': 'Cheshire County', 'state': 'New Hampshire', 'country': 'United States', 'towns': ['Jaffrey', 'Rindge']}, 'connection': {'to': 'pool_pond', 'type': 'forms_headwaters_of'}, 'outflow': {'to': 'contoocook_river', 'direction': 'north'}, 'outflow_destination': 'merrimack_river'}}}\n{'nodes': {'semantic_id': 'contoocook_river', 'category': 'river', 'attributes': {'name': 'Contoocook River', 'flow_direction': 'north', 'outflow_destination': 'merrimack_river'}}}\n{'nodes': {'semantic_id': 'bogota', 'category': 'city', 'attributes': {'name': 'Bogotá', 'pronunciation': {'english': ['/ˈboʊɡəˌtɑː/', '/ˌboʊ-/', '/ˈbɔɪ-/'], 'spanish': 'boˈɣota'}, 'official_name': 'Bogotá', 'administration': 'Capital District'}}}\n{'nodes': {'semantic_id': 'bogota', 'category': 'city', 'attributes': {'name': 'Bogotá', 'functions': ['political center', 'economic center', 'administrative center', 'industrial center', 'artistic center', 'cultural center', 'sports center']}}}\n{'nodes': {'semantic_id': 'intracellular_fluid', 'category': 'fluid', 'attributes': {'name': 'intracellular fluid', 'volume': '2/3 of body water', 'amount_in_72_kg_body': '25 litres', 'percentage_of_total_body_fluid': 62.5}}}\n{'nodes': {'semantic_id': 'territorial_waters', 'category': 'geographic_area', 'attributes': {'name': 'territorial waters', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state', 'source': '1982 United Nations Convention on the Law of the Sea'}}}\n{'nodes': {'semantic_id': 'territorial_sea', 'category': 'geographic_area', 'attributes': {'name': 'territorial sea', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state', 'sovereign_territory': True, 'foreign_ship_passage': 'innocent passage through it or transit passage for straits', 'jurisdiction': 'extends to airspace over and seabed below'}}}\n{'nodes': {'semantic_id': 'strait', 'category': 'geographic_feature', 'attributes': {'name': 'strait', 'sovereign_territory': True, 'jurisdiction': {'airspace': True, 'seabed': True}}}}\n{'nodes': {'semantic_id': 'uninsured_depositor', 'category': 'stakeholder', 'attributes': {'deposit_amount': '&gt;100,000 Euro', 'treatment': 'subject to a bail-in', 'new_role': 'new shareholders of the legacy entity'}}}\n{'nodes': {'semantic_id': 'cyprus_popular_bank', 'category': 'organization', 'attributes': {'name': 'Cyprus Popular Bank', 'previous_name': 'Marfin Popular Bank', 'status': 'shuttered in 2013', 'size': 'second largest banking group in Cyprus', 'parent': 'Bank of Cyprus'}}}\n{'nodes': {'semantic_id': 'cyprus_popular_bank', 'category': 'organization', 'attributes': {'name': 'Cyprus Popular Bank', 'previous_name': 'Marfin Popular Bank', 'status': 'shuttered in 2013', 'size': 'second largest banking group in Cyprus', 'parent': 'Bank of Cyprus'}, 'paragraph_idx': 19}}\n{'nodes': {'semantic_id': 'central_bank_of_cyprus', 'category': 'organization', 'attributes': {'name': 'Central Bank of Cyprus', 'role': 'Governor and Board members amended the lawyers of the legacy entity without consulting the special administrator'}}}\n{'nodes': {'semantic_id': 'legacy_entity', 'category': 'organization', 'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\", 'ownership_stake': '4.8% of Bank of Cyprus', 'board_representation': 'does not hold a board seat', 'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'}}}\n{'nodes': {'semantic_id': 'legacy_entity', 'category': 'organization', 'attributes': {'description': \"the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds\", 'ownership_stake': '4.8% of Bank of Cyprus', 'board_representation': 'does not hold a board seat', 'previous_operations': 'overseas operations of the now defunct Cyprus Popular Bank'}, 'paragraph_idx': 19}}\n\n\n\n## Adding edges(and their indices) to the graph and vector db\n#| code-fold: false\n\nimport rustworkx as rx\nfrom rustworkx.visualization import mpl_draw\n\ndigraph = rx.PyDiGraph()\n\nnode_indices = {}\nedge_indices = {}\n# Iterate through the history to add nodes and edges\nfor uuid, data in graph_history.history.items():\n    if 'nodes' in data:\n        # Add node to the graph and store the index with its UUID\n        node_index = digraph.add_node(data['nodes'])\n        node_indices[uuid] = node_index\n\nfor uuid, data in graph_history.history.items():\n    if 'edges' in data:\n        # Retrieve indices of the from and to nodes using their UUIDs\n        from_index = node_indices.get(data['edges']['from_node'])\n        to_index = node_indices.get(data['edges']['to_node'])\n        if from_index is not None and to_index is not None:\n            # Add edge to the graph\n            edge_index = digraph.add_edge(from_index, to_index, data['edges'])\n            edge_indices[uuid] = edge_index\n\n\ngraph_history = graph_history0\n\n\nchroma_client.delete_collection('musique_benchmark')\n\n\nValueError: Collection musique_benchmark does not exist.\n\n\n\nchroma_client = chromadb.Client()\n\ncollection = chroma_client.create_collection(\n    name='musique_benchmark',\n    embedding_function=ef,\n    metadata={\"hsnw:space\": \"cosine\"}\n    )\n\nfor k,v in graph_history.history.items():\n    if 'nodes' in v:\n        collection.add(documents=[str(v['nodes'])], ids=[str(k)])\n    # Omitting the addition of edges to the vector db\n    # elif 'edges' in v:\n    #     collection.add(documents=[str(v['edges'])], ids=[str(k)])\n\n2024-05-15 17:46:35,070 - DEBUG - chromadb.config - config - start - 297 - Starting component LocalHnswSegment\n\n\n\nfor k,v in graph_history.history.items():\n\n    if 'edges' in v:\n        print(node_dict[v['edges']['from_node']], node_dict[v['edges']['to_node']])\n\n\nNameError: name 'node_dict' is not defined\n\n\n\nlines[-2]['question']\n\n'What is the body of water by the city where Zvezda stadium is located?'\n\n\n\ntop_results = collection.query(\n    query_texts=[lines[-2]['question']]\n    )\ntop_results\n\n\n{'ids': [['6e5f08dc-fe95-4b74-884d-dcce8470290a',\n   '7b534168-d2e7-498e-9115-5e21d6c638f3',\n   '9a4b69f8-749a-4b7c-a3e3-e2db4f3823d1',\n   '7c83cf46-05fc-491d-9667-20acf68fe70f',\n   '7956f84b-20a8-4836-ae7a-c7311d716cd1',\n   '56ae1a37-74f4-486b-b517-34b99027ba36',\n   '631d3937-3f47-4598-8f45-bdb90d5eb91f',\n   'c7120f30-4152-4e88-bec1-698bfdd2d5e1',\n   'd97d057d-2564-427d-9703-e77a61ff58c7',\n   'd86a7f75-df06-47f1-a30d-67a921d822bf']],\n 'distances': [[1.3786437511444092,\n   1.4539598226547241,\n   1.4855282306671143,\n   1.501915693283081,\n   1.5252399444580078,\n   1.5319929122924805,\n   1.552965760231018,\n   1.5618354082107544,\n   1.5635420083999634,\n   1.5718779563903809]],\n 'metadatas': [[None, None, None, None, None, None, None, None, None, None]],\n 'embeddings': None,\n 'documents': [[\"{'semantic_id': 'territorial_waters', 'category': 'geographic_area', 'attributes': {'name': 'territorial waters', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state', 'source': '1982 United Nations Convention on the Law of the Sea'}, 'paragraph_idx': 18}\",\n   \"{'semantic_id': 'territorial_sea', 'category': 'geographic_area', 'attributes': {'name': 'territorial sea', 'definition': 'a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low-water mark) of a coastal state', 'sovereign_territory': True, 'foreign_ship_passage': 'innocent passage through it or transit passage for straits', 'jurisdiction': 'extends to airspace over and seabed below'}, 'paragraph_idx': 18}\",\n   \"{'semantic_id': 'hmwssb', 'category': 'administrative_body', 'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage Board', 'type': 'water_management'}}\",\n   \"{'semantic_id': 'arafura_swamp', 'category': 'natural_feature', 'attributes': {'name': 'Arafura Swamp', 'type': 'inland freshwater wetland', 'location': {'region': 'Arnhem Land', 'territory': 'Northern Territory', 'country': 'Australia'}, 'size': {'area': {'value': None, 'unit': 'km2'}, 'expansion_during_wet_season': True}, 'description': 'a near pristine floodplain, possibly the largest wooded swamp in the Northern Territory and Australia', 'cultural_significance': 'of great cultural significance to the Yolngu people, in particular the Ramingining community', 'filming_location': 'Ten Canoes'}, 'paragraph_idx': 2}\",\n   \"{'semantic_id': 'san_juan', 'category': 'city', 'attributes': {'name': 'San Juan', 'location': {'country': 'Puerto Rico', 'region': 'north-eastern coast'}, 'borders': {'north': 'Atlantic Ocean', 'south': ['Caguas', 'Trujillo Alto'], 'east': ['Carolina'], 'west': ['Guaynabo']}, 'area': {'value': 76.93, 'unit': 'square miles'}, 'water_bodies': ['San Juan Bay', 'Condado Lagoon', 'San José Lagoon'], 'water_area': {'value': 29.11, 'unit': 'square miles', 'percentage': 37.83}}, 'paragraph_idx': 7}\",\n   \"{'semantic_id': 'contoocook_river', 'category': 'river', 'attributes': {'name': 'Contoocook River', 'flow_direction': 'north', 'outflow_destination': 'merrimack_river'}, 'paragraph_idx': 15}\",\n   \"{'semantic_id': 'ghmc_area', 'category': 'administrative_district', 'attributes': {'name': 'GHMC area', 'jurisdiction_size': 'second_largest', 'alternate_name': 'Hyderabad city'}}\",\n   \"{'semantic_id': 'lake_oesa', 'category': 'natural_feature', 'attributes': {'name': 'Lake Oesa', 'elevation': 2267, 'elevation_unit': 'm', 'location': {'park': 'Yoho National Park', 'city': 'Field', 'province': 'British Columbia', 'country': 'Canada'}}, 'paragraph_idx': 1}\",\n   \"{'semantic_id': 'intracellular_fluid', 'category': 'fluid', 'attributes': {'name': 'intracellular fluid', 'volume': '2/3 of body water', 'amount_in_72_kg_body': '25 litres', 'percentage_of_total_body_fluid': 62.5}, 'paragraph_idx': 17}\",\n   \"{'semantic_id': 'strait', 'category': 'geographic_feature', 'attributes': {'name': 'strait', 'sovereign_territory': True, 'jurisdiction': {'airspace': True, 'seabed': True}}, 'paragraph_idx': 18}\"]],\n 'uris': None,\n 'data': None}\n\n\n\n# uuid_str = top_results['ids'][0][0]\n# top_uuid = uuid.UUID(uuid_str, version=4)\n\n# top_node = digraph[node_indices[top_uuid]]\n\n\nuuid_strs[0]\n\n'6e5f08dc-fe95-4b74-884d-dcce8470290a'\n\n\n\nimport uuid\n\n\nuuid_strs = top_results['ids'][0][:3]\ntop_uuids = [uuid.UUID(uuid_str, version=4) for uuid_str in uuid_strs]\n\n\nuuid_strs\n\n['6e5f08dc-fe95-4b74-884d-dcce8470290a',\n '7b534168-d2e7-498e-9115-5e21d6c638f3',\n '7956f84b-20a8-4836-ae7a-c7311d716cd1']\n\n\n\nfor top_uuid in top_uuids:\n    for idx in list(digraph.successor_indices(node_indices[top_uuid])) + list(digraph.predecessor_indices(node_indices[top_uuid])):\n        print(digraph[idx])\n\n{'semantic_id': 'coastal_state', 'category': 'legal_entity', 'attributes': {'name': 'coastal state'}}\n{'semantic_id': 'baseline', 'category': 'geographic_feature', 'attributes': {'name': 'baseline', 'definition': 'usually the mean low-water mark of a coastal state'}}\n{'semantic_id': 'baseline', 'category': 'geographic_feature', 'attributes': {'name': 'baseline', 'definition': 'usually the mean low-water mark of a coastal state'}}\n{'semantic_id': 'coastal_state', 'category': 'legal_entity', 'attributes': {'name': 'coastal state'}}\n{'semantic_id': 'hmda_area', 'category': 'administrative_district', 'attributes': {'name': 'Hyderabad Metropolitan Development Authority (HMDA) area', 'jurisdiction_size': 'largest', 'type': 'urban_planning_agency', 'apolitical': True, 'covers': ['ghmc_area', 'suburbs_of_ghmc_area']}, 'paragraph_idx': 6}\n\n\n\nimport copy\n\nnode_hist_dict = {} # idx: obj mapping\nedge_hist_dict = {} # (from_idx, to_idx): obj mapping\nuuid_list = [] # used for dup checking\nid_counter = 0 # used for creating new easily-parseable ids\nfor top_uuid in top_uuids:\n    top_idx = node_indices[top_uuid]\n    uuid_list.append(top_uuid)\n    successor_idxs = [('s', successor) for successor in digraph.successor_indices(top_idx)]\n    predecessor_idxs = [('p', predecessor) for predecessor in digraph.predecessor_indices(top_idx)]\n    neighbor_idxs = successor_idxs + predecessor_idxs\n    if top_idx not in node_hist_dict: # Add the top node if it's not already in the node_hist_dict\n        main_node = copy.deepcopy(digraph[top_idx])\n        main_node['connecting_id'] = id_counter\n        node_hist_dict[top_idx] = main_node\n        id_counter += 1\n    else:\n        main_node = node_hist_dict[top_idx]\n    if (len(neighbor_idxs) &gt; 0):\n        for connection_type, idx in neighbor_idxs: \n            if idx in node_hist_dict:\n                secondary_connecting_id = node_hist_dict[idx]['connecting_id']\n            else:\n                secondary_connecting_id = id_counter\n                node_hist_dict[idx] = copy.deepcopy(digraph[idx])\n                node_hist_dict[idx]['connecting_id'] = secondary_connecting_id\n                id_counter += 1\n            # If the connections are already in the edge_hist_dict, skip\n            if ((connection_type == 's' and (top_idx, idx) in edge_hist_dict) or \n                (connection_type == 'p' and (idx, top_idx) in edge_hist_dict)):\n                continue\n            elif connection_type == 's':\n                edge_hist_dict[(top_idx, idx)] = copy.deepcopy(digraph.get_edge_data(top_idx, idx))\n                edge_hist_dict[(top_idx, idx)]['from_node'] = main_node['connecting_id']\n                edge_hist_dict[(top_idx, idx)]['to_node'] = secondary_connecting_id\n            elif connection_type == 'p':\n                edge_hist_dict[(idx, top_idx)] = copy.deepcopy(digraph.get_edge_data(idx, top_idx))\n                edge_hist_dict[(idx, top_idx)]['from_node'] = secondary_connecting_id\n                edge_hist_dict[(idx, top_idx)]['to_node'] = main_node['connecting_id']\n\n\n{**node_hist_dict, **edge_hist_dict}.keys()\n\ndict_keys([48, 51, 50, 49, 14, 11, (48, 51), (48, 50), (49, 50), (49, 51), (11, 14)])\n\n\n\npprint(list({**node_hist_dict, **edge_hist_dict}.values()))\n\n[{'attributes': {'definition': 'a belt of coastal waters extending at most 12 '\n                               'nautical miles (22.2 km; 13.8 mi) from the '\n                               'baseline (usually the mean low-water mark) of '\n                               'a coastal state',\n                 'name': 'territorial waters',\n                 'source': '1982 United Nations Convention on the Law of the '\n                           'Sea'},\n  'category': 'geographic_area',\n  'connecting_id': 0,\n  'paragraph_idx': 18,\n  'semantic_id': 'territorial_waters'},\n {'attributes': {'name': 'coastal state'},\n  'category': 'legal_entity',\n  'connecting_id': 1,\n  'semantic_id': 'coastal_state'},\n {'attributes': {'definition': 'usually the mean low-water mark of a coastal '\n                               'state',\n                 'name': 'baseline'},\n  'category': 'geographic_feature',\n  'connecting_id': 2,\n  'semantic_id': 'baseline'},\n {'attributes': {'definition': 'a belt of coastal waters extending at most 12 '\n                               'nautical miles (22.2 km; 13.8 mi) from the '\n                               'baseline (usually the mean low-water mark) of '\n                               'a coastal state',\n                 'foreign_ship_passage': 'innocent passage through it or '\n                                         'transit passage for straits',\n                 'jurisdiction': 'extends to airspace over and seabed below',\n                 'name': 'territorial sea',\n                 'sovereign_territory': True},\n  'category': 'geographic_area',\n  'connecting_id': 3,\n  'paragraph_idx': 18,\n  'semantic_id': 'territorial_sea'},\n {'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage '\n                         'Board',\n                 'type': 'water_management'},\n  'category': 'administrative_body',\n  'connecting_id': 4,\n  'semantic_id': 'hmwssb'},\n {'attributes': {'apolitical': True,\n                 'covers': ['ghmc_area', 'suburbs_of_ghmc_area'],\n                 'jurisdiction_size': 'largest',\n                 'name': 'Hyderabad Metropolitan Development Authority (HMDA) '\n                         'area',\n                 'type': 'urban_planning_agency'},\n  'category': 'administrative_district',\n  'connecting_id': 5,\n  'paragraph_idx': 6,\n  'semantic_id': 'hmda_area'},\n {'category': 'belongs_to', 'from_node': 0, 'to_node': 1},\n {'category': 'extends_from', 'from_node': 0, 'to_node': 2},\n {'category': 'extends_from', 'from_node': 3, 'to_node': 2},\n {'category': 'belongs_to', 'from_node': 3, 'to_node': 1},\n {'category': 'manages', 'from_node': 5, 'to_node': 4}]"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/notebooks/kg_build.html#single-answer",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-1/notebooks/kg_build.html#single-answer",
    "title": "Explore",
    "section": "single answer",
    "text": "single answer\n\ncombined_template = system_message + human_template\ncombined_template\n\nChatPromptTemplate(input_variables=['evidence', 'question'], messages=[SystemMessage(content='You are the best taker of tests, particularly excelling at answering questions based on information provided to you. You will be given nodes and edges from a knowledge graph in a JSON format and you are expected to answer a question based on them. The \\'from_node\\' and \\'to_node\\' fields in the edges correspond to the \\'connecting_id\\' fields in the nodes. Your output will only be JSON, and nothing more. No yapping.\\nThis JSON Schema is the format you will be using: {\"properties\": {\"answerable\": {\"description\": \"true or false value. Whether or not the answer is answerable based on the provided nodes and edges\", \"title\": \"Answerable\", \"type\": \"boolean\"}, \"answer\": {\"description\": \"The answer to the question. Terse and concise.\", \"title\": \"Answer\", \"type\": \"string\"}, \"support_idxs\": {\"description\": \"The indices of the nodes that support the answer. From \\'paragraph_idx\\' field\", \"items\": {\"type\": \"integer\"}, \"title\": \"Support Idxs\", \"type\": \"array\"}}, \"required\": [\"answerable\", \"answer\", \"support_idxs\"], \"title\": \"Answer\", \"type\": \"object\"}'), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['evidence', 'question'], template='Question: {question}\\n\\n Supporting Evidence:\\n {evidence}'))])\n\n\n\nanswer_pipe = combined_template | chat_model | output_parser\n\nevidence = str(list({**node_hist_dict, **edge_hist_dict}.values()))\nquestion = lines[-2]['question']\nans = answer_pipe.invoke({'question': question, 'evidence': evidence})\n\n\nquestion, ans, lines[-2]['answer']\n\n('What is the body of water by the city where Zvezda stadium is located?',\n Answer(answerable=True, answer='The Hussain Sagar lake', support_idxs=[5, 6]),\n 'Kama River')\n\n\n\npprint(list({**node_hist_dict, **edge_hist_dict}.values()))\n\n[{'attributes': {'definition': 'a belt of coastal waters extending at most 12 '\n                               'nautical miles (22.2 km; 13.8 mi) from the '\n                               'baseline (usually the mean low-water mark) of '\n                               'a coastal state',\n                 'name': 'territorial waters',\n                 'source': '1982 United Nations Convention on the Law of the '\n                           'Sea'},\n  'category': 'geographic_area',\n  'connecting_id': 0,\n  'paragraph_idx': 18,\n  'semantic_id': 'territorial_waters'},\n {'attributes': {'name': 'coastal state'},\n  'category': 'legal_entity',\n  'connecting_id': 1,\n  'semantic_id': 'coastal_state'},\n {'attributes': {'definition': 'usually the mean low-water mark of a coastal '\n                               'state',\n                 'name': 'baseline'},\n  'category': 'geographic_feature',\n  'connecting_id': 2,\n  'semantic_id': 'baseline'},\n {'attributes': {'definition': 'a belt of coastal waters extending at most 12 '\n                               'nautical miles (22.2 km; 13.8 mi) from the '\n                               'baseline (usually the mean low-water mark) of '\n                               'a coastal state',\n                 'foreign_ship_passage': 'innocent passage through it or '\n                                         'transit passage for straits',\n                 'jurisdiction': 'extends to airspace over and seabed below',\n                 'name': 'territorial sea',\n                 'sovereign_territory': True},\n  'category': 'geographic_area',\n  'connecting_id': 3,\n  'paragraph_idx': 18,\n  'semantic_id': 'territorial_sea'},\n {'attributes': {'name': 'Hyderabad Metropolitan Water Supply and Sewerage '\n                         'Board',\n                 'type': 'water_management'},\n  'category': 'administrative_body',\n  'connecting_id': 4,\n  'semantic_id': 'hmwssb'},\n {'attributes': {'apolitical': True,\n                 'covers': ['ghmc_area', 'suburbs_of_ghmc_area'],\n                 'jurisdiction_size': 'largest',\n                 'name': 'Hyderabad Metropolitan Development Authority (HMDA) '\n                         'area',\n                 'type': 'urban_planning_agency'},\n  'category': 'administrative_district',\n  'connecting_id': 5,\n  'paragraph_idx': 6,\n  'semantic_id': 'hmda_area'},\n {'category': 'belongs_to', 'from_node': 0, 'to_node': 1},\n {'category': 'extends_from', 'from_node': 0, 'to_node': 2},\n {'category': 'extends_from', 'from_node': 3, 'to_node': 2},\n {'category': 'belongs_to', 'from_node': 3, 'to_node': 1},\n {'category': 'manages', 'from_node': 5, 'to_node': 4}]\n\n\n\nlines[-2]\n\n{'id': '2hop__604134_131944',\n 'paragraphs': [{'idx': 0,\n   'title': 'Commonwealth of the Philippines',\n   'paragraph_text': \"The Commonwealth of the Philippines (; ) was the administrative body that governed the Philippines from 1935 to 1946, aside from a period of exile in the Second World War from 1942 to 1945 when Japan occupied the country. It replaced the Insular Government, a United States territorial government, and was established by the Tydings–McDuffie Act. The Commonwealth was designed as a transitional administration in preparation for the country's full achievement of independence.\",\n   'is_supporting': False},\n  {'idx': 1,\n   'title': 'Lake Oesa',\n   'paragraph_text': 'Lake Oesa is a body of water located at an elevation of 2,267m (7438 ft) in the mountains of Yoho National Park, near Field, British Columbia, Canada.',\n   'is_supporting': False},\n  {'idx': 2,\n   'title': 'Arafura Swamp',\n   'paragraph_text': 'The Arafura Swamp is a large inland freshwater wetland in Arnhem Land, in the Top End of the Northern Territory of Australia. It is a near pristine floodplain with an area of that may expand to by the end of the wet season, making it the largest wooded swamp in the Northern Territory and, possibly, in Australia. It has a strong seasonal variation in depth of water. The area is of great cultural significance to the Yolngu people, in particular the Ramingining community. It was the filming location for the film \"Ten Canoes\".',\n   'is_supporting': False},\n  {'idx': 3,\n   'title': 'Wapizagonke Lake',\n   'paragraph_text': 'The Wapizagonke Lake is one of the bodies of water located the sector \"Lac-Wapizagonke\", in the city of Shawinigan, in the La Mauricie National Park, in the region of Mauricie, in Quebec, in Canada.',\n   'is_supporting': False},\n  {'idx': 4,\n   'title': 'Khabarovsky District',\n   'paragraph_text': 'Khabarovsky District () is an administrative and municipal district (raion), one of the seventeen in Khabarovsk Krai, Russia. It consists of two unconnected segments separated by the territory of Amursky District, which are located in the southwest of the krai. The area of the district is . Its administrative center is the city of Khabarovsk (which is not administratively a part of the district). Population:',\n   'is_supporting': False},\n  {'idx': 5,\n   'title': 'Silver Lake (Harrisville, New Hampshire)',\n   'paragraph_text': 'Silver Lake is a water body located in Cheshire County in southwestern New Hampshire, United States, in the towns of Harrisville and Nelson. Water from Silver Lake flows via Minnewawa Brook and The Branch to the Ashuelot River, a tributary of the Connecticut River.',\n   'is_supporting': False},\n  {'idx': 6,\n   'title': 'Hyderabad',\n   'paragraph_text': 'The jurisdictions of the city\\'s administrative agencies are, in ascending order of size: the Hyderabad Police area, Hyderabad district, the GHMC area (\"Hyderabad city\") and the area under the Hyderabad Metropolitan Development Authority (HMDA). The HMDA is an apolitical urban planning agency that covers the GHMC and its suburbs, extending to 54 mandals in five districts encircling the city. It coordinates the development activities of GHMC and suburban municipalities and manages the administration of bodies such as the Hyderabad Metropolitan Water Supply and Sewerage Board (HMWSSB).',\n   'is_supporting': False},\n  {'idx': 7,\n   'title': 'San Juan, Puerto Rico',\n   'paragraph_text': \"San Juan is located along the north - eastern coast of Puerto Rico. It lies south of the Atlantic Ocean; north of Caguas and Trujillo Alto; east of and Guaynabo; and west of Carolina. The city occupies an area of 76.93 square miles (199.2 km), of which, 29.11 square miles (75.4 km) (37.83%) is water. San Juan's main water bodies are San Juan Bay and two natural lagoons, the Condado and San José.\",\n   'is_supporting': False},\n  {'idx': 8,\n   'title': 'States of Germany',\n   'paragraph_text': 'Local associations of a special kind are an amalgamation of one or more Landkreise with one or more Kreisfreie Städte to form a replacement of the aforementioned administrative entities at the district level. They are intended to implement simplification of administration at that level. Typically, a district-free city or town and its urban hinterland are grouped into such an association, or Kommunalverband besonderer Art. Such an organization requires the issuing of special laws by the governing state, since they are not covered by the normal administrative structure of the respective states.',\n   'is_supporting': False},\n  {'idx': 9,\n   'title': 'Norfolk Island',\n   'paragraph_text': \"Norfolk Island is located in the South Pacific Ocean, east of the Australian mainland. Norfolk Island is the main island of the island group the territory encompasses and is located at 29°02′S 167°57′E\\ufeff / \\ufeff29.033°S 167.950°E\\ufeff / -29.033; 167.950. It has an area of 34.6 square kilometres (13.4 sq mi), with no large-scale internal bodies of water and 32 km (20 mi) of coastline. The island's highest point is Mount Bates (319 metres (1,047 feet) above sea level), located in the northwest quadrant of the island. The majority of the terrain is suitable for farming and other agricultural uses. Phillip Island, the second largest island of the territory, is located at 29°07′S 167°57′E\\ufeff / \\ufeff29.117°S 167.950°E\\ufeff / -29.117; 167.950, seven kilometres (4.3 miles) south of the main island.\",\n   'is_supporting': False},\n  {'idx': 10,\n   'title': 'Perm',\n   'paragraph_text': 'Perm (;) is a city and the administrative centre of Perm Krai, Russia, located on the banks of the Kama River in the European part of Russia near the Ural Mountains.',\n   'is_supporting': True},\n  {'idx': 11,\n   'title': 'Zvezda Stadium',\n   'paragraph_text': 'Star (Zvezda) Stadium (), until 1991 Lenin Komsomol Stadium (), is a multi-use stadium in Perm, Russia. It is currently used mostly for football matches and is the home ground of FC Amkar Perm. The stadium holds 17,000 people and was opened on June 5, 1969.',\n   'is_supporting': True},\n  {'idx': 12,\n   'title': 'Paea',\n   'paragraph_text': 'Paea is a commune in the suburbs of Papeete in French Polynesia, an overseas territory of France in the southern Pacific Ocean. Paea is located on the island of Tahiti, in the administrative subdivision of the Windward Islands, themselves part of the Society Islands. At the 2017 census it had a population of 13,021.',\n   'is_supporting': False},\n  {'idx': 13,\n   'title': 'Potamogeton amplifolius',\n   'paragraph_text': 'Potamogeton amplifolius, commonly known as largeleaf pondweed or broad-leaved pondweed, is an aquatic plant of North America. It grows in water bodies such as lakes, ponds, and rivers, often in deep water.',\n   'is_supporting': False},\n  {'idx': 14,\n   'title': 'Biysky District',\n   'paragraph_text': \"Biysky District () is an administrative and municipal district (raion), one of the fifty-nine in Altai Krai, Russia. It is located in the east of the krai and borders with Zonalny, Tselinny, Soltonsky, Krasnogorsky, Sovetsky, and Smolensky Districts, as well as with the territory of the City of Biysk. The area of the district is . Its administrative center is the city of Biysk (which is not administratively a part of the district). District's population:\",\n   'is_supporting': False},\n  {'idx': 15,\n   'title': 'Contoocook Lake',\n   'paragraph_text': 'Contoocook Lake () is a water body located in Cheshire County in southwestern New Hampshire, United States, in the towns of Jaffrey and Rindge. The lake, along with Pool Pond, forms the headwaters of the Contoocook River, which flows north to the Merrimack River in Penacook, New Hampshire.',\n   'is_supporting': False},\n  {'idx': 16,\n   'title': 'Bogotá',\n   'paragraph_text': 'Bogotá (/ ˈboʊɡətɑː /, / ˌbɒɡəˈtɑː /, / ˌboʊ - /; Spanish pronunciation: (boɣoˈta) (listen)), officially Bogotá, Distrito Capital, abbreviated Bogotá, D.C., and formerly known as Santafé de Bogotá between 1991 and 2000, is the capital and largest city of Colombia, administered as the Capital District, although often thought of as part of Cundinamarca. Bogotá is a territorial entity of the first order, with the same administrative status as the departments of Colombia. It is the political, economic, administrative, industrial, artistic, cultural, and sports center of the country.',\n   'is_supporting': False},\n  {'idx': 17,\n   'title': 'Body water',\n   'paragraph_text': \"Intracellular fluid (2 / 3 of body water) is fluid contained within cells. In a 72 - kg body containing 40 litres of fluid, about 25 litres is intracellular, which amounts to 62.5%. Jackson's texts states 70% of body fluid is intracellular.\",\n   'is_supporting': False},\n  {'idx': 18,\n   'title': 'Territorial waters',\n   'paragraph_text': 'Territorial waters or a territorial sea, as defined by the 1982 United Nations Convention on the Law of the Sea, is a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low - water mark) of a coastal state. The territorial sea is regarded as the sovereign territory of the state, although foreign ships (civilian) are allowed innocent passage through it, or transit passage for straits; this sovereignty also extends to the airspace over and seabed below. Adjustment of these boundaries is called, in international law, maritime delimitation.',\n   'is_supporting': False},\n  {'idx': 19,\n   'title': 'Cyprus Popular Bank',\n   'paragraph_text': \"Cyprus Popular Bank (from 2006 to 2011 known as Marfin Popular Bank) was the second largest banking group in Cyprus behind the Bank of Cyprus until it was 'shuttered' in March 2013 and split into two parts. The 'good' Cypriot part was merged into the Bank of Cyprus (including insured deposits under 100,000 Euro) and the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds. The uninsured depositors were subject to a bail-in and became the new shareholders of the legacy entity. As at May 2017, the legacy entity is one of the largest shareholders of Bank of Cyprus with 4.8% but does not hold a board seat. All the overseas operations, of the now defunct Cyprus Popular Bank, are also held by the legacy entity, until they are sold by the Special Administrator, at first Ms Andri Antoniadou, who ran the legacy entity for two years, from March 2013 until 3 March 2015. She tendered her resignation due to disagreements, with the Governor of the Central Bank of Cyprus and the Central Bank Board members, who amended the lawyers of the legacy entity, without consulting her. Veteran banker Chris Pavlou who is an expert in Treasury and risk management took over as Special Administrator of the legacy entity in April 2015 until December 2016. The legacy entity is pursuing legal action against former major shareholder Marfin Investment Group.\",\n   'is_supporting': False}],\n 'question': 'What is the body of water by the city where Zvezda stadium is located?',\n 'question_decomposition': [{'id': 604134,\n   'question': 'Zvezda &gt;&gt; located in the administrative territorial entity',\n   'answer': 'Perm',\n   'paragraph_support_idx': 11},\n  {'id': 131944,\n   'question': 'Which is the body of water by #1 ?',\n   'answer': 'Kama River',\n   'paragraph_support_idx': 10}],\n 'answer': 'Kama River',\n 'answer_aliases': ['Kama'],\n 'answerable': True}\n\n\n\nfor paragraph in paragraphs:\n    splits = splitter.split_text(paragraph['paragraph_text'])\n    for split in splits:\n        print(split, '\\n')\n\nThe Commonwealth of the Philippines (; ) was the administrative body that governed the Philippines from 1935 to 1946, aside from a period of exile in the Second World War from 1942 to 1945 when Japan occupied the country. It replaced the Insular Government, a United States territorial government, and was established by the \n\ncountry. It replaced the Insular Government, a United States territorial government, and was established by the Tydings–McDuffie Act. The Commonwealth was designed as a transitional administration in preparation for the country's full achievement of independence. \n\nLake Oesa is a body of water located at an elevation of 2,267m (7438 ft) in the mountains of Yoho National Park, near Field, British Columbia, Canada. \n\nThe Arafura Swamp is a large inland freshwater wetland in Arnhem Land, in the Top End of the Northern Territory of Australia. It is a near pristine floodplain with an area of that may expand to by the end of the wet season, making it the largest wooded swamp in the Northern Territory and, possibly, in Australia. It \n\nseason, making it the largest wooded swamp in the Northern Territory and, possibly, in Australia. It has a strong seasonal variation in depth of water. The area is of great cultural significance to the Yolngu people, in particular the Ramingining community. It was the filming location for the film \"Ten Canoes\". \n\nThe Wapizagonke Lake is one of the bodies of water located the sector \"Lac-Wapizagonke\", in the city of Shawinigan, in the La Mauricie National Park, in the region of Mauricie, in Quebec, in Canada. \n\nKhabarovsky District () is an administrative and municipal district (raion), one of the seventeen in Khabarovsk Krai, Russia. It consists of two unconnected segments separated by the territory of Amursky District, which are located in the southwest of the krai. The area of the district is . Its administrative center is the \n\nin the southwest of the krai. The area of the district is . Its administrative center is the city of Khabarovsk (which is not administratively a part of the district). Population: \n\nSilver Lake is a water body located in Cheshire County in southwestern New Hampshire, United States, in the towns of Harrisville and Nelson. Water from Silver Lake flows via Minnewawa Brook and The Branch to the Ashuelot River, a tributary of the Connecticut River. \n\nThe jurisdictions of the city's administrative agencies are, in ascending order of size: the Hyderabad Police area, Hyderabad district, the GHMC area (\"Hyderabad city\") and the area under the Hyderabad Metropolitan Development Authority (HMDA). The HMDA is an apolitical urban planning agency that covers the GHMC and its suburbs, extending to \n\nis an apolitical urban planning agency that covers the GHMC and its suburbs, extending to 54 mandals in five districts encircling the city. It coordinates the development activities of GHMC and suburban municipalities and manages the administration of bodies such as the Hyderabad Metropolitan Water Supply and Sewerage Board (HMWSSB). \n\nSan Juan is located along the north - eastern coast of Puerto Rico. It lies south of the Atlantic Ocean; north of Caguas and Trujillo Alto; east of and Guaynabo; and west of Carolina. The city occupies an area of 76.93 square miles (199.2 km), of which, \n\ncity occupies an area of 76.93 square miles (199.2 km), of which, 29.11 square miles (75.4 km) (37.83%) is water. San Juan's main water bodies are San Juan Bay and two natural lagoons, the Condado and San José. \n\nLocal associations of a special kind are an amalgamation of one or more Landkreise with one or more Kreisfreie Städte to form a replacement of the aforementioned administrative entities at the district level. They are intended to implement simplification of administration at that level. Typically, a district-free city or town and its urban hinterland are grouped \n\nadministration at that level. Typically, a district-free city or town and its urban hinterland are grouped into such an association, or Kommunalverband besonderer Art. Such an organization requires the issuing of special laws by the governing state, since they are not covered by the normal administrative structure of the respective states. \n\nNorfolk Island is located in the South Pacific Ocean, east of the Australian mainland. Norfolk Island is the main island of the island group the territory encompasses and is located at 29°02′S 167°57′E﻿ / ﻿29.033°S 167.950°E﻿ / -29.033; \n\n/ ﻿29.033°S 167.950°E﻿ / -29.033; 167.950. It has an area of 34.6 square kilometres (13.4 sq mi), with no large-scale internal bodies of water and 32 km (20 mi) of coastline. The island's highest point is Mount Bates \n\nwater and 32 km (20 mi) of coastline. The island's highest point is Mount Bates (319 metres (1,047 feet) above sea level), located in the northwest quadrant of the island. The majority of the terrain is suitable for farming and other agricultural uses. Phillip Island, the second largest island of the territory, is located at \n\nfarming and other agricultural uses. Phillip Island, the second largest island of the territory, is located at 29°07′S 167°57′E﻿ / ﻿29.117°S 167.950°E﻿ / -29.117; 167.950, seven kilometres (4.3 miles) south of the main \n\n167.950, seven kilometres (4.3 miles) south of the main island. \n\nPerm (;) is a city and the administrative centre of Perm Krai, Russia, located on the banks of the Kama River in the European part of Russia near the Ural Mountains. \n\nStar (Zvezda) Stadium (), until 1991 Lenin Komsomol Stadium (), is a multi-use stadium in Perm, Russia. It is currently used mostly for football matches and is the home ground of FC Amkar Perm. The stadium holds 17,000 people and was opened on June 5, 1969. \n\nPaea is a commune in the suburbs of Papeete in French Polynesia, an overseas territory of France in the southern Pacific Ocean. Paea is located on the island of Tahiti, in the administrative subdivision of the Windward Islands, themselves part of the Society Islands. At the 2017 census it had a population of \n\nIslands, themselves part of the Society Islands. At the 2017 census it had a population of 13,021. \n\nPotamogeton amplifolius, commonly known as largeleaf pondweed or broad-leaved pondweed, is an aquatic plant of North America. It grows in water bodies such as lakes, ponds, and rivers, often in deep water. \n\nBiysky District () is an administrative and municipal district (raion), one of the fifty-nine in Altai Krai, Russia. It is located in the east of the krai and borders with Zonalny, Tselinny, Soltonsky, Krasnogorsky, Sovetsky, and Smolensky \n\nSoltonsky, Krasnogorsky, Sovetsky, and Smolensky Districts, as well as with the territory of the City of Biysk. The area of the district is . Its administrative center is the city of Biysk (which is not administratively a part of the district). District's population: \n\nContoocook Lake () is a water body located in Cheshire County in southwestern New Hampshire, United States, in the towns of Jaffrey and Rindge. The lake, along with Pool Pond, forms the headwaters of the Contoocook River, which flows north to the Merrimack River in Penacook, New \n\nRiver, which flows north to the Merrimack River in Penacook, New Hampshire. \n\nBogotá (/ ˈboʊɡətɑː /, / ˌbɒɡəˈtɑː /, / ˌboʊ - /; Spanish pronunciation: (boɣoˈta) (listen)), officially Bogotá, \n\nSpanish pronunciation: (boɣoˈta) (listen)), officially Bogotá, Distrito Capital, abbreviated Bogotá, D.C., and formerly known as Santafé de Bogotá between 1991 and 2000, is the capital and largest city of Colombia, administered as the Capital District, although often thought \n\nis the capital and largest city of Colombia, administered as the Capital District, although often thought of as part of Cundinamarca. Bogotá is a territorial entity of the first order, with the same administrative status as the departments of Colombia. It is the political, economic, administrative, industrial, artistic, cultural, and sports center of \n\nIt is the political, economic, administrative, industrial, artistic, cultural, and sports center of the country. \n\nIntracellular fluid (2 / 3 of body water) is fluid contained within cells. In a 72 - kg body containing 40 litres of fluid, about 25 litres is intracellular, which amounts to 62.5%. Jackson's texts states 70% of body fluid is intracellular. \n\nTerritorial waters or a territorial sea, as defined by the 1982 United Nations Convention on the Law of the Sea, is a belt of coastal waters extending at most 12 nautical miles (22.2 km; 13.8 mi) from the baseline (usually the mean low - water mark) of a coastal state. The \n\nmi) from the baseline (usually the mean low - water mark) of a coastal state. The territorial sea is regarded as the sovereign territory of the state, although foreign ships (civilian) are allowed innocent passage through it, or transit passage for straits; this sovereignty also extends to the airspace over and seabed below. Adjustment of these boundaries \n\nstraits; this sovereignty also extends to the airspace over and seabed below. Adjustment of these boundaries is called, in international law, maritime delimitation. \n\nCyprus Popular Bank (from 2006 to 2011 known as Marfin Popular Bank) was the second largest banking group in Cyprus behind the Bank of Cyprus until it was 'shuttered' in March 2013 and split into two parts. The 'good' Cypriot part was merged into the Bank of Cyprus (including insured \n\nparts. The 'good' Cypriot part was merged into the Bank of Cyprus (including insured deposits under 100,000 Euro) and the 'bad' part or legacy entity holds all the overseas operations as well as uninsured deposits above 100,000 Euro, old shares and bonds. The uninsured depositors were subject to a bail-in and \n\nEuro, old shares and bonds. The uninsured depositors were subject to a bail-in and became the new shareholders of the legacy entity. As at May 2017, the legacy entity is one of the largest shareholders of Bank of Cyprus with 4.8% but does not hold a board seat. All the overseas operations, of the now \n\nbut does not hold a board seat. All the overseas operations, of the now defunct Cyprus Popular Bank, are also held by the legacy entity, until they are sold by the Special Administrator, at first Ms Andri Antoniadou, who ran the legacy entity for two years, from March 2013 until 3 March 2015. \n\nthe legacy entity for two years, from March 2013 until 3 March 2015. She tendered her resignation due to disagreements, with the Governor of the Central Bank of Cyprus and the Central Bank Board members, who amended the lawyers of the legacy entity, without consulting her. Veteran banker Chris Pavlou who is an expert in Treasury \n\nthe legacy entity, without consulting her. Veteran banker Chris Pavlou who is an expert in Treasury and risk management took over as Special Administrator of the legacy entity in April 2015 until December 2016. The legacy entity is pursuing legal action against former major shareholder Marfin Investment Group. \n\n\n\n\nchat_model_adv = ChatAnthropic(model_name=\"claude-3-opus-20240229\")\nanswer_pipe = combined_template | chat_model_adv | output_parser\n\nevidence = str(list({**node_hist_dict, **edge_hist_dict}.values()))\nquestion = lines[-2]['question']\nans_adv = answer_pipe.invoke({'question': question, 'evidence': evidence})\n\n\nquestion, ans_adv, lines[-2]['answer']\n\n('What is the body of water by the city where Zvezda stadium is located?',\n Answer(answerable=False, answer='The nodes and edges provided do not contain any relevant information to determine what body of water the city where Zvezda stadium is located is by.', support_idxs=[]),\n 'Kama River')"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three",
    "section": "",
    "text": "On the last episode of: Don’t RAG on Knowledge Graphs(Or Do): Finally Building a Knowledge Graph – Part Two:"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html#embeddings",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html#embeddings",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three",
    "section": "2.1 Embeddings",
    "text": "2.1 Embeddings\nAn embedding, in our current context, is a vector representation of some text. Texts that are semantically similar will have a similar embedding vector. “Fido jumped into the river” is similar to “The lake looks peaceful.” due to the semantic similarity of lake and river; both are bodies of water . More on that later.\nChroma integrates a few embedding models, from which we’ll choose the default, which is based on Sentence Transformers(all-MiniLM-L6-v2).\n\n\nfrom chromadb.utils import embedding_functions\n\nef = embedding_functions.DefaultEmbeddingFunction()\n\n\nNow that we’ve instantiated the embedding function, lets give it a whirl.\n\n\n\n\n\n\nIf you’re running the embedding function for the first time, it’ll download the small model for you(only about 80MB)\n\n\n\n\n\n\n\n\n\nef('sup')\n\n[[-0.08815008401870728,\n  0.0389120951294899,\n  -0.06267453730106354,\n  0.025976944714784622,\n  0.021272214129567146,\n  0.036165427416563034,\n  0.06472509354352951,\n  0.03273024782538414,\n  -0.022812241688370705,\n  0.03426264598965645,\n  -0.011476818472146988,\n  -0.0558527335524559,\n  0.0752527117729187,\n  0.02892010472714901,\n  -0.012184866704046726,\n  -0.06143530085682869,\n  0.057932790368795395,\n  -0.02354748174548149,\n  -0.037457771599292755,\n  0.007783312350511551,\n  -0.043894387781620026,\n  -0.0005846268613822758,\n  -0.05005178228020668,\n  0.05256332457065582,\n  0.041017238050699234,\n  0.027247676625847816,\n  -0.007769174408167601,\n  0.006663127336651087,\n  -0.0582849495112896,\n  -0.058276500552892685,\n  -0.008283257484436035,\n  0.011540266685187817,\n  0.09883619099855423,\n  0.014246460050344467,\n  0.021976888179779053,\n  -0.042441871017217636,\n  0.01698663830757141,\n  0.05459064990282059,\n  0.027719488367438316,\n  0.040375471115112305,\n  -0.07192573696374893,\n  -0.0697317123413086,\n  -0.007513706106692553,\n  0.040573637932538986,\n  0.031709592789411545,\n  0.020085664466023445,\n  -0.024455910548567772,\n  0.021748993545770645,\n  0.021665506064891815,\n  -0.0782397910952568,\n  0.012301645241677761,\n  -0.07262903451919556,\n  0.0020467431750148535,\n  -0.007664070930331945,\n  -0.0009409540216438472,\n  0.02634112909436226,\n  -0.017131712287664413,\n  -0.04711078107357025,\n  -0.03610646724700928,\n  -0.08455827087163925,\n  0.018454650416970253,\n  -0.09647984802722931,\n  -0.06264247000217438,\n  0.04708629846572876,\n  0.010321928188204765,\n  0.10852538794279099,\n  -0.017284022644162178,\n  0.02371356077492237,\n  0.004756816662847996,\n  0.05711206793785095,\n  -0.0002290358825121075,\n  0.041850537061691284,\n  -0.08036033064126968,\n  0.05354780703783035,\n  -0.011950146406888962,\n  0.03304034471511841,\n  0.04630657285451889,\n  -0.01785254292190075,\n  0.11931655555963516,\n  -0.008362460881471634,\n  0.004671791102737188,\n  -0.005780027247965336,\n  -0.06775062531232834,\n  0.009449469856917858,\n  0.023738745599985123,\n  0.011783314868807793,\n  -0.06681878864765167,\n  -0.027939554303884506,\n  0.006354610435664654,\n  0.05730771645903587,\n  -0.0838579311966896,\n  -0.08851093053817749,\n  0.08038954436779022,\n  -0.02845342643558979,\n  -0.047472529113292694,\n  -0.07104448974132538,\n  -0.002936464035883546,\n  0.015265177004039288,\n  -0.08989954739809036,\n  0.2169521003961563,\n  0.03967348858714104,\n  0.05828956514596939,\n  0.04222771152853966,\n  0.0014037664514034986,\n  -0.008869979530572891,\n  -0.004865588154643774,\n  -0.07116992026567459,\n  -0.006799907423555851,\n  -0.021581022068858147,\n  -0.009085524827241898,\n  -0.04695131257176399,\n  -0.03597227856516838,\n  0.04183044284582138,\n  -0.025456368923187256,\n  0.044091127812862396,\n  0.017077835276722908,\n  0.008213749155402184,\n  0.011404010467231274,\n  0.018198302015662193,\n  -0.027580946683883667,\n  0.03153375908732414,\n  0.023579945787787437,\n  -0.048822250217199326,\n  0.02161264233291149,\n  -0.017332669347524643,\n  -0.08839226514101028,\n  0.016617678105831146,\n  -4.6542501285938574e-33,\n  -0.05196730047464371,\n  -0.021989643573760986,\n  -0.029618987813591957,\n  0.04105169698596001,\n  -0.001578746596351266,\n  0.009363578632473946,\n  9.751021570991725e-05,\n  0.01197210792452097,\n  -0.034649863839149475,\n  0.08685518056154251,\n  -0.12436547130346298,\n  -0.003243502229452133,\n  -0.002412007190287113,\n  0.005630753934383392,\n  0.03797269985079765,\n  0.06566265970468521,\n  0.055325284600257874,\n  -0.0033867782913148403,\n  0.011790132150053978,\n  0.01466473750770092,\n  -0.044716041535139084,\n  0.04668736830353737,\n  -0.014505395665764809,\n  0.01251885388046503,\n  0.012130805291235447,\n  -0.0644056648015976,\n  0.06459583342075348,\n  -0.04979125037789345,\n  -0.013997192494571209,\n  0.021896356716752052,\n  0.01764928363263607,\n  0.05214817821979523,\n  -0.010583145543932915,\n  -0.003208221634849906,\n  -0.009506486356258392,\n  0.010158931836485863,\n  0.07064365595579147,\n  -0.03242914006114006,\n  0.00295675708912313,\n  0.013653669506311417,\n  0.04893507435917854,\n  -0.005207119043916464,\n  -0.037282273173332214,\n  0.020390242338180542,\n  0.02464980259537697,\n  0.13883742690086365,\n  -0.01673075370490551,\n  0.042279619723558426,\n  0.022591179236769676,\n  0.044542353600263596,\n  -0.01938001625239849,\n  -0.017139442265033722,\n  -0.0965004563331604,\n  0.07410972565412521,\n  -0.016040310263633728,\n  0.027394499629735947,\n  0.037999849766492844,\n  -0.12169472128152847,\n  -0.020582005381584167,\n  0.00526941055431962,\n  -0.024848125874996185,\n  0.027975235134363174,\n  0.0037561592180281878,\n  -0.047139592468738556,\n  -0.018269620835781097,\n  -0.01704198122024536,\n  -0.0066906544379889965,\n  0.009610410779714584,\n  0.018008427694439888,\n  -0.029211603105068207,\n  -0.09012635052204132,\n  0.04693446308374405,\n  0.1192922294139862,\n  -0.010401724837720394,\n  -0.02767297811806202,\n  -0.026894785463809967,\n  0.0003243408282287419,\n  0.0372999832034111,\n  0.10321266204118729,\n  0.06125738471746445,\n  -0.030062777921557426,\n  -0.024563796818256378,\n  -0.04380808770656586,\n  -0.017787475138902664,\n  0.06220285966992378,\n  -0.06743179261684418,\n  -0.021958552300930023,\n  -0.08504771441221237,\n  0.02000092715024948,\n  -0.07109654694795609,\n  -0.07193907350301743,\n  0.007110072765499353,\n  0.022553864866495132,\n  0.07761543989181519,\n  -0.0371822714805603,\n  3.57144056859803e-33,\n  -0.12020888924598694,\n  0.013511578552424908,\n  -0.0289490707218647,\n  0.11010584235191345,\n  0.01200167741626501,\n  0.028086191043257713,\n  0.011599362827837467,\n  0.07943497598171234,\n  -0.0704106017947197,\n  0.0671350285410881,\n  0.0107227498665452,\n  0.018502017483115196,\n  5.1427494327072054e-05,\n  0.008013452403247356,\n  -0.07282835990190506,\n  0.023772109299898148,\n  0.037625912576913834,\n  -0.04462224245071411,\n  -0.01509601715952158,\n  -0.042705561965703964,\n  -0.07307127118110657,\n  0.040167830884456635,\n  0.030199574306607246,\n  0.06414608657360077,\n  -0.040885623544454575,\n  0.03525718301534653,\n  -0.0314037948846817,\n  0.058473147451877594,\n  -0.016143586486577988,\n  0.06214723363518715,\n  0.0829816684126854,\n  -0.05530810356140137,\n  -0.06572870165109634,\n  -0.010672389529645443,\n  -0.013648229651153088,\n  0.09427978098392487,\n  0.02804470807313919,\n  0.05287085473537445,\n  -0.03369517996907234,\n  -0.03602980077266693,\n  0.06818007677793503,\n  0.034106336534023285,\n  0.019399693235754967,\n  0.13262902200222015,\n  0.008388478308916092,\n  -0.012109436094760895,\n  -0.039171162992715836,\n  0.04033154994249344,\n  0.07947935163974762,\n  -0.041443053632974625,\n  -0.08641794323921204,\n  -0.030400192365050316,\n  -0.1173543781042099,\n  0.01031400915235281,\n  -0.0023436383344233036,\n  0.01253805123269558,\n  -0.011449051089584827,\n  0.014291658997535706,\n  -0.06617258489131927,\n  -0.062245313078165054,\n  0.016467729583382607,\n  -0.021559713408350945,\n  -0.12505009770393372,\n  0.026197155937552452,\n  0.03813409060239792,\n  0.02372247911989689,\n  -0.05612555146217346,\n  -0.06524056941270828,\n  0.06582044064998627,\n  -0.03490298241376877,\n  0.1096431165933609,\n  -0.03801364451646805,\n  -0.10172274708747864,\n  0.02089136838912964,\n  -0.030176719650626183,\n  -0.042703595012426376,\n  -0.09114976972341537,\n  0.04517712444067001,\n  0.023939063772559166,\n  -0.09658173471689224,\n  -0.04929523169994354,\n  -0.03724968805909157,\n  0.008202498778700829,\n  -0.022094616666436195,\n  -0.018428556621074677,\n  -0.005160237662494183,\n  0.048229608684778214,\n  0.027110382914543152,\n  0.007152666803449392,\n  0.005330891814082861,\n  -0.0068723480217158794,\n  0.0018026132602244616,\n  0.08163446187973022,\n  -0.024795232340693474,\n  0.010881287977099419,\n  -1.4566762018830559e-08,\n  -0.004322580993175507,\n  0.04305461049079895,\n  -0.010600777342915535,\n  0.0520879402756691,\n  0.01802789233624935,\n  0.06296617537736893,\n  -0.08677810430526733,\n  0.05512265861034393,\n  0.08509743213653564,\n  -0.020693860948085785,\n  0.025800291448831558,\n  0.019232159480452538,\n  0.03931315243244171,\n  0.003466429654508829,\n  0.09492921084165573,\n  -0.11571865528821945,\n  -0.027029260993003845,\n  0.10171782970428467,\n  -0.03151828050613403,\n  -0.020022252574563026,\n  0.047960057854652405,\n  0.025010110810399055,\n  -0.015095007605850697,\n  -0.03136930614709854,\n  -0.003722142893821001,\n  0.023892076686024666,\n  -0.07897274196147919,\n  0.04714563861489296,\n  0.059783853590488434,\n  0.029727943241596222,\n  0.030625857412815094,\n  -0.03413188084959984,\n  -0.044605743139982224,\n  0.024206150323152542,\n  -0.0047183409333229065,\n  -0.09526648372411728,\n  -0.0770496353507042,\n  -0.023633528500795364,\n  0.09743858128786087,\n  0.023828059434890747,\n  -0.06587085127830505,\n  -0.01218477264046669,\n  0.03613143786787987,\n  0.025722352787852287,\n  -0.0845530703663826,\n  0.004904137924313545,\n  0.02101745456457138,\n  0.0778331533074379,\n  0.008732018992304802,\n  -0.02525472640991211,\n  -0.019046053290367126,\n  -0.062338367104530334,\n  0.011163970455527306,\n  0.051886264234781265,\n  0.14340852200984955,\n  -0.031872380524873734,\n  0.08313193172216415,\n  0.008561764843761921,\n  -0.0066390009596943855,\n  0.05894242599606514,\n  0.17481203377246857,\n  0.024079544469714165,\n  0.06344451010227203,\n  0.02097688615322113],\n [-0.04983491450548172,\n  0.047410059720277786,\n  0.02075684443116188,\n  0.0036884364672005177,\n  0.029070785269141197,\n  -0.06910350918769836,\n  0.08781661838293076,\n  0.033720798790454865,\n  -0.016201989725232124,\n  -0.04258463904261589,\n  -0.05077064782381058,\n  -0.053096938878297806,\n  0.010030844248831272,\n  0.012911750003695488,\n  -0.012379195541143417,\n  0.019358906894922256,\n  -0.043964337557554245,\n  0.0069747064262628555,\n  -0.12316861003637314,\n  -0.03856316953897476,\n  -0.059056028723716736,\n  0.06396914273500443,\n  -0.020070277154445648,\n  0.006908354815095663,\n  -0.006557208485901356,\n  -0.0001876982132671401,\n  0.02345268242061138,\n  0.05240260809659958,\n  0.0265529602766037,\n  -0.07057984918355942,\n  0.018865060061216354,\n  0.020978499203920364,\n  0.041112422943115234,\n  -0.028897671028971672,\n  0.017154252156615257,\n  -0.07860083878040314,\n  -0.002234338317066431,\n  -0.09510375559329987,\n  0.03294316679239273,\n  -0.009585811756551266,\n  0.0640038251876831,\n  -0.054985951632261276,\n  0.06381730735301971,\n  0.08698870241641998,\n  0.10791453719139099,\n  -0.018108127638697624,\n  -0.00902014970779419,\n  -0.03244858980178833,\n  -0.02320343442261219,\n  0.005078401416540146,\n  0.04470254108309746,\n  0.03359563276171684,\n  0.04604236036539078,\n  -0.054577603936195374,\n  0.04181097820401192,\n  0.04240523278713226,\n  -0.04973261058330536,\n  0.05762714892625809,\n  0.03101509064435959,\n  -0.055506374686956406,\n  -0.024889405816793442,\n  -0.009903420694172382,\n  -0.10245583951473236,\n  0.01849268190562725,\n  0.09669843316078186,\n  0.07571932673454285,\n  -0.011814001947641373,\n  0.008919758722186089,\n  0.003123517381027341,\n  -0.024138275533914566,\n  0.015244080685079098,\n  -0.024572260677814484,\n  -0.07963927090167999,\n  -0.04529915004968643,\n  0.013277383521199226,\n  0.0034561562351882458,\n  0.06617144495248795,\n  -0.03489890694618225,\n  0.054232001304626465,\n  0.049301907420158386,\n  0.032285790890455246,\n  -0.023837726563215256,\n  -0.03968697786331177,\n  -0.010161404497921467,\n  -0.03578844293951988,\n  -0.01881159096956253,\n  0.022683821618556976,\n  0.0351443849503994,\n  -0.0010485335951671004,\n  0.043829578906297684,\n  0.0006098029552958906,\n  -0.0550968274474144,\n  0.034580301493406296,\n  -0.020073121413588524,\n  -0.08755818754434586,\n  -0.03540779650211334,\n  0.011154117062687874,\n  -0.0520784854888916,\n  -0.15004262328147888,\n  0.2681502103805542,\n  0.030406050384044647,\n  0.026617038995027542,\n  0.05415184050798416,\n  0.018776625394821167,\n  0.042038992047309875,\n  0.01726127415895462,\n  -0.03079761378467083,\n  -0.002363220788538456,\n  -0.012735975906252861,\n  -0.024430427700281143,\n  -0.024994466453790665,\n  -0.012831549160182476,\n  -0.10614868998527527,\n  -0.0018657597247511148,\n  -0.014149500988423824,\n  0.03079080954194069,\n  0.07474779337644577,\n  -0.018895870074629784,\n  0.029106391593813896,\n  -0.08749617636203766,\n  -0.05088314041495323,\n  0.025541841983795166,\n  -0.05021941289305687,\n  0.0480412095785141,\n  0.01865716092288494,\n  -0.09822224825620651,\n  0.05018414929509163,\n  -1.4838867631284532e-33,\n  0.03884870931506157,\n  -0.025667142122983932,\n  0.02762446179986,\n  -0.04209671914577484,\n  0.04037243872880936,\n  0.06572036445140839,\n  0.007036568131297827,\n  -0.05030665919184685,\n  -0.06949353963136673,\n  -0.001430327189154923,\n  0.0025782908778637648,\n  0.01627175323665142,\n  -0.019736241549253464,\n  0.13940340280532837,\n  0.11830995231866837,\n  0.03684194013476372,\n  0.09667646884918213,\n  0.035070668905973434,\n  0.0030133521649986506,\n  -0.02321743220090866,\n  0.019989095628261566,\n  0.04470452293753624,\n  0.0468166321516037,\n  -0.023899244144558907,\n  -0.021024813875555992,\n  -0.02398647367954254,\n  -0.026457354426383972,\n  -0.05276739224791527,\n  0.00587608153000474,\n  0.03353196382522583,\n  -0.007357672322541475,\n  0.07106026262044907,\n  -0.050913695245981216,\n  -0.014338360168039799,\n  -0.020886778831481934,\n  -0.05181949585676193,\n  0.031943611800670624,\n  -0.04700925573706627,\n  -0.02591674216091633,\n  0.03265475481748581,\n  -0.0022596963681280613,\n  0.0024534505791962147,\n  -0.06230804696679115,\n  0.014108811505138874,\n  0.044037144631147385,\n  0.07213321328163147,\n  0.06292419135570526,\n  0.054413922131061554,\n  -0.03602677211165428,\n  -0.012107857502996922,\n  0.0008751358254812658,\n  0.01607143133878708,\n  -0.10015927255153656,\n  -0.01413557305932045,\n  -0.05868290737271309,\n  -0.02065744437277317,\n  0.003992758225649595,\n  -0.027841778472065926,\n  0.029690319672226906,\n  -0.014045015908777714,\n  0.012597735971212387,\n  0.08387438952922821,\n  0.025408174842596054,\n  -0.02001335471868515,\n  -0.1182464063167572,\n  -0.07764327526092529,\n  0.023960299789905548,\n  -0.015867924317717552,\n  0.05507713183760643,\n  -0.02569189853966236,\n  -0.007574737071990967,\n  0.026194175705313683,\n  0.08373300731182098,\n  0.005349453072994947,\n  0.0318538062274456,\n  -0.03233488276600838,\n  0.017826825380325317,\n  0.04583629220724106,\n  -0.005807076580822468,\n  -0.0661909282207489,\n  0.00222235219553113,\n  -0.014013771899044514,\n  -0.027658652514219284,\n  0.013542433269321918,\n  0.04124703258275986,\n  -0.0021795800421386957,\n  -0.022596431896090508,\n  -0.04924686625599861,\n  -0.020406177267432213,\n  -0.014784698374569416,\n  -0.027839312329888344,\n  0.035210106521844864,\n  0.04620129242539406,\n  0.03757832199335098,\n  0.060697849839925766,\n  3.0536386131386742e-34,\n  0.08456361293792725,\n  0.08147523552179337,\n  -0.03336191549897194,\n  0.05588332191109657,\n  -0.02144193835556507,\n  0.031138231977820396,\n  0.02581152506172657,\n  0.036460887640714645,\n  0.016490254551172256,\n  0.039796460419893265,\n  0.021281400695443153,\n  -0.09978808462619781,\n  0.004475805442780256,\n  -0.035769592970609665,\n  0.04402599483728409,\n  0.05466220900416374,\n  0.10019738972187042,\n  0.06424931436777115,\n  -0.0407014936208725,\n  0.03219299763441086,\n  -0.0424066036939621,\n  -0.017641497775912285,\n  -0.04640892148017883,\n  -0.06045156344771385,\n  0.020258430391550064,\n  0.033182986080646515,\n  0.07075486332178116,\n  0.040032193064689636,\n  0.009616355411708355,\n  0.008757013827562332,\n  0.10673677921295166,\n  -0.008585454896092415,\n  -0.15125617384910583,\n  0.004044604022055864,\n  0.05798352137207985,\n  0.09982240200042725,\n  -0.054999690502882004,\n  7.34408968128264e-05,\n  0.10417070239782333,\n  -0.08970246464014053,\n  -0.0010847192024812102,\n  0.0041154432110488415,\n  0.03306804969906807,\n  0.06667356193065643,\n  0.001998799853026867,\n  -0.07468786090612411,\n  0.001044120523147285,\n  -0.04047010466456413,\n  -0.11857438087463379,\n  0.03889648988842964,\n  -0.06465069204568863,\n  -0.04404180869460106,\n  0.004789887927472591,\n  -0.009365632198750973,\n  -0.05295458436012268,\n  0.04391732066869736,\n  0.003941838163882494,\n  0.010463234037160873,\n  0.07796397805213928,\n  0.0043679894879460335,\n  -0.012168857268989086,\n  0.0563892163336277,\n  -0.032958246767520905,\n  0.03640003502368927,\n  -0.09901245683431625,\n  0.013477855361998081,\n  0.032833945006132126,\n  0.008632335811853409,\n  -0.015237522311508656,\n  -0.045996278524398804,\n  0.04744485393166542,\n  -0.07848397642374039,\n  -0.16673746705055237,\n  -0.0009817220270633698,\n  0.018159205093979836,\n  0.0026159381959587336,\n  -0.007587607018649578,\n  0.001863642712123692,\n  -0.0036697215400636196,\n  -0.015728477388620377,\n  -0.026224736124277115,\n  -0.016035711392760277,\n  0.03500324487686157,\n  0.031706396490335464,\n  -0.04410845413804054,\n  -0.014305949211120605,\n  0.06842508912086487,\n  0.038970187306404114,\n  -0.02548116073012352,\n  -0.0811067596077919,\n  -0.03804240748286247,\n  0.0904158502817154,\n  0.08024118095636368,\n  -0.051469288766384125,\n  0.006724147591739893,\n  -1.4127249592377211e-08,\n  -0.020074211061000824,\n  -0.011974949389696121,\n  0.02793658711016178,\n  0.01786523126065731,\n  0.03110302984714508,\n  0.06413517892360687,\n  -0.023988382890820503,\n  -0.02752196229994297,\n  -0.0033636605367064476,\n  0.018158163875341415,\n  0.12096750736236572,\n  -0.008486862294375896,\n  0.003321684431284666,\n  -0.05455714836716652,\n  0.044992756098508835,\n  -0.0405462272465229,\n  -0.03711879998445511,\n  0.010892139747738838,\n  0.010922703891992569,\n  -0.10120225697755814,\n  0.015770189464092255,\n  0.049801792949438095,\n  -0.09360873699188232,\n  -0.08038635551929474,\n  -0.043886736035346985,\n  0.028670772910118103,\n  0.007357894442975521,\n  0.06992929428815842,\n  0.03247477114200592,\n  0.023066222667694092,\n  -0.003743191948160529,\n  0.03887111693620682,\n  -0.013057591393589973,\n  -0.023052601143717766,\n  0.0647343099117279,\n  -0.02109169401228428,\n  -0.045990969985723495,\n  -0.0717756599187851,\n  0.016904039308428764,\n  0.07475024461746216,\n  -0.03764820471405983,\n  0.007682626601308584,\n  -0.041594963520765305,\n  0.03814854100346565,\n  -0.0941794365644455,\n  0.011091839522123337,\n  -0.05915017053484917,\n  -0.031279437243938446,\n  -0.033687345683574677,\n  -0.030321571975946426,\n  -0.009191246703267097,\n  -0.032031286507844925,\n  0.019655127078294754,\n  0.09318964183330536,\n  0.07215450704097748,\n  -0.027178803458809853,\n  -0.02098594605922699,\n  -0.0187591090798378,\n  0.02367139235138893,\n  -0.021888094022870064,\n  0.19160978496074677,\n  0.0034248465672135353,\n  -0.016104642301797867,\n  -0.0016335448017343879],\n [-0.047706857323646545,\n  0.029799047857522964,\n  -0.029307443648576736,\n  -0.028761692345142365,\n  -0.049182552844285965,\n  -0.04869556427001953,\n  0.11003480106592178,\n  0.029769031330943108,\n  -0.006188513245433569,\n  0.05534925311803818,\n  0.0204521082341671,\n  -0.05075625330209732,\n  0.017509188503026962,\n  0.008488249965012074,\n  -0.04395948350429535,\n  0.043411411345005035,\n  -0.02037900686264038,\n  -0.029790835455060005,\n  0.044171810150146484,\n  0.04676878824830055,\n  -0.06464889645576477,\n  0.07507970184087753,\n  -0.011289148591458797,\n  -0.004592073615640402,\n  -0.015927044674754143,\n  -0.003337560687214136,\n  0.011098247952759266,\n  0.10217370092868805,\n  0.003518056822940707,\n  -0.00919096078723669,\n  0.017634805291891098,\n  0.13972388207912445,\n  0.05070934444665909,\n  -0.02783096209168434,\n  -0.0035908205900341272,\n  -0.017583072185516357,\n  -0.01819441467523575,\n  -0.0054838648065924644,\n  -0.022460605949163437,\n  -0.04451676085591316,\n  0.015791790559887886,\n  -0.052957527339458466,\n  0.005793462041765451,\n  0.008374476805329323,\n  0.03262092545628548,\n  0.018899861723184586,\n  -0.046665385365486145,\n  -0.035868432372808456,\n  -0.09819971024990082,\n  -0.07561742514371872,\n  -0.05793742090463638,\n  0.055713143199682236,\n  -0.00451300572603941,\n  -0.05914030969142914,\n  -0.04867144674062729,\n  -0.0016276733949780464,\n  -0.05643262341618538,\n  -0.01853669248521328,\n  -0.015230373479425907,\n  -0.046567272394895554,\n  -0.05330246686935425,\n  0.011304951272904873,\n  -0.11495313793420792,\n  0.10305533558130264,\n  0.05283502861857414,\n  0.035230714827775955,\n  0.016496378928422928,\n  0.06500715762376785,\n  0.005075459368526936,\n  0.05328008159995079,\n  -0.09429473429918289,\n  0.009930397383868694,\n  -0.06478379666805267,\n  -0.04124986752867699,\n  -0.05471572279930115,\n  -0.0025090426206588745,\n  0.03856153413653374,\n  -0.02158009260892868,\n  0.01686421036720276,\n  0.030112208798527718,\n  0.04350303113460541,\n  0.0060177212581038475,\n  -0.08983737975358963,\n  0.023844074457883835,\n  -0.0712917149066925,\n  0.040687259286642075,\n  0.02212377078831196,\n  -0.03225473314523697,\n  -0.09825507551431656,\n  -0.012814310379326344,\n  -0.05137163773179054,\n  -0.0508715882897377,\n  0.0356665775179863,\n  0.06474190205335617,\n  0.009078755974769592,\n  -0.004626876208931208,\n  -0.07715008407831192,\n  -0.026909487321972847,\n  -0.0634487047791481,\n  0.24540770053863525,\n  0.012282876297831535,\n  -0.01706986129283905,\n  -0.0012511075474321842,\n  0.09647370129823685,\n  -0.015949472784996033,\n  0.007039134856313467,\n  -0.014715258032083511,\n  0.07577571272850037,\n  0.03402278572320938,\n  0.016772856935858727,\n  0.0407135896384716,\n  -0.008325525559484959,\n  0.0016099949134513736,\n  -0.012871264480054379,\n  0.006253060884773731,\n  -0.006250512786209583,\n  -0.06602701544761658,\n  0.013166422955691814,\n  0.056004662066698074,\n  -0.005936720408499241,\n  0.02952989563345909,\n  0.04650561138987541,\n  0.05884496122598648,\n  0.013950488530099392,\n  -0.06323590874671936,\n  -0.10772714763879776,\n  0.09244363754987717,\n  -3.246199648824735e-33,\n  0.0029519363306462765,\n  0.006624347530305386,\n  -0.008346017450094223,\n  0.009051835164427757,\n  0.011032729409635067,\n  0.07775413244962692,\n  -0.030210910364985466,\n  -0.011178763583302498,\n  -0.046471260488033295,\n  -0.015059034340083599,\n  0.019916005432605743,\n  -0.031136564910411835,\n  -0.029937807470560074,\n  0.026371324434876442,\n  0.07905584573745728,\n  -0.013263785280287266,\n  0.05271025374531746,\n  0.011820263229310513,\n  0.023462682962417603,\n  -0.041535381227731705,\n  0.047901179641485214,\n  0.011175201274454594,\n  0.03211263194680214,\n  0.04854049161076546,\n  -0.05309046432375908,\n  0.019062289968132973,\n  -0.07798046618700027,\n  -0.051897455006837845,\n  -0.012413928285241127,\n  0.03742313012480736,\n  0.03230714052915573,\n  0.026786386966705322,\n  -0.027452530339360237,\n  0.03520464897155762,\n  -0.027697881683707237,\n  -0.10518944263458252,\n  0.04265424981713295,\n  -0.10761565715074539,\n  -0.050626687705516815,\n  -0.017929106950759888,\n  -0.022524379193782806,\n  -0.039096981287002563,\n  0.005315706599503756,\n  0.05732399597764015,\n  -0.04626333341002464,\n  0.1416749656200409,\n  -0.003580145537853241,\n  0.037116218358278275,\n  -0.006159882992506027,\n  0.0014393212040886283,\n  -0.05447343736886978,\n  0.04099242761731148,\n  -0.06244586408138275,\n  0.05919301509857178,\n  -0.030249932780861855,\n  -0.033237360417842865,\n  0.0049431296065449715,\n  -0.07026117295026779,\n  0.014024087227880955,\n  0.051771726459264755,\n  0.10352329909801483,\n  0.024088077247142792,\n  -0.03357868269085884,\n  -0.004287239629775286,\n  -0.01730150356888771,\n  -0.07488695532083511,\n  0.0003908060898538679,\n  0.027570074424147606,\n  -0.006252780091017485,\n  -0.011089310981333256,\n  0.0015536113642156124,\n  -0.01308933924883604,\n  0.1115591824054718,\n  -0.05212273821234703,\n  -0.0008197210845537484,\n  0.025414563715457916,\n  -0.0542709156870842,\n  0.06618258357048035,\n  0.03905229642987251,\n  -0.004908710718154907,\n  -0.013656924478709698,\n  -0.003472711890935898,\n  -0.06016167253255844,\n  0.09176601469516754,\n  0.04260535165667534,\n  0.014385431073606014,\n  0.027647485956549644,\n  -0.07417813688516617,\n  0.02283564582467079,\n  -0.01586580090224743,\n  -0.057338546961545944,\n  0.010580653324723244,\n  -0.005484357010573149,\n  -0.026165256276726723,\n  -0.008293806575238705,\n  2.464531537700423e-33,\n  0.03300580382347107,\n  -0.01715261861681938,\n  -0.03981883451342583,\n  0.12353211641311646,\n  -0.018451036885380745,\n  0.014379706233739853,\n  0.007427100092172623,\n  0.0691729485988617,\n  0.004493155516684055,\n  0.10061202198266983,\n  -0.05466959998011589,\n  -0.10337553918361664,\n  0.015087230131030083,\n  -0.02494097501039505,\n  -0.011892091482877731,\n  0.03944435715675354,\n  0.0327325202524662,\n  0.010209660977125168,\n  -0.09678077697753906,\n  0.05819498747587204,\n  -0.021728919818997383,\n  -0.0386483408510685,\n  0.000588937196880579,\n  0.03783798962831497,\n  -0.006611840333789587,\n  0.06505469977855682,\n  0.007079144939780235,\n  0.06694035977125168,\n  0.02415173314511776,\n  0.04724515601992607,\n  -0.006329400464892387,\n  0.009057571180164814,\n  -0.17014440894126892,\n  -0.09140679240226746,\n  0.017401646822690964,\n  0.014095580205321312,\n  -0.0787372812628746,\n  0.0340920127928257,\n  0.00824121292680502,\n  0.04303678125143051,\n  0.028128890320658684,\n  -0.013432754203677177,\n  0.037219978868961334,\n  0.08892519026994705,\n  0.012009781785309315,\n  -0.06090620532631874,\n  0.04102039709687233,\n  0.04714181274175644,\n  0.04708763211965561,\n  -0.007145935203880072,\n  -0.11487235873937607,\n  -0.0040723965503275394,\n  -0.07931794226169586,\n  -0.030520547181367874,\n  -0.09297792613506317,\n  0.09480515867471695,\n  0.020443223416805267,\n  0.028473814949393272,\n  0.00041346283978782594,\n  -0.02046920917928219,\n  -0.029133779928088188,\n  0.013769570738077164,\n  -0.021100269630551338,\n  0.0700802206993103,\n  -0.05099467560648918,\n  -0.029298126697540283,\n  -0.03564852848649025,\n  0.009335000067949295,\n  0.03160358965396881,\n  -0.025795651599764824,\n  0.07977144420146942,\n  0.07508014142513275,\n  -0.1043272390961647,\n  0.0448288656771183,\n  -0.050185561180114746,\n  -0.0022289904300123453,\n  -0.0046245078556239605,\n  0.07300306856632233,\n  0.07366469502449036,\n  -0.016212882474064827,\n  -0.033664144575595856,\n  -0.07147421687841415,\n  -0.02958005666732788,\n  -0.0550491102039814,\n  -0.010064290836453438,\n  -0.005727516021579504,\n  0.026934267953038216,\n  -0.03192150965332985,\n  0.019922709092497826,\n  -0.016294335946440697,\n  -0.019558662548661232,\n  0.05691475421190262,\n  0.11258960515260696,\n  -0.02651376836001873,\n  0.03533240407705307,\n  -1.4853220875465922e-08,\n  0.03286905214190483,\n  0.013584330677986145,\n  0.027436375617980957,\n  -0.020878814160823822,\n  0.10895758867263794,\n  -0.030983706936240196,\n  0.01623149774968624,\n  0.016538944095373154,\n  -0.04223388433456421,\n  -0.019880937412381172,\n  0.03786994889378548,\n  -0.012722354382276535,\n  0.051184702664613724,\n  0.06075378507375717,\n  0.027147572487592697,\n  -0.008108423091471195,\n  -0.013375341892242432,\n  0.06135622411966324,\n  -0.008997654542326927,\n  -0.0575055293738842,\n  -0.012919194996356964,\n  0.046400099992752075,\n  -0.02051331289112568,\n  0.09030464291572571,\n  -0.007730551529675722,\n  0.069735087454319,\n  -0.01826024241745472,\n  0.0924258679151535,\n  -0.00493173161521554,\n  -0.04797661304473877,\n  0.0553850494325161,\n  -0.023436525836586952,\n  -0.0447758287191391,\n  -0.014637939631938934,\n  0.00925927609205246,\n  0.040850620716810226,\n  -0.009064082987606525,\n  -0.006945107597857714,\n  -0.029200484976172447,\n  0.14852873980998993,\n  -0.04326893389225006,\n  -0.1545904129743576,\n  0.02772088348865509,\n  0.0037093476857990026,\n  -0.0880642905831337,\n  0.023423565551638603,\n  -0.05173948407173157,\n  -0.01798063889145851,\n  -0.0048668175004422665,\n  -0.02943151257932186,\n  -0.006786121055483818,\n  -0.0043993447907269,\n  0.0326085165143013,\n  0.04477005451917648,\n  0.07737607508897781,\n  0.035019759088754654,\n  0.03378671780228615,\n  0.019712766632437706,\n  -0.03159867227077484,\n  0.005404326599091291,\n  0.17780664563179016,\n  -0.037863682955503464,\n  -0.06350429356098175,\n  0.014291122555732727]]\n\n\n\n\nCool, looks like we’ve generated a vector representation for ‘sup’, right? Wrong.\n\n\nlen(ef('sup')), len(ef(['sup']))\n\n(3, 1)\n\n\n\nSup with that? Chroma tends to expect iterables(lists, tuples, etc) within its functions and methods, so when we pass a three character string, it treats it as an iterable and returns 3 embeddings – one for each letter, as seen above. So, as a word of caution, if you wish to pass in a single item, pass it in as a list of one."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html#distance-between-embeddings",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html#distance-between-embeddings",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three",
    "section": "2.2 Distance Between Embeddings",
    "text": "2.2 Distance Between Embeddings\n\nWhen you wish to find the similarity between two separate embeddings, such as the generated embedding of your query and a stored embedding in the vector database(see Fig. 1 Step 3), we need to use a distance function. In our case, we’ll use cosine distance. Related is the cosine similarity, which describes the similarity between two vectors. It is -1 if they are not at all related, and 1 if they are pointing in the exact same direction.\ncosine_distance = 1 - cosine_similarity so 0 represents a perfect relationship while 2 represents no relationship.\nPutting this into practice, lets compare nodes generated from the 0th paragraph(we use zero indexing in these here parts, pahtnah) to other nodes generated from the 0th paragraph, and then compare nodes generated from the first paragraph to nodes generated from the 19th paragraph\n\n\nfrom chromadb.utils.distance_functions import cosine\n\np0_list = []\np19_list = []\nfor v in graph_history.history.values():\n    if 'nodes' in v:\n        if (v['nodes']['paragraph_idx'] == 0):\n            p0_list.append(v['nodes'])\n        if v['nodes']['paragraph_idx'] == 19:\n            p19_list.append(v['nodes'])\n\nprint('paragraph 0 - paragraph 0 comparisons: ', cosine(ef([str(p0_list[0])])[0], ef([str(p0_list[1])])[0]), cosine(ef([str(p0_list[0])])[0], ef([str(p0_list[2])])[0]),\n      '\\nparagraph 1 - paragraph 19 comparisons: ', cosine(ef([str(p0_list[0])])[0], ef([str(p19_list[0])])[0]), cosine(ef([str(p0_list[0])])[0], ef([str(p19_list[1])])[0]))\n\nparagraph 0 - paragraph 0 comparisons:  0.22135839656360656 0.14691759339122346 \nparagraph 1 - paragraph 19 comparisons:  0.3139882121419234 0.2947411460832846\n\n\n\nLuckily, the values make my point for me. There is more similarity between the nodes generated from within a paragraph than between nodes generated from different paragraphs.\n\n\n\n\n\n\nFigure 2: Nodes originating from a paragraph are likely to be more similar than nodes generated from different paragraphs"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html#setting-up-our-db",
    "href": "technical_blog/knowledge-graph-rag-benchmark/knowledge-graph-rag-benchmark-3/index.html#setting-up-our-db",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: Adding a Vector Database – Part Three",
    "section": "2.3 Setting Up Our DB",
    "text": "2.3 Setting Up Our DB\nChroma uses collections as vector spaces which handle the storage of your vectors, their ids, and metadata.\n\n\nchroma_client = chromadb.Client()\n\ncollection = chroma_client.create_collection(\n    name='musique_benchmark',\n    embedding_function=ef,\n    metadata={\"hsnw:space\": \"cosine\"}\n    )\n\n\nWe just feed it a name – our benchmark, the embedding_function and the hsnw:space as the metadata, instructing the database which distance metric this collection should be optimized for."
  },
  {
    "objectID": "technical_blog/thinking-out-loud/llms-brains-reality/index.html",
    "href": "technical_blog/thinking-out-loud/llms-brains-reality/index.html",
    "title": "LLMs, Brains, Physical Reality. Can Large Language Models really lead to superintelligence?",
    "section": "",
    "text": "Despite much anticipation and even more fear, it pains me to say that LLMs will not be summoning the Machine God anytime soon.\n\nOrigins\nLanguage is a human creation. Whether it’s English, Latin, Aramaic, or even C++, language is created by humans – either artificially through intentionality, as in case of the programming language you know and love, or through the waterfall of time and our basic need to communicate with one another, we created the words, structures, and abstractions we utter daily. In any case, they are very sapiens constructs, necessarily bound to our capacity to understand and manipulate the world around us.\nWe are agentic beings tugged by evolution to survive and multiply. An agent that is reacting to its environment and acting upon it must have a model of the reality it inhabits. It doesn’t have to be a great model, hell, it doesn’t even have to be a good model. It has to be a satisfactory model that weighs an extraordinary number of trade offs. There is no free lunch, especially in an antagonistic universe that is doing everything in its power to feed its entropic addiction and tear you apart, atom by atom. We cannot afford to model the entire universe in our expensive brains, which at only 2% of our body mass consume 20% of our energy. Let’s take a step back for a second, or roughly half a billion years – brains made it to the scene via centralization and cephalization. Organisms initially had distributed nervous systems called nerve nets, which we see in hydras and jellyfish today. Neurons were simplistic logical gates where an activation would lead to a clear reaction of the organism - reflexive. As chance had it, as the nervous system migrated to the center of the organism over hundreds of millions of years, it became more effective at helping them respond to stimuli and thereby increased their fitness. Eventually, a very large cluster of neurons not only centralized but cephalized, it gathered at the anterior end of the body(think flatworms).\n\n\n\n\n\nNeurons in proximity have a world of opportunity to connect to one another in myriads of ways at an extremely low cost. Look, ma, a biological processor. Evolution accelerated in ways that many people don’t appreciate thanks to this one little trick – the sensation to action pipeline became the perfect experimentation bedrock now that the neurons could assemble in a nearly infinite amount of ways. The integration of signals from the sensory systems of the organism allowed it to model the world around it in a manner that was previously impossible. Much like our nematode friends, we integrate information from numerous modalities and model the world around us for the purpose of acting on it.\n\n\nLanguage\nNematodes don’t really have a way of expressing their internal model of the world, but we do. Even if they could, it’d be pretty damn boring. “Bright light, bad smell, pressure on tail, move right, profit” Although I’m fairly certain you’d rather be interacting with it than a few people you can think of. Language allows us to express our model of the world to other people for the purposes of cooperation, conflict avoidance, and informational exchange. Through the experimentation with phonation(making sounds) and the growth of our brains necessary to optimize our behavior in an uncertain environment, selective pressures precipitated the development of language. If Grog says “urrghhhhu” and Brog says “grruuuugh”, and they both now have a higher likelihood of finding a juicy antelope meal, the incentive to experiment with language grows in their own lifetimes. If Grog and Brog now have more children because of their linguistic prowess, this also contributes to an evolutionary process which supports linguistic development. Their progeny do not start off with a blank slate of knowledge; they learn from their parents, and improve upon it. This is known as Natural Language. The kids of Grog and Brog can now take the phonemes they learned from their parents and improve upon them for more complex needs – maybe they learn to represent the weather, or perhaps they learn how to represent the difference between hunting and foraging. In any case, this naturally creates a complex structure out of necessity.\n\n\n\n\n\nIf you look at fMRIs taken of people performing language-related tasks, the screen tends to light up like a Christmas tree. The brain is a very specialized organ with hyperspecialized regions within it, yet the task of language interpretation and generation is highly distributed, and quite calorie-consuming. Language is able to access the complex model we’ve created of our world. It is language that has allowed us to launch spaceships and to pontificate on the existence of dark matter. We are still the descendants of Grog and Brog, who used a form of language to thrive, and our brains aren’t morphologically different; we also still have the same incentives give or take an unremarkable error margin. Keep this in mind.\nThe progression of our linguistic prowess involves offloading it from our memory and onto some physical medium. In turn, this influenced its future development.\n\n\n\n\n\n\n\nLLMs\nLarge Language Models(LLMs) have shocked the very core of humanity. Diffusion models which are responsible for image and video generation have had a similar effect. As it turns out, when we create a clever neural architecture in silico(on computer), throw all of the data we have generated as a human species at it, and the compute/energy equivalent of running a nuclear reactor(1GWh) for 50 hours with the sole purpose of training the model, we create something so novel and uncanny that we begin singing songs of apocalypse and salvation.\n\n\n\n\n\nFor comparison, a human brain only requires ~0.0088 Gigwatt hours to run for a lifetime.\nLLMs are trained with a highly curated set of nearly all(contentiously) of the data digitally available: approximately 10 trillion words. Like humans, they develop a model of the world, but through a process that helps them predict the next token. A token is typically a group of letters that cooccur - e.g. moth + er, but it can also be something functional like &lt;|endoftext|&gt; which signifies the end of a response. In addition, they are also trained to answer questions in a manner that is favorable to the corporation building the model and to avoid outputting what they believe are naughty words and ideas – this concept is often viewed as alignment.\nAt its core, a model is a compressed and accessible form of the data it is trained on, otherwise, it wouldn’t be a very useful model. An input passes through the model to produce an output. We model the vast amounts of inputs we receive from our sensory organs and observations of cause and effect; this model is stored in our big beautiful brains. This creates a compressed latent space of information aligned in way that we can access to act upon the world we inhabit. Another compressive and decompressive process involves our decoding of this information and encoding it into words for the purposes of communicating.\n\n\n\n\n\nAn LLM is trained on this information that we’ve produced communicating with one another in casual and technical conversations in forums, through books, blogs, and so forth. While this is extremely lossy information of a human’s model of the world and thereby an even more lossy model of reality, it is composed of immensely wide and diverse sets of words used to express ideas throughout written history.\nNot surprisingly, it is a transcendental experience to speak to an LLM that contains an acceptable model of our world tuned to respond conversationally. It is a superb summarizer of text, and it holds a magnificent amount of information that it can access given the right prompt. It is a majestic wordsmith, as it operates across syntax and semantics incredibly well. Ask it to write you a song about a specific topic, and it’ll create something unique.\n\n\n\n\n\nWhat it lacks is pragmatics. Pragmatics involves attaching the relevance of situational context to human speech. An LLM does not act upon its theory of mind, which it does have access to – just ask it what a person may be motivated by when their dog just ate a box of chocolate, all while they’re struggling to pay rent. The information it has consumed over the huge corpus of data does contain descriptions of how we feel, how we act in relation to those feelings, and what situations create those motivations within us. I have not seen a single successful evaluation of it using this knowledge in any meaningful manner. LLMs excel at written exams, they even excel at programming, but they appear to have no capacity for metacognition. This is ultimately a key reason behind LLMs being referred to as stochastic parrots.\nStochastic parrots are incredible algorithms. They allow us to navigate and extract information in many forms from the entirety of written human knowledge. They do hallucinate, but that is but a technical challenge which is solved by grounding them in a system that can enforce factual consistency. A stochastic parrot serves you, as you imbue it with the pragmatics and purpose it needs. We are the ones who seed them with our own agency. We then refer to them as agents, which may arguably be a misnomer since the agency does not originate from these algorithms. A swarm of these agents directed to any given task is inevitably a multiplier of our productivity.\n\n\nStagnation?\nHuman achievement looks and feels asymptotic when you observe the amount of discoveries and innovations throughout the centuries. Even our capability to extend our own lifespan seems to be leveling out and in many cases, decreasing. I’m an optimist and I yearn for a gold rush of exponentiality, however I am also a realist. We have to acknowledge reality if we want to find a single nugget. I am not particularly fond of pessimists, nor do I respect them, as self-fulling prophecy sticks to them like shit to a pig.\n\n\n\n\n\nLLMs are inextricably tied to our own intelligence and our model of reality even if they know more facts than any single human alive. Language is already a product of our collective intelligence, and in many cases acts as a positive feedback loop where we use it enhance our own capacity through a series of stacking abstractions. These are the very abstractions that led us to build and exploit the elegance of LLMs in creative ways. However, the acquisition and use of language has always been heavily constrained and driven by the key aspects that pragmatics is concerned with – the need to solve problems, the need to communicate effectively towards a goal, the need to navigate the complexity of the world.\n\n\nHype\nDespite the incredible capabilities of LLMs, the hype surrounding artificial intelligence has led to a premature leap from the reality of these models. In a comedic sequence of events, the marketers of LLMs and the doomsayers have jumped over Artificial General Intelligence(AGI) straight to Artificial Superintelligence(ASI). ASI used to stand for Artificial Specialized Intelligence, but collective amnesia is one heck of a drug.\n\n\n\n\n\nCompanies like OpenAI and Anthropic throw a bit of preferential ‘function calling’ on their LLMs and like to underscore their agentic ability. In essence, they increase the likelihood of a model responding with a name of a function. It’s equivalent to you have access to func1: given x does y and func2: given y does b, now answer this question, choose one of these functions if necessary to get more information: ... Would you look at that, their valuation just went up by a few billion dollars. The near future likely belongs to Artificial Specialized Intelligence. I’m not necessarily referring to something like AlphaGo, which is able to beat the best human players at Go, although the same concept applies. We can and do create specialized tools with LLMs – humans have to imbue the system with intentionality, agency, and everything that the model inherently lacks due to its nature as a next-word-predictor.\nAs more compute and data are thrown at the models, they become more proficient when it comes scoring highly on evaluations. The evaluations themselves are created by humans to perform human-centric tasks such as passing various board exams and being able to program software. We shouldn’t expect out-of-distribution performance from the available model, but we can massage the latent space with our input in a way that leads to 99th percentile in-distribution performance.\n\n\nAnti-Hype\nTo recap the salient points:\n\nHumans, like all other organisms ingest and compress information about the world into a model for the sake of survival. This is an energetically expensive process and is focused on the elements that help the organism survive and reproduce.\nLanguage is another compressive and expensive process that we use to increase our biological fitness. We compress the model of the world we created for the purposes of communicating certain intents and ideas with others.\nLLMs are trained to predict the next token over trillions of tokens(and words). Through this, they gain their own compressed model of the world based on the aforementioned compressed models.\nLanguage is only a subset of human intelligence and excludes the pragmatics of human communication.\n\n(With LLMs) There will not be a singularity. There will be no Skynet. There will only be hype. Can a swarm of AI agents take your job? Probably. Give them a robot to control and they’ll take many, however, they’ll create even more. These AI ‘agents’ are not agentic in their own right - their agency is wound by humans. On their own, they are little more than Game of Life automata."
  }
]