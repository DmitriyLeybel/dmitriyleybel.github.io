[
  {
    "objectID": "technical_blog.html",
    "href": "technical_blog.html",
    "title": "Technical Blog",
    "section": "",
    "text": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero\n\n\n\n\n\n\nknowledge-graphs\n\n\nrag\n\n\nbenchmarking\n\n\n\nFoundational preamble to the benchmarking of knowledge graph-centric RAG flows\n\n\n\n\n\nApr 5, 2024\n\n\nDmitriy Leybel\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/musique_eda.html",
    "href": "notebooks/musique_eda.html",
    "title": "",
    "section": "",
    "text": "import jsonlines\n\njs_list = []\nwith jsonlines.open('data/musique_full_v1.0_dev.jsonl') as reader:\n    for i in range(5):\n        js_list.append(reader.read())\n\njs_list[0]\n\n{'id': '2hop__153573_109006',\n 'paragraphs': [{'idx': 0,\n   'title': 'History of the Internet',\n   'paragraph_text': \"Precursors to the web browser emerged in the form of hyperlinked applications during the mid and late 1980s (the bare concept of hyperlinking had by then existed for some decades). Following these, Tim Berners - Lee is credited with inventing the World Wide Web in 1989 and developing in 1990 both the first web server, and the first web browser, called WorldWideWeb (no spaces) and later renamed Nexus. Many others were soon developed, with Marc Andreessen's 1993 Mosaic (later Netscape), being particularly easy to use and install, and often credited with sparking the internet boom of the 1990s. Today, the major web browsers are Firefox, Internet Explorer, Google Chrome, Opera and Safari.\",\n   'is_supporting': False},\n  {'idx': 1,\n   'title': 'Ceville',\n   'paragraph_text': \"Ceville is a humorous graphic adventure video game developed by the German game studio Realmforge Studios and published by Kalypso Media. Despite the game's use of 3D environments and models, the gameplay is very true to the graphical point-and-click adventure tradition of gameplay, immortalized by game series like Monkey Island from LucasArts and the King's Quest series from Sierra Online.\",\n   'is_supporting': False},\n  {'idx': 2,\n   'title': 'Zipline Safari',\n   'paragraph_text': \"Zipline Safari is a zip-line course in Florida. It is the only zip-line course in the state, and is claimed to be the world's only zip-line created for flat land. Zipline Safari opened on 16 January 2009 in Forever Florida, a wildlife attraction near Holopaw, Florida. The zip-line cost $350,000 to build, and consists of nine platforms built up from the ground and traveled between by zip-lining. Forever Florida built the course to promote ecotourism and interaction with the natural environment of Florida.\",\n   'is_supporting': False},\n  {'idx': 3,\n   'title': 'Parc Safari',\n   'paragraph_text': \"Parc Safari is a zoo in Hemmingford, Quebec, Canada, and is one of the region's major tourist attractions; that has both African & Asian species of elephant.\",\n   'is_supporting': False},\n  {'idx': 4,\n   'title': 'The Reporter (TV series)',\n   'paragraph_text': 'The Reporter is an American drama series that aired on CBS from September 25 to December 18, 1964. The series was created by Jerome Weidman and developed by executive producers Keefe Brasselle and John Simon.',\n   'is_supporting': False},\n  {'idx': 5,\n   'title': 'Earthworm Jim 4',\n   'paragraph_text': 'Earthworm Jim 4 is a video game in the \"Earthworm Jim\" series. It was originally announced by Interplay Entertainment in 2008, and referred to by Interplay as \"still in development\" in May 2011. Later commentary from individual developers would claim that development hadn\\'t started, though desire to create a new entry in the series remained. In May 2019, it was announced that the game was to begin development exclusively for the upcoming Intellivision Amico console.',\n   'is_supporting': False},\n  {'idx': 6,\n   'title': 'Adobe Flash Player',\n   'paragraph_text': 'Availability on desktop operating systems Platform Latest version Browser support Windows XP and later Windows Server 2003 and later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera, Internet Explorer, Microsoft Edge Windows 2000 11.1. 102.55? Windows 98 and ME 9.0. 115.0? Windows 95 and NT 4 7.0. 14.0? Mac OS X 10.6 or later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera Mac OS X 10.5 10.3. 183.90? Classic Mac OS, PowerPC 7.0. 14.0? Classic Mac OS, 68k 5.0? Linux 27.0. 0.183 Firefox, Chrome, Chromium, Opera',\n   'is_supporting': False},\n  {'idx': 7,\n   'title': 'Apple Inc.',\n   'paragraph_text': \"Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, and the HomePod smart speaker. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.\",\n   'is_supporting': False},\n  {'idx': 8,\n   'title': 'Philadelphia Zoo',\n   'paragraph_text': 'The Philadelphia Zoo, located in the Centennial District of Philadelphia, Pennsylvania, on the west bank of the Schuylkill River, was the first true zoo in the United States. Chartered by the Commonwealth of Pennsylvania on March 21, 1859, its opening was delayed by the American Civil War until July 1, 1874. It opened with 1,000 animals and an admission price of 25 cents. For a brief time, the zoo also housed animals brought over from safari on behalf of the Smithsonian Institution, which had not yet built the National Zoo.',\n   'is_supporting': False},\n  {'idx': 9,\n   'title': 'Web browser',\n   'paragraph_text': \"Apple's Safari had its first beta release in January 2003; as of April 2011, it had a dominant share of Apple-based web browsing, accounting for just over 7% of the entire browser market.\",\n   'is_supporting': False},\n  {'idx': 10,\n   'title': 'List of The 100 episodes',\n   'paragraph_text': 'The 100 (pronounced The Hundred) is an American post-apocalyptic science fiction drama television series developed by Jason Rothenberg, which premiered on March 19, 2014, on The CW. It is loosely based on a 2013 book of the same name, the first in a book series by Kass Morgan. The series follows a group of teens as they become the first people from a space habitat to return to Earth after a devastating nuclear apocalypse.',\n   'is_supporting': False},\n  {'idx': 11,\n   'title': 'Shiira',\n   'paragraph_text': 'Shiira (シイラ, Japanese for the common dolphin-fish) is a discontinued open source web browser for the Mac OS X operating system. According to its lead developer Makoto Kinoshita, the goal of Shiira was \"to create a browser that is better and more useful than Safari\". Shiira used WebKit for rendering and scripting. The project reached version 2.3 before it was discontinued, and by December 2011 the developer\\'s website had been removed.',\n   'is_supporting': False},\n  {'idx': 12,\n   'title': 'Traffic Department 2192',\n   'paragraph_text': 'Traffic Department 2192 is a top down shooter game for IBM PC, developed by P-Squared Productions and released in 1994 by Safari Software and distributed by Epic MegaGames. The full game contains three episodes (Alpha, Beta, Gamma), each with twenty missions, in which the player pilots a \"hoverskid\" about a war-torn city to complete certain mission objectives. The game was released as freeware under the Creative Commons License CC BY-ND 3.0 in 2007.',\n   'is_supporting': False},\n  {'idx': 13,\n   'title': 'Maciej Stachowiak',\n   'paragraph_text': \"Maciej Stachowiak (; born June 6, 1976) is a Polish American software developer currently employed by Apple Inc., where he is a leader of the development team responsible for the Safari web browser and WebKit Framework. A longtime proponent of open source software, Stachowiak was involved with the SCWM, GNOME and Nautilus projects for Linux before joining Apple. He is actively involved the development of web standards, and is a co-chair of the World Wide Web Consortium's HTML 5 working group and a member of the Web Hypertext Application Technology Working Group steering committee.\",\n   'is_supporting': False},\n  {'idx': 14,\n   'title': 'Ellery Queen (TV series)',\n   'paragraph_text': 'Ellery Queen is an American TV series, developed by Richard Levinson and William Link, who based it on the fictional character of the same name. The series ran on NBC from September 11, 1975, to April 4, 1976 featuring the titular fictional sleuth. The series stars Jim Hutton as the titular character, and David Wayne as his father, Inspector Richard Queen.',\n   'is_supporting': False},\n  {'idx': 15,\n   'title': 'Hunting',\n   'paragraph_text': 'In the 19th century, southern and central European sport hunters often pursued game only for a trophy, usually the head or pelt of an animal, which was then displayed as a sign of prowess. The rest of the animal was typically discarded. Some cultures, however, disapprove of such waste. In Nordic countries, hunting for trophies was—and still is—frowned upon. Hunting in North America in the 19th century was done primarily as a way to supplement food supplies, although it is now undertaken mainly for sport.[citation needed] The safari method of hunting was a development of sport hunting that saw elaborate travel in Africa, India and other places in pursuit of trophies. In modern times, trophy hunting persists and is a significant industry in some areas.[citation needed]',\n   'is_supporting': False},\n  {'idx': 16,\n   'title': 'Safari School',\n   'paragraph_text': 'Safari School is a BBC Two reality television series presented by Dr Charlotte Uhlenbroek in which eight celebrities take part in a four-week ranger training course in the Shamwari Game Reserve in South Africa.',\n   'is_supporting': False},\n  {'idx': 17,\n   'title': 'African Safari Wildlife Park',\n   'paragraph_text': 'The African Safari Wildlife Park is a drive through wildlife park in Port Clinton, Ohio, United States. Visitors can drive through the preserve and watch and feed the animals from their car. Visitors can spend as much time in the preserve as they wish, observing and feeding the animals, before proceeding to the walk through part of the park, called Safari Junction. The park is closed during the winter.',\n   'is_supporting': False},\n  {'idx': 18,\n   'title': 'White armored car',\n   'paragraph_text': 'The White armored car was a series of armored cars developed by the White Motor Company in Cleveland, Ohio from 1915.',\n   'is_supporting': False},\n  {'idx': 19,\n   'title': 'Blue Tea Games',\n   'paragraph_text': 'The 14th game of this series. The BETA game was released in September 2017. This episode will be developed by Blue Tea Games who return to the series since 2014.',\n   'is_supporting': False}],\n 'question': \"Who developed the eponymous character from the series that contains Mickey's Safari in Letterland?\",\n 'question_decomposition': [{'id': 153573,\n   'question': \"What series is Mickey's Safari in Letterland from?\",\n   'answer': 'Mickey Mouse',\n   'paragraph_support_idx': None},\n  {'id': 109006,\n   'question': 'Who developed #1 ?',\n   'answer': 'Walt Disney',\n   'paragraph_support_idx': None}],\n 'answer': 'Walt Disney',\n 'answer_aliases': [],\n 'answerable': False}\n\n\n\njs_list[0].keys()\n\ndict_keys(['id', 'paragraphs', 'question', 'question_decomposition', 'answer', 'answer_aliases', 'answerable'])\n\n\n\njs_list[0]\n\n{'id': '2hop__153573_109006',\n 'paragraphs': [{'idx': 0,\n   'title': 'History of the Internet',\n   'paragraph_text': \"Precursors to the web browser emerged in the form of hyperlinked applications during the mid and late 1980s (the bare concept of hyperlinking had by then existed for some decades). Following these, Tim Berners - Lee is credited with inventing the World Wide Web in 1989 and developing in 1990 both the first web server, and the first web browser, called WorldWideWeb (no spaces) and later renamed Nexus. Many others were soon developed, with Marc Andreessen's 1993 Mosaic (later Netscape), being particularly easy to use and install, and often credited with sparking the internet boom of the 1990s. Today, the major web browsers are Firefox, Internet Explorer, Google Chrome, Opera and Safari.\",\n   'is_supporting': False},\n  {'idx': 1,\n   'title': 'Ceville',\n   'paragraph_text': \"Ceville is a humorous graphic adventure video game developed by the German game studio Realmforge Studios and published by Kalypso Media. Despite the game's use of 3D environments and models, the gameplay is very true to the graphical point-and-click adventure tradition of gameplay, immortalized by game series like Monkey Island from LucasArts and the King's Quest series from Sierra Online.\",\n   'is_supporting': False},\n  {'idx': 2,\n   'title': 'Zipline Safari',\n   'paragraph_text': \"Zipline Safari is a zip-line course in Florida. It is the only zip-line course in the state, and is claimed to be the world's only zip-line created for flat land. Zipline Safari opened on 16 January 2009 in Forever Florida, a wildlife attraction near Holopaw, Florida. The zip-line cost $350,000 to build, and consists of nine platforms built up from the ground and traveled between by zip-lining. Forever Florida built the course to promote ecotourism and interaction with the natural environment of Florida.\",\n   'is_supporting': False},\n  {'idx': 3,\n   'title': 'Parc Safari',\n   'paragraph_text': \"Parc Safari is a zoo in Hemmingford, Quebec, Canada, and is one of the region's major tourist attractions; that has both African & Asian species of elephant.\",\n   'is_supporting': False},\n  {'idx': 4,\n   'title': 'The Reporter (TV series)',\n   'paragraph_text': 'The Reporter is an American drama series that aired on CBS from September 25 to December 18, 1964. The series was created by Jerome Weidman and developed by executive producers Keefe Brasselle and John Simon.',\n   'is_supporting': False},\n  {'idx': 5,\n   'title': 'Earthworm Jim 4',\n   'paragraph_text': 'Earthworm Jim 4 is a video game in the \"Earthworm Jim\" series. It was originally announced by Interplay Entertainment in 2008, and referred to by Interplay as \"still in development\" in May 2011. Later commentary from individual developers would claim that development hadn\\'t started, though desire to create a new entry in the series remained. In May 2019, it was announced that the game was to begin development exclusively for the upcoming Intellivision Amico console.',\n   'is_supporting': False},\n  {'idx': 6,\n   'title': 'Adobe Flash Player',\n   'paragraph_text': 'Availability on desktop operating systems Platform Latest version Browser support Windows XP and later Windows Server 2003 and later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera, Internet Explorer, Microsoft Edge Windows 2000 11.1. 102.55? Windows 98 and ME 9.0. 115.0? Windows 95 and NT 4 7.0. 14.0? Mac OS X 10.6 or later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera Mac OS X 10.5 10.3. 183.90? Classic Mac OS, PowerPC 7.0. 14.0? Classic Mac OS, 68k 5.0? Linux 27.0. 0.183 Firefox, Chrome, Chromium, Opera',\n   'is_supporting': False},\n  {'idx': 7,\n   'title': 'Apple Inc.',\n   'paragraph_text': \"Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, and the HomePod smart speaker. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.\",\n   'is_supporting': False},\n  {'idx': 8,\n   'title': 'Philadelphia Zoo',\n   'paragraph_text': 'The Philadelphia Zoo, located in the Centennial District of Philadelphia, Pennsylvania, on the west bank of the Schuylkill River, was the first true zoo in the United States. Chartered by the Commonwealth of Pennsylvania on March 21, 1859, its opening was delayed by the American Civil War until July 1, 1874. It opened with 1,000 animals and an admission price of 25 cents. For a brief time, the zoo also housed animals brought over from safari on behalf of the Smithsonian Institution, which had not yet built the National Zoo.',\n   'is_supporting': False},\n  {'idx': 9,\n   'title': 'Web browser',\n   'paragraph_text': \"Apple's Safari had its first beta release in January 2003; as of April 2011, it had a dominant share of Apple-based web browsing, accounting for just over 7% of the entire browser market.\",\n   'is_supporting': False},\n  {'idx': 10,\n   'title': 'List of The 100 episodes',\n   'paragraph_text': 'The 100 (pronounced The Hundred) is an American post-apocalyptic science fiction drama television series developed by Jason Rothenberg, which premiered on March 19, 2014, on The CW. It is loosely based on a 2013 book of the same name, the first in a book series by Kass Morgan. The series follows a group of teens as they become the first people from a space habitat to return to Earth after a devastating nuclear apocalypse.',\n   'is_supporting': False},\n  {'idx': 11,\n   'title': 'Shiira',\n   'paragraph_text': 'Shiira (シイラ, Japanese for the common dolphin-fish) is a discontinued open source web browser for the Mac OS X operating system. According to its lead developer Makoto Kinoshita, the goal of Shiira was \"to create a browser that is better and more useful than Safari\". Shiira used WebKit for rendering and scripting. The project reached version 2.3 before it was discontinued, and by December 2011 the developer\\'s website had been removed.',\n   'is_supporting': False},\n  {'idx': 12,\n   'title': 'Traffic Department 2192',\n   'paragraph_text': 'Traffic Department 2192 is a top down shooter game for IBM PC, developed by P-Squared Productions and released in 1994 by Safari Software and distributed by Epic MegaGames. The full game contains three episodes (Alpha, Beta, Gamma), each with twenty missions, in which the player pilots a \"hoverskid\" about a war-torn city to complete certain mission objectives. The game was released as freeware under the Creative Commons License CC BY-ND 3.0 in 2007.',\n   'is_supporting': False},\n  {'idx': 13,\n   'title': 'Maciej Stachowiak',\n   'paragraph_text': \"Maciej Stachowiak (; born June 6, 1976) is a Polish American software developer currently employed by Apple Inc., where he is a leader of the development team responsible for the Safari web browser and WebKit Framework. A longtime proponent of open source software, Stachowiak was involved with the SCWM, GNOME and Nautilus projects for Linux before joining Apple. He is actively involved the development of web standards, and is a co-chair of the World Wide Web Consortium's HTML 5 working group and a member of the Web Hypertext Application Technology Working Group steering committee.\",\n   'is_supporting': False},\n  {'idx': 14,\n   'title': 'Ellery Queen (TV series)',\n   'paragraph_text': 'Ellery Queen is an American TV series, developed by Richard Levinson and William Link, who based it on the fictional character of the same name. The series ran on NBC from September 11, 1975, to April 4, 1976 featuring the titular fictional sleuth. The series stars Jim Hutton as the titular character, and David Wayne as his father, Inspector Richard Queen.',\n   'is_supporting': False},\n  {'idx': 15,\n   'title': 'Hunting',\n   'paragraph_text': 'In the 19th century, southern and central European sport hunters often pursued game only for a trophy, usually the head or pelt of an animal, which was then displayed as a sign of prowess. The rest of the animal was typically discarded. Some cultures, however, disapprove of such waste. In Nordic countries, hunting for trophies was—and still is—frowned upon. Hunting in North America in the 19th century was done primarily as a way to supplement food supplies, although it is now undertaken mainly for sport.[citation needed] The safari method of hunting was a development of sport hunting that saw elaborate travel in Africa, India and other places in pursuit of trophies. In modern times, trophy hunting persists and is a significant industry in some areas.[citation needed]',\n   'is_supporting': False},\n  {'idx': 16,\n   'title': 'Safari School',\n   'paragraph_text': 'Safari School is a BBC Two reality television series presented by Dr Charlotte Uhlenbroek in which eight celebrities take part in a four-week ranger training course in the Shamwari Game Reserve in South Africa.',\n   'is_supporting': False},\n  {'idx': 17,\n   'title': 'African Safari Wildlife Park',\n   'paragraph_text': 'The African Safari Wildlife Park is a drive through wildlife park in Port Clinton, Ohio, United States. Visitors can drive through the preserve and watch and feed the animals from their car. Visitors can spend as much time in the preserve as they wish, observing and feeding the animals, before proceeding to the walk through part of the park, called Safari Junction. The park is closed during the winter.',\n   'is_supporting': False},\n  {'idx': 18,\n   'title': 'White armored car',\n   'paragraph_text': 'The White armored car was a series of armored cars developed by the White Motor Company in Cleveland, Ohio from 1915.',\n   'is_supporting': False},\n  {'idx': 19,\n   'title': 'Blue Tea Games',\n   'paragraph_text': 'The 14th game of this series. The BETA game was released in September 2017. This episode will be developed by Blue Tea Games who return to the series since 2014.',\n   'is_supporting': False}],\n 'question': \"Who developed the eponymous character from the series that contains Mickey's Safari in Letterland?\",\n 'question_decomposition': [{'id': 153573,\n   'question': \"What series is Mickey's Safari in Letterland from?\",\n   'answer': 'Mickey Mouse',\n   'paragraph_support_idx': None},\n  {'id': 109006,\n   'question': 'Who developed #1 ?',\n   'answer': 'Walt Disney',\n   'paragraph_support_idx': None}],\n 'answer': 'Walt Disney',\n 'answer_aliases': [],\n 'answerable': False}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dmitriy Leybel",
    "section": "",
    "text": "If you’re here, you probably know my name. If you don’t, it’s Dmitriy Leybel.\nIn any case, welcome to my page!\nBy profession, I’m a founder, consultant, and data scientist. Those are but some of the hats I’ve worn. At this point, I’ve probably worked with every part of the tech stack(including MPUs and MCUs).\nExcept for bare-metal DevOps. We don’t speak of bare-metal DevOps in these parts.\nAbove all else, I consider myself a tinkerer.\n\n\n\nI run a data consultancy, Prudent Patterns, specializing in data of all sizes, big and small alike. If you’re looking for strategic guidance around machine learning, data quality, data infrastructure, Large Language Models, statistical analysis, data visualization, and experimentation, feel free to reach out to me there or shoot me a message here (dmleybel at gmail dot com).\nA side project of mine and micro-startup that I’ve founded is Hippograph. The nomenclature combines hippocampus and graph, as well as a play on the word hippogriff, y’know, the mythical creature(yeah, sometimes I consider myself clever). As the name suggests, it uses knowledge graphs as a structured memory for answering questions about corpuses of data, which it first deconstructs to the fundamentals necessary for approaching the desired lines of questioning. It’s easier demo’d than said, so I’d suggest you check out the video on its site. :) Also, feel free to reach out (dmleybel at gmail dot com) if you’re interested in teaming up.\nI am also an avid enjoyer of Corgis. A corgoisseur, one may say."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I was born in Kiev, Ukraine but I moved to Los Angeles, CA at the age of 5 – where I’ve lived most of my life. After a couple of decades of unyielding sun and pleasant weather, I decided that a change of scenery was in order. So I moved to Oregon."
  },
  {
    "objectID": "notebooks/cross_test.html",
    "href": "notebooks/cross_test.html",
    "title": "Doc Load",
    "section": "",
    "text": "import os\nfrom collections import OrderedDict\nfrom collections.abc import Collection\nfrom uuid import uuid4\nfrom functools import partial\nimport json\nimport logging\nimport logging.config\nfrom copy import deepcopy\n\nimport param\n\nimport panel as pn\nfrom panel.chat import ChatMessage, ChatInterface, ChatFeed\nfrom panel.theme import Material\nfrom panel.reactive import ReactiveHTML\n\nfrom langchain_openai import ChatOpenAI\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.embeddings import OpenAIEmbeddings\nfrom langchain_core.prompts import (\n    ChatPromptTemplate,\n    HumanMessagePromptTemplate,\n    SystemMessagePromptTemplate,\n    MessagesPlaceholder,\n)\nfrom langchain.schema.runnable import RunnableLambda\nfrom langchain_core.messages import SystemMessage, HumanMessage\nfrom langchain_core.output_parsers import (\n    StrOutputParser,\n    JsonOutputParser,\n    BaseTransformOutputParser,\n)\nfrom langchain_core.memory import BaseMemory\nfrom langchain_core.runnables import RunnablePassthrough\n\nfrom typing import Dict, List, Union, Tuple, Optional\nfrom pydantic.v1 import BaseModel, Field\n\n\nfrom neo4j import GraphDatabase\n\nimport tiktoken\n\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nimport asyncio\nfrom dotenv import load_dotenv\nimport re\nimport time\nfrom pprint import pprint\n\nfrom ui_helpers import DraggableList\nfrom langchain_helpers import token_len, JsonNodesEdgesStreamParser, initialize_nb, VisJSHandler, GraphHistory\n\nfrom IPython.display import clear_output, display\n\n\npn.extension()\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nwith open('logs/logging_config.json', 'r') as f:\n    config = json.load(f)\nlogging.config.dictConfig(config)\nlogger = logging.getLogger('root')\n\n\nwith open(\"lean_startup_article.txt\", \"r\") as f:\n    txt = f.read()\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=260, chunk_overlap=20, length_function=token_len\n)\nsplit = text_splitter.create_documents([txt])\npprint(split[5].page_content)\n\n('When it comes time to grow your team, Jeff Jordan and Eric pointed out three '\n 'hiring mistakes to avoid.\\n'\n 'First, do not hire someone just because they have the domain expertise. You '\n 'want to be sure that they can work with the resources you can provide in '\n 'terms of staff size and budgets. In other words, be sure they are ready to '\n 'work at a startup. Jeff elaborated, “You want to tee [your hires] to the '\n 'state of the company.” For example, don’t court public-ready CFOs when your '\n 'financials aren’t even on QuickBooks yet.\\n'\n 'Second, don’t simply hire your buddies. “You’re kind of looking for '\n 'founders,” not friends, remarked Jeff. “If you know the true story of any '\n '[startup], the early employees are every bit as entrepreneurial, every bit '\n 'as dedicated … as the true founder,” Eric seconded.')\n\n\n\nPrompting\n\nclass Node(BaseModel):\n    semantic_id: str = Field(..., description=\"The unique identifier of the node that is reference to create edges between different nodes.\")\n    category: str = Field(..., description=\"The category of the node\")\n    attributes: Optional[Dict[str, Union[str, int, bool]]] = Field(None, description=\"Additional properties of the node\")\n\nclass Edge(BaseModel):\n    from_node: str = Field(..., description=\"The id of the node from which the edge originates. Only semantic_ids belong here, nothing else.\")\n    to_node: str = Field(..., description=\"The id of the node to which the edge connects. Only semantic_ids belong here, nothing else.\")\n    category: str = Field(..., description=\"The type of the relationship\")\n    attributes: Optional[Dict[str, Union[str, int, bool]]] = Field(None, description=\"Additional properties of the edge\")\n\nclass Graph(BaseModel):\n    nodes: List[Node] = Field(...,description=\"A list of nodes in the graph\")\n    edges: List[Edge] = Field(...,description=\"A list of edges in the graph\")\n\n# json_template = json.dumps(json_template_dict)\n\njson_rules = \\\n\"\"\"We need to create a JSON object that contains a list of nodes and edges that connect the nodes.\nBoth, nodes and edges, have optional attributes.\nYour goal is to extract as much pertinent information from the passage as possible and create nodes and edges with the extracted information.\nIf history is provided, it will be in the JSON schema you are given. You may create new connections between the nodes and edges in the history and the new nodes you are producing.\nIf you wish to change/update any of the node attributes in the provided history based on newly gathered information, simply reuse the semantic_ids of the nodes you wish to change.\nIf you wish to modify/update the edge attributes in the history, reuse the semantic_ids of the 'from' and 'to' nodes of any edge you wish to change.\nUse the following schema and make sure to read the descriptions:\n\"\"\" \n\njson_prompt_instructions = json_rules + Graph.schema_json() + \"\\n-----\\n\"\n\ngraph_creator_content = \\\n\"\"\"You are a brilliant and efficient creator of json objects that capture the essence of passages and who follows instructions unbelievably well.\nYou will be first given instructions and a json schema, then you will be provided a passage to extract the information from.\nYour instructions are:\n{instructions}\nHistory:\n{history}\n\"\"\"\ngraph_analyst_prompt = SystemMessagePromptTemplate.from_template(template=graph_creator_content,\n                              partial_variables={'instructions': json_prompt_instructions})\npass_passage_content = \"Below is the passage to extract the values from.\\n*****\\nPassage:\\n{passage}\"\npass_passage_template = HumanMessagePromptTemplate.from_template(pass_passage_content)\n\ngen_template = graph_analyst_prompt + pass_passage_template\nllm35 = ChatOpenAI(model='gpt-3.5-turbo-0125')\nllm4 = ChatOpenAI(model='gpt-4-1106-preview')\n\n\n\nNetwork Viz\n\n# Working Class\nclass VisJSNetwork(ReactiveHTML):\n    nodes = param.List([])\n    edges = param.List([])\n    # Needed for adding nodes and edges without sending all nodes and edges\n    new_nodes = param.List([])\n    new_edges = param.List([])\n\n    def add_nodes(self, nodes):\n        if not isinstance(nodes, List):\n            nodes = [nodes]\n        logger.debug(f\"Adding nodes: {nodes}\")\n        self.new_nodes.extend(nodes)\n        self.nodes.extend(nodes)\n        self.param.trigger(\"new_nodes\")\n        self.new_nodes = []\n\n    def add_edges(self, edges):\n        if not isinstance(edges, List):\n            edges = [edges]\n        logger.debug(f\"Adding edges: {edges}\")\n        self.new_edges.extend(edges)\n        self.edges.extend(edges)\n        self.param.trigger(\"new_edges\")\n        self.new_edges = []\n\n    def add_item(self, item):\n        item_type = next(iter(item.keys()))\n        if item_type == 'nodes':\n            self.add_nodes(item['nodes'])\n        elif item_type == 'edges':\n            self.add_edges(item['edges'])    \n\n    _template = \"\"\"\n    &lt;div id=\"mynetwork\" class=\"mynetwork\" style=\"height: 800px; width: 1000px; background-color: #1f2455;\"&gt;&lt;/div&gt;\n    &lt;div id=\"config\"&gt;&lt;/div&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Sora:wght@300&display=swap\" rel=\"stylesheet\" /&gt;\n\n    \"\"\"\n\n    _scripts = {\n        \"add_nodes_js\": \"\"\"return function(nodes) { \nfor (var i = 0; i &lt; nodes.length; i++) {\n    var node = nodes[i];\n    var label = \"\";\n    var groupAdded = false;\n    for (var key in node) {\n        if (key != 'id' && key != 'font' && key != 'semantic_id') {  // Exclude 'id', 'font' and 'semantic_id' from the attributes\n            var keyFormatted = \"&lt;b&gt;\" + key + \"&lt;/b&gt;:\\\\n\";\n            var valueFormatted = node[key].toString();\n            // Split key to adhere to the 30 character limit per line\n            if (keyFormatted.length &gt; 30) {\n                var keySplitIndex = keyFormatted.lastIndexOf(' ', 30);\n                if (keySplitIndex == -1) keySplitIndex = 30; // Split at 30 if no spaces\n                keyFormatted = keyFormatted.substring(0, keySplitIndex) + \"\\\\n\";\n            }\n            label += keyFormatted;\n            // Split value to adhere to the 30 character limit per line\n            while (valueFormatted.length &gt; 0) {\n                if (valueFormatted.length &gt; 30) {\n                    var valueSplitIndex = valueFormatted.lastIndexOf(' ', 30);\n                    if (valueSplitIndex == -1) valueSplitIndex = 30; // Split at 30 if no spaces\n                    label += valueFormatted.substring(0, valueSplitIndex) + \"\\\\n\";\n                    valueFormatted = valueFormatted.substring(valueSplitIndex).trim();\n                } else {\n                    label += valueFormatted + \"\\\\n\";\n                    break; // Exit loop if the rest of the value fits in one line\n                }\n            }\n        }\n    }\n    // Replace special HTML characters in the label\n    node['label'] = label.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nnetwork_nodes.update(nodes);\n};\n\"\"\",\n        \n        \"add_edges_js\": \"\"\"return function(edges) { \nfor (var i = 0; i &lt; edges.length; i++) {\n    var edge = edges[i];\n    var label = \"\";\n    var fromToAdded = false;\n    for (var key in edge) {\n        if (key != 'from' && key != 'to' && key != 'id') {  // Exclude 'from', 'to' and 'id' from the attributes\n            if (key == 'label' && !fromToAdded) {\n                label += \"&lt;b&gt;\" + key + \"&lt;/b&gt;:\\\\n\" + edge[key] + \"\\\\n\";\n                fromToAdded = true;\n            } else {\n                label += \"&lt;b&gt;\" + key + \"&lt;/b&gt;:\\\\n\" + edge[key] + \"\\\\n\";\n            }\n        }\n    }\n    edge['label'] = label.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nnetwork_edges.update(edges);\n};\n\n\"\"\",\n        \"after_layout\": \"\"\"\nnetwork_nodes = new vis.DataSet();\nself.add_nodes_js()(data.nodes);\nnetwork_edges = new vis.DataSet();\nself.add_edges_js()(data.edges);\nnetwork_data = {nodes: network_nodes, edges: network_edges};\n\n// network.fit()\nvar options = {\n    nodes: {\n        shape: 'box',\n        shapeProperties: {\n            borderRadius: 6\n        },\n        font: {\n            face: 'Palatino Linotype',\n            align: 'left',\n            color: '#1f2455',\n            multi: 'html',\n            bold: {\n                face: 'Lucida Sans Unicode',\n                size: 12\n            }\n        },\n        borderWidth: 3,\n        color: {\n            border: '#b73e3d'\n        },\n        shadow: {\n            enabled: true,\n            color: '#b73e3d',\n            size: 5,\n            x: 3,\n            y: 3\n        }\n    },\n    edges: {\n        arrows: {\n            to: {enabled: true, scaleFactor:1, type:'arrow'},\n            middle: {enabled: false, scaleFactor:1, type:'arrow'},\n            from: {enabled: false, scaleFactor:1, type:'arrow'}\n        },\n        length: 350,\n        font: {\n            face: 'Palatino Linotype',\n            size: 12,\n            color: '#e9b07d',\n            strokeWidth: 0,\n            strokeColor: '#000000',\n            multi: 'html',\n            align: 'middle',\n            bold: {\n                face: 'Lucida Sans Unicode',\n                size: 12\n                }\n        },\n    }\n}\nvar network = new vis.Network(mynetwork, network_data, options)\n\"\"\",\n        \"new_nodes\": \"\"\"self.add_nodes_js()(data.new_nodes)\"\"\",\n        \"new_edges\": \"\"\"self.add_edges_js()(data.new_edges)\"\"\"\n    }\n    __javascript__ = [\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"]\n    # __javascript_modules__= ['https://cdn.jsdelivr.net/npm/cytoscape-dom-node@1.2.0/src/index.min.js']\n# TODO: Assign special colors to groups once we have a solid flow for group ID\nvisjs_network = VisJSNetwork()\ntry:\n    server.stop()\nfinally:\n    server = pn.serve(pn.Row(visjs_network), port=46582, show=True, title='Knowledge graph sheeeeeeit')\n\n\n\nLoop over pre-generated history to create nodes/edges\n\nimport pickle\nwith open('graph_history.pkl', 'rb') as f:\n    history = pickle.load(f)\n\n\nasync def async_iterable(data_list):\n    for data in data_list:\n        yield data\n\ntup_list = [(str(k), v) for k,v in history.items()]\n\nasync for dat in async_iterable(tup_list):\n    proc_item = VisJSHandler.process_item(dat)\n    await asyncio.sleep(.5)\n    visjs_network.add_item(proc_item)"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark-0/index.html",
    "href": "technical_blog/knowledge-graph-rag-benchmark-0/index.html",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "",
    "text": "It’s finally happening. It, being me writing a blog entry. (I’m editing this at 10k words. I guess it’s more of an article and less of a blog entry)\nThe motivation behind this series of posts is twofold, to run a basic knowledge graph Retrieval Augmented Generation(RAG) benchmark I can build off of and iteratively improve, and secondarily, to give the reader a ride-along of the process, from choosing a benchmark, creating a knowledge graph, connecting the knowledge graph to a vector store, and so forth. You are free to use the table of contents to skip around to what interests you most, or embark on a marathon read from top to bottom.\nI fully believe in democratizing the ability to build and test your own LLM tools, as they are a critical frontier of artificial intelligence. That is the path towards progress and away from the centralization of these fantastic technologies."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#rag",
    "href": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#rag",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "1.1 RAG",
    "text": "1.1 RAG\nLarge Language Models(LLMs) are fantastic…that is, until you attempt to verify their output.\n\n\n\n\n\n\nFor this reason, RAG has been a fundamental component of truthiness. It also allows you to augment the LLM output through context-stuffing. The amount of tokens you can stuff into your context is not limitless, and so you can’t merely stuff all of your documents and tables into it. Out of this limit emerge dozens of RAG techniques which try to hydrate the prompt. The fine folks at Langchain have illustrated a small portion of these techniques here(Fig 1). Even with the promise of a 10 million token context window, there is no abatement of upcoming RAG techniques and companies built around it.\n\n\n\n\n\n\n\n\nFigure 1: Soiree of RAG techniques\n(Click to enlarge)\nSource: Langchain blog\n\n\n\n\n\n\nAn ever-growing survey of these techniques exists - and even that is not fully exhaustive. P.S. exa.ai is a fantastic source for research. \nFor reference, here(Fig 2) is a diagram of one of the simplest versions of RAG being implemented.\n\n\n\n\n\n\nFigure 2: Basic RAG Example"
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#knowledge-graphs",
    "href": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#knowledge-graphs",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "1.2 Knowledge Graphs",
    "text": "1.2 Knowledge Graphs\nIt’s much easier to illustrate than explicate what a knowledge graph is(Fig 3). Below, we have a knowledge graph that represents places, people, and things along with their relationships to one another. This is a directed graph, in the sense that the connections flow in one direction - this generally makes it easier to specify the relationships between entities. There are many names for the entities within a knowledge graph as well as the connections between them; one of the most common naming conventions for them are nodes for the entities such as “Bob” or “The Louvre” and edges for the connections between the nodes such as “was created by” or “is located in”. Additionally, these nodes and edges can both have properties or attributes - for instance, the ‘Museum’ node can have attributes that enrich it such as “capacity: 2,000” and the edge ‘visited’ can be assigned a date attribute “date: March 28th, 2005”. You’ll often hear the word triple in reference to two nodes connected by an edge(Node A, Edge, Node B)\n\n\n\n\n\n\nFigure 3: An example of a basic knowledge graph.\n\n\n\nKnowledge graphs are often created within graph databases such as Neo4j, memgraph, or Amazon Neptune. They are often used within enterprises to integrate data from structured and unstructured databases alike to enable a single source of truth or knowledge. In theory, they are fantastic tools for information storage and retrieval, however, in practice they have a lot of quirks that prevent many companies from using them. The distillation of a company’s data into a neat set of nodes and edges is a complex task that requires knowledge graph experts, as well as alignment from all corners of the organization.\nWhile the appeal of knowledge graphs is immense because it appeals to our intuitive sense of informational organization and structure, you can see for yourself how difficult the task is by trying to organize the things on your desk into a knowledge graph. Your brain has no problem with making sense of it all and maintaining its own knowledge representation of what’s in front of your nose, but reproducing it in a knowledge graph is not as straightforward as our intuition leads us to believe.\n“Are you done sh*tting on knowledge graphs, Dmitriy?”\n\n1.2.1 LLM Synergy\nYes. In fact, here I am proudly generating a knowledge graph for the world to see.\nReal-time knowledge graph creation with GPT-3.5 Turbo Using:@LangChainAI @visjsPanel from @HoloViz_org for handling interpreter/browser bidirectional communication pic.twitter.com/P4mtAZDMaP— dmitriy (@DmitriyLeybel) February 18, 2024 \nIt may seem like this is the start of an all-hands meeting that’s 45 minutes too long, but I promise you that it’s not(unless you want it to be?). The word ‘synergy’ is perfect for describing the relationship between LLMs and knowledge graphs. The lowest hanging fruit for this match made in heaven was writing queries. Given a schema, an LLM can query a graph database to retrieve information.\nSome graph databases can be queried with Cypher(a graph querying language):\nMATCH (n:Person)-[r:KNOWS]-&gt;(m:Person)\nWHERE n.name = 'Alice'\nRETURN n, r, m\nIf you’re familiar with SQL, you immediately see the similarities. This query returns the person node n with the name Alice and all of the people(m) she knows(r). Fortunately, LLMs are superb at query languages, so your Cypher prowess can be minimal to nonexistent in order to compose this masterpiece:\n\nyo chatgpt, this is my graph db’s schema:schema here I need you to write a Cypher query that returns all of the people Alice knows\n\nCool. Now we can fire all of these data analysts, right? Maybe next year. (DISCLAIMER: this is a joke, not business advice)\nQuery generation turns out to be fairly popular, with frameworks like Langchain and LlamaIndex creating modules to do just that. Turns out, using LLMs, we can not only build queries, but we can build the knowledge graph itself. I will later go over this at length, so to be brief, you can have a LLM go over a set of documents chunk by chunk and output these triplets of nodes and edges iteratively. After loading them into a graph database, you can end the process there and trot along with your newly minted database, or you can now let the LLM create queries against that database as described earlier.\n\n\nLangchain and LlamaIndex also have their own plug-n-play knowledge graph creation modules.\nAt this point, like any rational human being, you may be asking, can this get any better? I mean, you’ve lasted this long, so I imagine that you already know the answer."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#rag-knowledge-graphs",
    "href": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#rag-knowledge-graphs",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "1.3 RAG + Knowledge Graphs",
    "text": "1.3 RAG + Knowledge Graphs\n\n\n\n\n\n\nImportant\n\n\n\nRemember, there are many ways you can skin a cat. The examples provided are merely the ones I believe are most illustrative of the main components. The extent of the composability is only limited by your imagination.\n\n\nWhen you combine RAG with knowledge graphs, you get the best of both worlds. On one hand, you get a fuzzy(probabalistic) semantic layer which can be used to compare the essence of sentences or paragraphs to via embeddings. On the other, you have a discrete and symbolic representation of knowledge. That sounds an awful lot like humans – vibes-based logical processors.\nThere are limitless ways to construct a system that exploits both modalities, so I’m going to focus on the base cases. The fundamental relationship takes place between the vector embeddings and the knowledge graph. The nodes(and in some cases, the edges) are linked to an embedding related to their source material.\nThe first objective is to use an LLM to create the knowledge graph in conjunction with the embeddings. The embeddings will be stored in a vector database or vector store, which is essentially an optimized container that allows extremely fast vector comparison operations so you can quickly find the most similar embeddings. Some vector databases live in the cloud(Pinecone), they can be self-hosted(Chroma), or they can stay in your very program’s memory(FAISS). Fig 4 illustrates the fundamentals of generating your knowledge graph and vector store.\n\n1.3.1 Generating Knowledge Graphs and Populating Vector Stores\nOnce a corpus of documents is chunked into pieces, those pieces can be processed by the LLM and converted into triples which are then loaded into the knowledge graph. Concurrently, embeddings are created for the document chunks and loaded into the vector store. In each case, you can attach the reference for the node or embedding in its respective twin – this is where the magic lies. The text from the chunked documents can be stored in either the knowledge graph or in the vector store, or both. Once both are established, there are multiple retrieval strategies we can use to take advantage of this system.\n\n\n\n\n\n\nNote\n\n\n\nBuilding the knowledge graph sounds simpler than it is, and just as the architectural design of these systems, it is open to myriads of potential options – some good, and some not so good. This will be addressed.\n\n\n\n\n\n\n\n\nFigure 4: Knowledge Graph and Embedding Generation\n\n\n\n\n\n1.3.2 Retrieval Strategy #1 Focused on Embeddings Search Followed by Knowledge Graph Adjacency\nWith a populated vector store and knowledge graph, we are set to experiment with a wide array of retrieval strategies in pursuit of finding the best one to hydrate our prompt. Fig 5 involves using the vector store to find the nearest matching embedding, find its reference in the knowledge graph, and then find the adjacent nodes within the knowledge graph to add to our prompt. This makes intuitive sense because concepts related to the initial node are likely to be relevant for the LLM in addressing the user’s query.\n\n\n\n\n\n\nFigure 5: One strategy of retrieval through first finding a close embedding, and then utilizing the adjacency of nodes in the knowledge graph to hydrate the prompt\n\n\n\n\n\n1.3.3 Retrieval Strategy #2 Focused on Graph Query Generation\nAnother retrieval strategy would switch the knowledge graph and vector store steps around. This will involve an extra call to the LLM in order to construct the query we’ll send to the knowledge graph. Once the nodes(and edges) are returned, we can trace the node to its referenced embedding, and retrieve the neighborhood of embeddings along with their text. Alternatively, we can ignore the embeddings and simply focus on the neighborhood of the returned nodes. For the example in Fig 6, I’ll focus on the former. As much as we both love flowcharts, I have a feeling you’re getting somewhat tired of them. That said, here’s one more.\n\n\n\n\n\n\nFigure 6: Another strategy for retrieval is to generate queries against the graph database containing the knowledge graph, and then."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#hotpot-and-beer",
    "href": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#hotpot-and-beer",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "2.1 Hotpot and Beer?",
    "text": "2.1 Hotpot and Beer?\nSingle-hop benchmarking appears to be most popular according to the RAG survey, however, we have more faith in knowledge graphs than a measly single-hop reasoning task. A single-hop requires the information from a single document to answer a question, however a multi-hop task requires you to hop between documents in order to answer the question. HotPotQA appears to be the most popular multi-hop dataset. Mentioned immediately on the HotPotQA website is another dataset which they shout out as newer, with a more diverse set of hops required, while including the HotPotQA dataset within it - BeerQA(is anyone else thirsty…). It combines QA data from three datasets, being HotPotQA, SQuAD, and its own formulated questions from Wikipedia for even more hops. Upon further inspection, BeerQA specifies that it primarily focuses on a fullwiki evaluation, that is to say, you must use the entirety of wikipedia in the task. Due to time and resource constraints, we do not currently want to build a knowledge graph from a 24GB dataset from the get-go. We do, however, want to be able to iterate in a quick and agile manner. HotPotQA doesn’t have the same compute-heavy requirement, and neither does another amusingly named dataset."
  },
  {
    "objectID": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#musique-to-my-ears",
    "href": "technical_blog/knowledge-graph-rag-benchmark-0/index.html#musique-to-my-ears",
    "title": "Don’t RAG on Knowledge Graphs(Or Do) Benchmarking: RAG, Knowledge Graphs, and Benchmarks – Part Zero",
    "section": "2.2 MuSiQue to my ears",
    "text": "2.2 MuSiQue to my ears\nAccording to the HotpotQA paper, it also has the option for using the full wiki in the evaluation criterion, however, it also has a distractor option where you’re given 2 ‘gold’ paragraphs containing the connecting information coupled with 8 irrelevant ‘distractors’ that serve as noise. Another dataset was created as an improvement over HotpotQA as well as its successor, 2WikiMultihopQA – MuSiQue(Multihop Questions via Single-hop QUestion Composition) improves over its predecessors and includes questions with upwards of 18 distractors and numerous gold paragraphs in order to create questions of up to 4 hops. In addition, it handles some cases that would’ve allowed cheating within HotPotQA(such as inferring the information that is present in the hops). In addition, MuSiQue adds answerability to the mix – roughly half of the questions are unanswerable given the data, with the breadcrumbs provided by the provided distractors being misleading.\n\n\n\n\n\n\nThis is a great augmentation because this is the type of eval that will often be present in the real world, since we often expect real world retrieval of information retrieval to come up short.\n\n\n\n\n\n\n\n\nFigure 9: Answerable and Nonanswerable Multihop Questions\n\n\n\n\n\n\nMuSiQue contains two evaluations, one with only answerable questions, and the other, evenly divided between non-answerable and answerable questions. If we look at the MuSiQue leaderboards in Fig 10, we see that the F1 score(harmonic mean of precision and recall – the higher the better) is substantially better for the Answerable dataset, as it removed the option of there being unanswerable questions for the models to hallucinate on.\n\n\n\n\n\n\nFigure 10: MuSiQue Leaderboard Comparison\n\n\n\nBefore wrapping up, I’d like to at least share some of the dev dataset meant to be used in the development of your data pipeline, published in the MuSiQue github repo.\n\n\n\n\nCode\nimport jsonlines\n\njs_list = []\nwith jsonlines.open('data/musique_full_v1.0_dev.jsonl') as reader:\n    for i in range(5):\n        js_list.append(reader.read())\n\njs_list[0]\n\n\n{'id': '2hop__153573_109006',\n 'paragraphs': [{'idx': 0,\n   'title': 'History of the Internet',\n   'paragraph_text': \"Precursors to the web browser emerged in the form of hyperlinked applications during the mid and late 1980s (the bare concept of hyperlinking had by then existed for some decades). Following these, Tim Berners - Lee is credited with inventing the World Wide Web in 1989 and developing in 1990 both the first web server, and the first web browser, called WorldWideWeb (no spaces) and later renamed Nexus. Many others were soon developed, with Marc Andreessen's 1993 Mosaic (later Netscape), being particularly easy to use and install, and often credited with sparking the internet boom of the 1990s. Today, the major web browsers are Firefox, Internet Explorer, Google Chrome, Opera and Safari.\",\n   'is_supporting': False},\n  {'idx': 1,\n   'title': 'Ceville',\n   'paragraph_text': \"Ceville is a humorous graphic adventure video game developed by the German game studio Realmforge Studios and published by Kalypso Media. Despite the game's use of 3D environments and models, the gameplay is very true to the graphical point-and-click adventure tradition of gameplay, immortalized by game series like Monkey Island from LucasArts and the King's Quest series from Sierra Online.\",\n   'is_supporting': False},\n  {'idx': 2,\n   'title': 'Zipline Safari',\n   'paragraph_text': \"Zipline Safari is a zip-line course in Florida. It is the only zip-line course in the state, and is claimed to be the world's only zip-line created for flat land. Zipline Safari opened on 16 January 2009 in Forever Florida, a wildlife attraction near Holopaw, Florida. The zip-line cost $350,000 to build, and consists of nine platforms built up from the ground and traveled between by zip-lining. Forever Florida built the course to promote ecotourism and interaction with the natural environment of Florida.\",\n   'is_supporting': False},\n  {'idx': 3,\n   'title': 'Parc Safari',\n   'paragraph_text': \"Parc Safari is a zoo in Hemmingford, Quebec, Canada, and is one of the region's major tourist attractions; that has both African & Asian species of elephant.\",\n   'is_supporting': False},\n  {'idx': 4,\n   'title': 'The Reporter (TV series)',\n   'paragraph_text': 'The Reporter is an American drama series that aired on CBS from September 25 to December 18, 1964. The series was created by Jerome Weidman and developed by executive producers Keefe Brasselle and John Simon.',\n   'is_supporting': False},\n  {'idx': 5,\n   'title': 'Earthworm Jim 4',\n   'paragraph_text': 'Earthworm Jim 4 is a video game in the \"Earthworm Jim\" series. It was originally announced by Interplay Entertainment in 2008, and referred to by Interplay as \"still in development\" in May 2011. Later commentary from individual developers would claim that development hadn\\'t started, though desire to create a new entry in the series remained. In May 2019, it was announced that the game was to begin development exclusively for the upcoming Intellivision Amico console.',\n   'is_supporting': False},\n  {'idx': 6,\n   'title': 'Adobe Flash Player',\n   'paragraph_text': 'Availability on desktop operating systems Platform Latest version Browser support Windows XP and later Windows Server 2003 and later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera, Internet Explorer, Microsoft Edge Windows 2000 11.1. 102.55? Windows 98 and ME 9.0. 115.0? Windows 95 and NT 4 7.0. 14.0? Mac OS X 10.6 or later 27.0. 0.183 Firefox, Chrome, Chromium, Safari, Opera Mac OS X 10.5 10.3. 183.90? Classic Mac OS, PowerPC 7.0. 14.0? Classic Mac OS, 68k 5.0? Linux 27.0. 0.183 Firefox, Chrome, Chromium, Opera',\n   'is_supporting': False},\n  {'idx': 7,\n   'title': 'Apple Inc.',\n   'paragraph_text': \"Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, and the HomePod smart speaker. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.\",\n   'is_supporting': False},\n  {'idx': 8,\n   'title': 'Philadelphia Zoo',\n   'paragraph_text': 'The Philadelphia Zoo, located in the Centennial District of Philadelphia, Pennsylvania, on the west bank of the Schuylkill River, was the first true zoo in the United States. Chartered by the Commonwealth of Pennsylvania on March 21, 1859, its opening was delayed by the American Civil War until July 1, 1874. It opened with 1,000 animals and an admission price of 25 cents. For a brief time, the zoo also housed animals brought over from safari on behalf of the Smithsonian Institution, which had not yet built the National Zoo.',\n   'is_supporting': False},\n  {'idx': 9,\n   'title': 'Web browser',\n   'paragraph_text': \"Apple's Safari had its first beta release in January 2003; as of April 2011, it had a dominant share of Apple-based web browsing, accounting for just over 7% of the entire browser market.\",\n   'is_supporting': False},\n  {'idx': 10,\n   'title': 'List of The 100 episodes',\n   'paragraph_text': 'The 100 (pronounced The Hundred) is an American post-apocalyptic science fiction drama television series developed by Jason Rothenberg, which premiered on March 19, 2014, on The CW. It is loosely based on a 2013 book of the same name, the first in a book series by Kass Morgan. The series follows a group of teens as they become the first people from a space habitat to return to Earth after a devastating nuclear apocalypse.',\n   'is_supporting': False},\n  {'idx': 11,\n   'title': 'Shiira',\n   'paragraph_text': 'Shiira (シイラ, Japanese for the common dolphin-fish) is a discontinued open source web browser for the Mac OS X operating system. According to its lead developer Makoto Kinoshita, the goal of Shiira was \"to create a browser that is better and more useful than Safari\". Shiira used WebKit for rendering and scripting. The project reached version 2.3 before it was discontinued, and by December 2011 the developer\\'s website had been removed.',\n   'is_supporting': False},\n  {'idx': 12,\n   'title': 'Traffic Department 2192',\n   'paragraph_text': 'Traffic Department 2192 is a top down shooter game for IBM PC, developed by P-Squared Productions and released in 1994 by Safari Software and distributed by Epic MegaGames. The full game contains three episodes (Alpha, Beta, Gamma), each with twenty missions, in which the player pilots a \"hoverskid\" about a war-torn city to complete certain mission objectives. The game was released as freeware under the Creative Commons License CC BY-ND 3.0 in 2007.',\n   'is_supporting': False},\n  {'idx': 13,\n   'title': 'Maciej Stachowiak',\n   'paragraph_text': \"Maciej Stachowiak (; born June 6, 1976) is a Polish American software developer currently employed by Apple Inc., where he is a leader of the development team responsible for the Safari web browser and WebKit Framework. A longtime proponent of open source software, Stachowiak was involved with the SCWM, GNOME and Nautilus projects for Linux before joining Apple. He is actively involved the development of web standards, and is a co-chair of the World Wide Web Consortium's HTML 5 working group and a member of the Web Hypertext Application Technology Working Group steering committee.\",\n   'is_supporting': False},\n  {'idx': 14,\n   'title': 'Ellery Queen (TV series)',\n   'paragraph_text': 'Ellery Queen is an American TV series, developed by Richard Levinson and William Link, who based it on the fictional character of the same name. The series ran on NBC from September 11, 1975, to April 4, 1976 featuring the titular fictional sleuth. The series stars Jim Hutton as the titular character, and David Wayne as his father, Inspector Richard Queen.',\n   'is_supporting': False},\n  {'idx': 15,\n   'title': 'Hunting',\n   'paragraph_text': 'In the 19th century, southern and central European sport hunters often pursued game only for a trophy, usually the head or pelt of an animal, which was then displayed as a sign of prowess. The rest of the animal was typically discarded. Some cultures, however, disapprove of such waste. In Nordic countries, hunting for trophies was—and still is—frowned upon. Hunting in North America in the 19th century was done primarily as a way to supplement food supplies, although it is now undertaken mainly for sport.[citation needed] The safari method of hunting was a development of sport hunting that saw elaborate travel in Africa, India and other places in pursuit of trophies. In modern times, trophy hunting persists and is a significant industry in some areas.[citation needed]',\n   'is_supporting': False},\n  {'idx': 16,\n   'title': 'Safari School',\n   'paragraph_text': 'Safari School is a BBC Two reality television series presented by Dr Charlotte Uhlenbroek in which eight celebrities take part in a four-week ranger training course in the Shamwari Game Reserve in South Africa.',\n   'is_supporting': False},\n  {'idx': 17,\n   'title': 'African Safari Wildlife Park',\n   'paragraph_text': 'The African Safari Wildlife Park is a drive through wildlife park in Port Clinton, Ohio, United States. Visitors can drive through the preserve and watch and feed the animals from their car. Visitors can spend as much time in the preserve as they wish, observing and feeding the animals, before proceeding to the walk through part of the park, called Safari Junction. The park is closed during the winter.',\n   'is_supporting': False},\n  {'idx': 18,\n   'title': 'White armored car',\n   'paragraph_text': 'The White armored car was a series of armored cars developed by the White Motor Company in Cleveland, Ohio from 1915.',\n   'is_supporting': False},\n  {'idx': 19,\n   'title': 'Blue Tea Games',\n   'paragraph_text': 'The 14th game of this series. The BETA game was released in September 2017. This episode will be developed by Blue Tea Games who return to the series since 2014.',\n   'is_supporting': False}],\n 'question': \"Who developed the eponymous character from the series that contains Mickey's Safari in Letterland?\",\n 'question_decomposition': [{'id': 153573,\n   'question': \"What series is Mickey's Safari in Letterland from?\",\n   'answer': 'Mickey Mouse',\n   'paragraph_support_idx': None},\n  {'id': 109006,\n   'question': 'Who developed #1 ?',\n   'answer': 'Walt Disney',\n   'paragraph_support_idx': None}],\n 'answer': 'Walt Disney',\n 'answer_aliases': [],\n 'answerable': False}\n\n\n\n\nThis is but one entry in the jsonl file. Although it has an answer 'answer': 'Walt Disney', there is not enough supporting evidence within the 20 accompanying paragraph to substantiate that and so it has a label of 'answerable': False. Each paragraph has a is_supporting label that is to be used in evaluating the pipeline’s ability to not only use the information found in these paragraphs, but to also classify these paragraphs as being supporting elements."
  }
]